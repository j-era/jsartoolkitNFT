(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ARToolkitNFT"] = factory();
	else
		root["ARToolkitNFT"] = factory();
})(typeof self !== 'undefined' ? self : this, () => {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./build/artoolkitNFT_ES6_wasm.js":
/*!****************************************!*\
  !*** ./build/artoolkitNFT_ES6_wasm.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
var __filename = "/index.js";
var __dirname = "/";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });

var Module = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  if (true) _scriptDir = _scriptDir || __filename;
  return (
function(Module) {
  Module = Module || {};

var Module=typeof Module!="undefined"?Module:{};var readyPromiseResolve,readyPromiseReject;Module["ready"]=new Promise(function(resolve,reject){readyPromiseResolve=resolve;readyPromiseReject=reject});var moduleOverrides=Object.assign({},Module);var arguments_=[];var thisProgram="./this.program";var quit_=(status,toThrow)=>{throw toThrow};var ENVIRONMENT_IS_WEB=typeof window=="object";var ENVIRONMENT_IS_WORKER=typeof importScripts=="function";var ENVIRONMENT_IS_NODE=typeof process=="object"&&typeof process.versions=="object"&&typeof process.versions.node=="string";var scriptDirectory="";function locateFile(path){if(Module["locateFile"]){return Module["locateFile"](path,scriptDirectory)}return scriptDirectory+path}var read_,readAsync,readBinary,setWindowTitle;function logExceptionOnExit(e){if(e instanceof ExitStatus)return;let toLog=e;err("exiting due to exception: "+toLog)}var fs;var nodePath;var requireNodeFS;if(ENVIRONMENT_IS_NODE){if(ENVIRONMENT_IS_WORKER){scriptDirectory=(__webpack_require__(/*! path */ "?f955").dirname)(scriptDirectory)+"/"}else{scriptDirectory=__dirname+"/"}requireNodeFS=(()=>{if(!nodePath){fs=__webpack_require__(/*! fs */ "?4dea");nodePath=__webpack_require__(/*! path */ "?f955")}});read_=function shell_read(filename,binary){var ret=tryParseAsDataURI(filename);if(ret){return binary?ret:ret.toString()}requireNodeFS();filename=nodePath["normalize"](filename);return fs.readFileSync(filename,binary?undefined:"utf8")};readBinary=(filename=>{var ret=read_(filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}return ret});readAsync=((filename,onload,onerror)=>{var ret=tryParseAsDataURI(filename);if(ret){onload(ret)}requireNodeFS();filename=nodePath["normalize"](filename);fs.readFile(filename,function(err,data){if(err)onerror(err);else onload(data.buffer)})});if(process["argv"].length>1){thisProgram=process["argv"][1].replace(/\\/g,"/")}arguments_=process["argv"].slice(2);process["on"]("uncaughtException",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process["on"]("unhandledRejection",function(reason){throw reason});quit_=((status,toThrow)=>{if(keepRuntimeAlive()){process["exitCode"]=status;throw toThrow}logExceptionOnExit(toThrow);process["exit"](status)});Module["inspect"]=function(){return"[Emscripten Module object]"}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(typeof document!="undefined"&&document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf("blob:")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.replace(/[?#].*/,"").lastIndexOf("/")+1)}else{scriptDirectory=""}{read_=(url=>{try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.send(null);return xhr.responseText}catch(err){var data=tryParseAsDataURI(url);if(data){return intArrayToString(data)}throw err}});if(ENVIRONMENT_IS_WORKER){readBinary=(url=>{try{var xhr=new XMLHttpRequest;xhr.open("GET",url,false);xhr.responseType="arraybuffer";xhr.send(null);return new Uint8Array(xhr.response)}catch(err){var data=tryParseAsDataURI(url);if(data){return data}throw err}})}readAsync=((url,onload,onerror)=>{var xhr=new XMLHttpRequest;xhr.open("GET",url,true);xhr.responseType="arraybuffer";xhr.onload=(()=>{if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}var data=tryParseAsDataURI(url);if(data){onload(data.buffer);return}onerror()});xhr.onerror=onerror;xhr.send(null)})}setWindowTitle=(title=>document.title=title)}else{}var out=Module["print"]||console.log.bind(console);var err=Module["printErr"]||console.warn.bind(console);Object.assign(Module,moduleOverrides);moduleOverrides=null;if(Module["arguments"])arguments_=Module["arguments"];if(Module["thisProgram"])thisProgram=Module["thisProgram"];if(Module["quit"])quit_=Module["quit"];var tempRet0=0;var setTempRet0=value=>{tempRet0=value};var getTempRet0=()=>tempRet0;var wasmBinary;if(Module["wasmBinary"])wasmBinary=Module["wasmBinary"];var noExitRuntime=Module["noExitRuntime"]||true;if(typeof WebAssembly!="object"){abort("no native wasm support detected")}var wasmMemory;var ABORT=false;var EXITSTATUS;function assert(condition,text){if(!condition){abort(text)}}var UTF8Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf8"):undefined;function UTF8ArrayToString(heap,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(heap[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&heap.subarray&&UTF8Decoder){return UTF8Decoder.decode(heap.subarray(idx,endPtr))}else{var str="";while(idx<endPtr){var u0=heap[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=heap[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=heap[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|heap[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):""}function stringToUTF8Array(str,heap,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;heap[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;heap[outIdx++]=192|u>>6;heap[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;heap[outIdx++]=224|u>>12;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;heap[outIdx++]=240|u>>18;heap[outIdx++]=128|u>>12&63;heap[outIdx++]=128|u>>6&63;heap[outIdx++]=128|u&63}}heap[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!="undefined"?new TextDecoder("utf-16le"):undefined;function UTF16ToString(ptr,maxBytesToRead){var endPtr=ptr;var idx=endPtr>>1;var maxIdx=idx+maxBytesToRead/2;while(!(idx>=maxIdx)&&HEAPU16[idx])++idx;endPtr=idx<<1;if(endPtr-ptr>32&&UTF16Decoder){return UTF16Decoder.decode(HEAPU8.subarray(ptr,endPtr))}else{var str="";for(var i=0;!(i>=maxBytesToRead/2);++i){var codeUnit=HEAP16[ptr+i*2>>1];if(codeUnit==0)break;str+=String.fromCharCode(codeUnit)}return str}}function stringToUTF16(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<2)return 0;maxBytesToWrite-=2;var startPtr=outPtr;var numCharsToWrite=maxBytesToWrite<str.length*2?maxBytesToWrite/2:str.length;for(var i=0;i<numCharsToWrite;++i){var codeUnit=str.charCodeAt(i);HEAP16[outPtr>>1]=codeUnit;outPtr+=2}HEAP16[outPtr>>1]=0;return outPtr-startPtr}function lengthBytesUTF16(str){return str.length*2}function UTF32ToString(ptr,maxBytesToRead){var i=0;var str="";while(!(i>=maxBytesToRead/4)){var utf32=HEAP32[ptr+i*4>>2];if(utf32==0)break;++i;if(utf32>=65536){var ch=utf32-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}else{str+=String.fromCharCode(utf32)}}return str}function stringToUTF32(str,outPtr,maxBytesToWrite){if(maxBytesToWrite===undefined){maxBytesToWrite=2147483647}if(maxBytesToWrite<4)return 0;var startPtr=outPtr;var endPtr=startPtr+maxBytesToWrite-4;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343){var trailSurrogate=str.charCodeAt(++i);codeUnit=65536+((codeUnit&1023)<<10)|trailSurrogate&1023}HEAP32[outPtr>>2]=codeUnit;outPtr+=4;if(outPtr+4>endPtr)break}HEAP32[outPtr>>2]=0;return outPtr-startPtr}function lengthBytesUTF32(str){var len=0;for(var i=0;i<str.length;++i){var codeUnit=str.charCodeAt(i);if(codeUnit>=55296&&codeUnit<=57343)++i;len+=4}return len}function allocateUTF8(str){var size=lengthBytesUTF8(str)+1;var ret=_malloc(size);if(ret)stringToUTF8Array(str,HEAP8,ret,size);return ret}function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferAndViews(buf){buffer=buf;Module["HEAP8"]=HEAP8=new Int8Array(buf);Module["HEAP16"]=HEAP16=new Int16Array(buf);Module["HEAP32"]=HEAP32=new Int32Array(buf);Module["HEAPU8"]=HEAPU8=new Uint8Array(buf);Module["HEAPU16"]=HEAPU16=new Uint16Array(buf);Module["HEAPU32"]=HEAPU32=new Uint32Array(buf);Module["HEAPF32"]=HEAPF32=new Float32Array(buf);Module["HEAPF64"]=HEAPF64=new Float64Array(buf)}var INITIAL_MEMORY=Module["INITIAL_MEMORY"]||268435456;var wasmTable;var __ATPRERUN__=[];var __ATINIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;var runtimeKeepaliveCounter=0;function keepRuntimeAlive(){return noExitRuntime||runtimeKeepaliveCounter>0}function preRun(){if(Module["preRun"]){if(typeof Module["preRun"]=="function")Module["preRun"]=[Module["preRun"]];while(Module["preRun"].length){addOnPreRun(Module["preRun"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function initRuntime(){runtimeInitialized=true;if(!Module["noFSInit"]&&!FS.init.initialized)FS.init();FS.ignorePermissions=false;TTY.init();callRuntimeCallbacks(__ATINIT__)}function exitRuntime(){runtimeExited=true}function postRun(){if(Module["postRun"]){if(typeof Module["postRun"]=="function")Module["postRun"]=[Module["postRun"]];while(Module["postRun"].length){addOnPostRun(Module["postRun"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnInit(cb){__ATINIT__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function getUniqueRunDependency(id){return id}function addRunDependency(id){runDependencies++;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module["monitorRunDependencies"]){Module["monitorRunDependencies"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module["preloadedImages"]={};Module["preloadedAudios"]={};function abort(what){{if(Module["onAbort"]){Module["onAbort"](what)}}what="Aborted("+what+")";err(what);ABORT=true;EXITSTATUS=1;what+=". Build with -s ASSERTIONS=1 for more info.";var e=new WebAssembly.RuntimeError(what);readyPromiseReject(e);throw e}var dataURIPrefix="data:application/octet-stream;base64,";function isDataURI(filename){return filename.startsWith(dataURIPrefix)}function isFileURI(filename){return filename.startsWith("file://")}var wasmBinaryFile;wasmBinaryFile="data:application/octet-stream;base64,AGFzbQEAAAAB6gVbYAF/AX9gAX8AYAJ/fwBgAn9/AX9gA39/fwF/YAN/f38AYAV/f39/fwBgBH9/f38AYAR/f39/AX9gBn9/f39/fwF/YAV/f39/fwF/YAZ/f39/f38AYAd/f39/f39/AGAIf39/f39/f38Bf2AAAX9gB39/f39/f38Bf2ABfQF9YAAAYAV/fn5+fgBgA39+fwF+YAJ/fABgAn19AX1gBX9/f39+AX9gCH9/f39/f39/AGADf39/AX1gCn9/f39/f39/f38Bf2AEf39/fwF+YAp/f39/f39/f39/AGAEf35+fwBgAX8BfGAHf39/f39+fgF/YAZ/f39/fn4Bf2ADf398AGABfwF9YAV/fX1/fwF/YAF8AX1gA39/fQBgAnx/AXxgBn9/fX1/fwF/YAV/f319fwBgAXwBfGACf38BfWAJf39/f39/f39/AX9gAn9/AXxgDH9/f39/f39/f39/fwF/YAV/f35/fwBgBn98f39/fwF/YAZ/f39/fn8Bf2APf39/f39/f39/f39/f39/AGALf39/f39/f39/f38Bf2AFf39/f3wBf2ANf39/f39/f39/f39/fwBgA399fQF9YAV/fX1/fwF9YAR9fX19AX1gAn9+AGAHf39/f3x/fwF/YAR+fn5+AX9gBH9/f30AYAJ+fwF/YAF9AX9gA3x8fwF8YAJ8fAF8YAd/f39/f399AX1gB39/f39/f38BfWADf35/AGADf399AX1gDH9/f39/f39/f398fwF/YAJ+fgF8YAN+fn4Bf2AFf39/fX0AYAZ8fHx8fHwBfGADfHx8AXxgA319fQF9YAR/f39+AX5gAn5+AX1gBn99fX19fwF/YAN/f34AYAJ/fwF+YAJ/fQF9YAF/AX5gAn1/AX9gAnx/AX9gDn9/f39/f39/f398f39/AX9gBX9/fX1/AX9gA39/fQF/YAZ/f39/f30AYAZ/fHx/f38AYAR/f35+AGAEf35/fwF/YAN/f38BfAKzAjMBYQFhABEBYQFiAAUBYQFjAAEBYQFkAAEBYQFlAA4BYQFmABcBYQFnAAsBYQFoAAYBYQFpAAQBYQFqAAUBYQFrAAABYQFsAAIBYQFtAAYBYQFuAAUBYQFvAAMBYQFwAAsBYQFxADMBYQFyAAABYQFzAAgBYQF0AAQBYQF1AAIBYQF2AAUBYQF3ACAB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QQxtC2ABAX8jAEEQayIFJAAgACADIAQQ9wEhACAFQQxqIAVBCGogASACIAMQnAQgBSoCCCEBIAAgBSoCDCAAKAIEQQJrsxDnAiABIAAoAghBAmuzEOcCEEkhASAFQRBqJAAgAQsJACAAIAAQ6AULBwAgAEEQagtGACAAIAEqAgggASoCACACKgIAlCABKgIEIAIqAgSUkpI4AgAgACABKgIUIAEqAgwgAioCAJQgASoCECACKgIElJKSOAIECygBAX8gASABQQFrIgJxRQRAIAAgAnEPCyAAIAFPBH8gACABcAUgAAsL8AIBBH9B3K4ELQAABEBB2K4EKAIADwsjAEEgayICJAACQAJAA0AgAkEIaiAAQQJ0agJ/QQEgAHRB/////wdxIgNBAXJFBEAgAEECdCgCAAwBCyAAQf6NAkGCmQIgAxsQzgQLIgM2AgAgA0F/RwRAIABBAWoiAEEGRg0CDAELCwwBC0EAEMwERQRAQeiQAyEBIAJBCGpB6JADEPICRQ0BQYCRAyEBIAJBCGpBgJEDEPICRQ0BQQAhAEGwrQQtAABFBEADQCAAQQJ0QYCtBGogAEGCmQIQzgQ2AgAgAEEBaiIAQQZHDQALQbCtBEEBOgAAQZitBEGArQQoAgA2AgALQYCtBCEBIAJBCGpBgK0EEPICRQ0BQZitBCEBIAJBCGpBmK0EEPICRQ0BQRgQOyIBRQ0BCyABIAIpAwg3AgAgASACKQMYNwIQIAEgAikDEDcCCAsgAkEgaiQAIAEhAEHcrgRBAToAAEHYrgQgADYCACAAC8kKAgV/D34jAEHgAGsiBSQAIARC////////P4MhDCACIASFQoCAgICAgICAgH+DIQogAkL///////8/gyINQiCIIQ4gBEIwiKdB//8BcSEHAkACQCACQjCIp0H//wFxIglB//8Ba0GCgH5PBEAgB0H//wFrQYGAfksNAQsgAVAgAkL///////////8AgyILQoCAgICAgMD//wBUIAtCgICAgICAwP//AFEbRQRAIAJCgICAgICAIIQhCgwCCyADUCAEQv///////////wCDIgJCgICAgICAwP//AFQgAkKAgICAgIDA//8AURtFBEAgBEKAgICAgIAghCEKIAMhAQwCCyABIAtCgICAgICAwP//AIWEUARAIAIgA4RQBEBCgICAgICA4P//ACEK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IgIgAUIgiCIEfnwgA0L/////D4MiAyABQv////8PgyIBfiIFQiCIIAMgBH58IgNCIIh8IAEgAn4gA0L/////D4N8IgFCIIh8NwMIIAAgBUL/////D4MgAUIghoQ3AwALGAAgAC0AAEEgcUUEQCABIAIgABDdAxoLCwkAIAAgATYCBAtZAQJ/IwBBEGsiAiQAIAAQiAEEQCAAKAIAIQMgABDpARogAxA0CyAAIAEoAgg2AgggACABKQIANwIAIAFBABCSASACQQA6AA8gASACQQ9qEIcBIAJBEGokAAtQAQF+AkAgA0HAAHEEQCABIANBQGqthiECQgAhAQwBCyADRQ0AIAIgA60iBIYgAUHAACADa62IhCECIAEgBIYhAQsgACABNwMAIAAgAjcDCAtvAQF/IwBBgAJrIgUkACAEQYDABHEgAiADTHJFBEAgBSABQf8BcSACIANrIgJBgAIgAkGAAkkiARsQOhogAUUEQANAIAAgBUGAAhCKASACQYACayICQf8BSw0ACwsgACAFIAIQigELIAVBgAJqJAALCQAgABBKKAIACwkAIAAgATYCAAuhAQECfwJAIAAQOEUgAiABa0EFSHINACABIAIQuwMgAkEEayEEIAAQPyICIAAQOGohBQJAA0ACQCACLAAAIQAgASAETw0AIABBAEwgAEH/AE5yRQRAIAEoAgAgAiwAAEcNAwsgAUEEaiEBIAIgBSACa0EBSmohAgwBCwsgAEEATCAAQf8ATnINASACLAAAIAQoAgBBAWtLDQELIANBBDYCAAsLCQAgACABOgALCwwAIAAgARDlBEEBcwsMACAAIAEQ6QRBAXMLDQAgACgCBCAAKAIAawtqAQF/IABCgICAgICAgPi/fzcDCCAAQoCAgICAgID4v383AwAgACECIABBEGogARBLGiMAQRBrIgEkACABQQhqQQAQFxogAiABKAIMt0SN7bWg98awPqIgASgCCLegOQMAIAFBEGokACAACzABAn0Cf0EBIAEqAgAiAiAAKgIAIgNdDQAaQQAgAiADXg0AGiABKAIEIAAoAgRJCwsLACAAQfyuBBDLAQsNACAAKAIAIAFBDGxqC5kIAgp/AX0jAEEgayIEJAAgBEEBNgIYIAQgATYCHCABQQBOBEAgBCABNgIIIAQgAEHcAGoiACAEQQhqIgEQdDYCECAEEGw2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gICAgICAwP//AFEbRQRAIARCgICAgICAIIQhBAwCCyABIAZCgICAgICAwP//AIWEUARAQoCAgICAgOD//wAgAiABIAOFIAIgBIVCgICAgICAgICAf4WEUCIJGyEEQgAgASAJGyEDDAILIAMgBUKAgICAgIDA//8AhYRQDQEgASAGhFAEQCADIAWEQgBSDQIgASADgyEDIAIgBIMhBAwCCyADIAWEUEUNACABIQMgAiEEDAELIAMgASABIANUIAUgBlYgBSAGURsiDBshBSAEIAIgDBsiCEL///////8/gyEGIAIgBCAMGyIHQjCIp0H//wFxIQsgCEIwiKdB//8BcSIJRQRAIApB4ABqIAUgBiAFIAYgBlAiCRt5IAlBBnStfKciCUEPaxCNASAKKQNoIQYgCikDYCEFQRAgCWshCQsgASADIAwbIQMgB0L///////8/gyEEIAtFBEAgCkHQAGogAyAEIAMgBCAEUCILG3kgC0EGdK18pyILQQ9rEI0BQRAgC2shCyAKKQNYIQQgCikDUCEDCyAEQgOGIANCPYiEQoCAgICAgIAEhCECIAZCA4YgBUI9iIQhBCADQgOGIQEgByAIhSEDAkAgCSALRg0AIAkgC2siC0H/AEsEQEIAIQJCASEBDAELIApBQGsgASACQYABIAtrEI0BIApBMGogASACIAsQhQIgCikDMCAKKQNAIAopA0iEQgBSrYQhASAKKQM4IQILIARCgICAgICAgASEIQcgBUIDhiEGAkAgA0IAUwRAQgAhA0IAIQQgASAGhSACIAeFhFANAiAGIAF9IQUgByACfSABIAZWrX0iBEL/////////A1YNASAKQSBqIAUgBCAFIAQgBFAiCxt5IAtBBnStfKdBDGsiCxCNASAJIAtrIQkgCikDKCEEIAopAyAhBQwBCyABIAZ8IgUgAVStIAIgB3x8IgRCgICAgICAgAiDUA0AIAVCAYMgBEI/hiAFQgGIhIQhBSAJQQFqIQkgBEIBiCEECyAIQoCAgICAgICAgH+DIQEgCUH//wFOBEAgAUKAgICAgIDA//8AhCEEQgAhAwwBC0EAIQsCQCAJQQBKBEAgCSELDAELIApBEGogBSAEIAlB/wBqEI0BIAogBSAEQQEgCWsQhQIgCikDACAKKQMQIAopAxiEQgBSrYQhBSAKKQMIIQQLIARCPYYgBUIDiIQiAiAFp0EHcSIJQQRLrXwiAyACVK0gBEIDiEL///////8/gyALrUIwhoQgAYR8IQQCQCAJQQRGBEAgBCADQgGDIgEgA3wiAyABVK18IQQMAQsgCUUNAQsLIAAgAzcDACAAIAQ3AwggCkHwAGokAAt/AQN/IAAhAQJAIABBA3EEQANAIAEtAABFDQIgAUEBaiIBQQNxDQALCwNAIAEiAkEEaiEBIAIoAgAiA0F/cyADQYGChAhrcUGAgYKEeHFFDQALIANB/wFxRQRAIAIgAGsPCwNAIAItAAEhAyACQQFqIgEhAiADDQALCyABIABrCwQAQQALEQAgACAAKAIAQQhqNgIAIAALDQAgACADlCABIAKUkwsNACAAKAIAIAFBJGxqCxAAIAAoAgQgACgCAGtBBXULfwICfwF+IwBBEGsiAyQAIAACfiABRQRAQgAMAQsgAyABIAFBH3UiAnMgAmsiAq1CACACZyICQdEAahCNASADKQMIQoCAgICAgMAAhUGegAEgAmutQjCGfCABQYCAgIB4ca1CIIaEIQQgAykDAAs3AwAgACAENwMIIANBEGokAAtBAQJ/AkAgAkUNAANAIAEgA0EDdGooAgAiBEUNASAAIARGBEAgASADQQN0aigCBA8LIANBAWoiAyACRw0ACwtBAAsxAQJ9IAEqAgAgACoCACIDkyACKgIEIAAqAgQiBJOUIAIqAgAgA5MgASoCBCAEk5STCw8AIAAoAgggACgCADYCAAtdAQN/QQgQCiIBELcGIAFB/OMDNgIAIAAQogEiAkENahBNIgNBADYCCCADIAI2AgQgAyACNgIAIAEgAxA+IAAgAkEBahBANgIEIAFBrOQDNgIAIAFBzOQDQQwQCQALRQEBfyMAQRBrIgUkACAFIAI2AgwgBSAENgIIIAUgBUEMahDKASECIAAgASADIAUoAggQiAIhACACEMkBIAVBEGokACAACycBAX8jAEEQayIBJAAgAUEIaiAAED8QggEoAgAhACABQRBqJAAgAAttAQJ/IAAoAkwaIAAQygIaIAAgACgCDBEAABogAC0AAEEBcUUEQCAAKAI0IgEEQCABIAAoAjg2AjgLIAAoAjgiAgRAIAIgATYCNAsgAEHAjwQoAgBGBEBBwI8EIAI2AgALIAAoAmAQNCAAEDQLC9wBAQF9IAAqAgAhAiAAIAEqAgA4AgAgASACOAIAIAAqAgQhAiAAIAEqAgQ4AgQgASACOAIEIAAqAgghAiAAIAEqAgg4AgggASACOAIIIAAqAgwhAiAAIAEqAgw4AgwgASACOAIMIAAqAhAhAiAAIAEqAhA4AhAgASACOAIQIAAqAhQhAiAAIAEqAhQ4AhQgASACOAIUIAAqAhghAiAAIAEqAhg4AhggASACOAIYIAAqAhwhAiAAIAEqAhw4AhwgASACOAIcIAAqAiAhAiAAIAEqAiA4AiAgASACOAIgCw0AIAAoAgAgASgCAEYLoQIBA38jAEFAaiIDJAAgACgCACIFQQRrKAIAIQQgBUEIaygCACEFIANBADYCFCADIAE2AhAgAyAANgIMIAMgAjYCCEEAIQEgA0EYakEAQScQOhogACAFaiEAAkAgBCACQQAQfwRAIANBATYCOCAEIANBCGogACAAQQFBACAEKAIAKAIUEQsAIABBACADKAIgQQFGGyEBDAELIAQgA0EIaiAAQQFBACAEKAIAKAIYEQYAAkACQCADKAIsDgIAAQILIAMoAhxBACADKAIoQQFGG0EAIAMoAiRBAUYbQQAgAygCMEEBRhshAQwBCyADKAIgQQFHBEAgAygCMA0BIAMoAiRBAUcNASADKAIoQQFHDQELIAMoAhghAQsgA0FAayQAIAELEAAgACABQYCAgIB4cjYCCAsTACAAIAEgAiAAKAIAKAIMEQQACycBAX8gAkEATgR/IAAoAgggAkH/AXFBAXRqLwEAIAFxQQBHBUEACwsQACACBEAgACABIAIQQBoLCxAAIAAoAgQgACgCAGtBBHULFAEBfyAAKAIAIQEgAEEANgIAIAELCwAgACABQQMQ6wYLEwAgACABEI0DIABBBGogAhCQAQsSACAAEDUoAgAgACgCAGtBDG0LBwAgABBFGgsHACAAIAFGCw8AIAAgACgCACgCDBEAAAsHACAAEDhFCxEAIAAgASABKAIAKAIcEQIACxEAIAAgASABKAIAKAIYEQIACwgAIABB/wFxC0EBAX8gACABNwNwIAAgACgCLCAAKAIEIgJrrDcDeCAAIAFQIAAoAggiACACa6wgAVdyBH8gAAUgAiABp2oLNgJoCwoAIABBMGtBCkkLSwECfCAAIACiIgEgAKIiAiABIAGioiABRKdGO4yHzcY+okR058ri+QAqv6CiIAIgAUSy+26JEBGBP6JEd6zLVFVVxb+goiAAoKC2C08BAXwgACAAoiIAIAAgAKIiAaIgAERpUO7gQpP5PqJEJx4P6IfAVr+goiABREI6BeFTVaU/oiAARIFeDP3//9+/okQAAAAAAADwP6CgoLYLGQAgACABQZLXAUGj7wNB+OQDQfTkAxCsBAsVACAAIAEQuwYgAEEEaiABQQRqEEgLEgAgACgCACIABEAgABDHBBoLCxEAIAAgASgCABDHBDYCACAAC0IBAX8gACgCACECIAEQYyEAIAJBCGoiARBEIABLBH8gASAAEDwoAgBBAEcFQQALRQRAEFYACyACQQhqIAAQPCgCAAs2ACACBH8gAgRAA0AgACABKAIANgIAIABBBGohACABQQRqIQEgAkEBayICDQALC0EABSAACxoL+gECA34CfyMAQRBrIgUkAAJ+IAG9IgNC////////////AIMiAkKAgICAgICACH1C/////////+//AFgEQCACQjyGIQQgAkIEiEKAgICAgICAgDx8DAELIAJCgICAgICAgPj/AFoEQCADQjyGIQQgA0IEiEKAgICAgIDA//8AhAwBCyACUARAQgAMAQsgBSACQgAgA6dnQSBqIAJCIIinZyACQoCAgIAQVBsiBkExahCNASAFKQMAIQQgBSkDCEKAgICAgIDAAIVBjPgAIAZrrUIwhoQLIQIgACAENwMAIAAgAiADQoCAgICAgICAgH+DhDcDCCAFQRBqJAALQgEBfyABIAJsIQQgBAJ/IAMoAkxBAEgEQCAAIAQgAxDdAwwBCyAAIAQgAxDdAwsiAEYEQCACQQAgARsPCyAAIAFuC3cAIAAgASoCACAClDgCACAAIAEqAgQgApQ4AgQgACABKgIIIAKUOAIIIAAgASoCDCAClDgCDCAAIAEqAhAgApQ4AhAgACABKgIUIAKUOAIUIAAgASoCGCAClDgCGCAAIAEqAhwgApQ4AhwgACABKgIgIAKUOAIgCwkAIAEgAhCxAQs9AQF/IAAoAgQiAARAIAAQ2QIEQAJAIABBCGoiASgCAARAIAEQ+wNBf0cNAQsgACAAKAIAKAIQEQEACwsLCxEAIAAgACgCAEEIazYCACAACxIAIAAQNSgCACAAKAIAa0ECdQsSACAAEDUoAgAgACgCAGtBA3ULWAECfyMAQRBrIgIk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IAAgASoCCCABKgIAIAIqAgAiA5QgAioCBCIEIAEqAgSUkpIgASoCICABKgIYIAOUIAEqAhwgBJSSkiIDlTgCACAAIAEqAhQgASoCDCACKgIAlCABKgIQIAIqAgSUkpIgA5U4AgQLEgAgACACNgIEIAAgATYCACAACwwAIAEgAigCADYCAAsOACAAIAEgAkECdBBAGgsSACAAEDUoAgAgACgCAGtBJG0LNwEBfyMAQRBrIgIkACACIAAoAgA2AgggAiACKAIIIAFBA3RqNgIIIAIoAgghACACQRBqJAAgAAuCAQEBfwJAIAEgACgCEEkEQCAAKAIUIgMgAk0NASAAQQRqIAEgA2wgAmoQTA8LQcCnBEHtqAEQM0GZqQEQM0HpGRAzQdoBEDZBox4QM0GIqgEQMxA3EAAAC0HApwRBy6oBEDNBmakBEDNB6RkQM0HbARA2QaMeEDNB/qoBEDMQNxAAAAsNACAAKAIAIAEoAgBJCyQBAn8jAEEQayICJAAgASAAEPgBIQMgAkEQaiQAIAEgACADGwsrAQF/IAAoAgQhAwNAIAEgA0cEQCAAEDUaIAMgAmshAwwBCwsgACABNgIECwMAAQsPACAAIAAoAgAoAiQRAAALEQAgACABIAEoAgAoAiARAgALEQAgACABIAEoAgAoAiwRAgALDAAgAEGChoAgNgAACy8BAX8jAEEQayIBJAAgAUEIaiAAED8gABA4QQJ0ahCCASgCACEAIAFBEGokACAACywBAX8jAEEQayIBJAAgAUEIaiAAED8gABA4ahCCASgCACEAIAFBEGokACAACxYAIAAgASACIAMgACgCACgCIBEIABoLKQAgAEEIdEGAgPwHcSAAQRh0ciAAQQh2QYD+A3EgAEEYdnJyIAAgARsLNAAgACgCABogACgCACAAELsBQQxsahogACgCACAAEFdBDGxqGiAAKAIAIAAQuwFBDGxqGgtQAQF+AkAgA0HAAHEEQCACIANBQGqtiCEBQgAhAgwBCyADRQ0AIAJBwAAgA2uthiABIAOtIgSIhCEBIAIgBIghAgsgACABNwMAIAAgAjcDCAvbAQIBfwJ+QQEhBAJAIABCAFIgAUL///////////8AgyIFQoCAgICAgMD//wBWIAVCgICAgICAwP//AFEbDQAgAkIAUiADQv///////////wCDIgZCgICA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dSIHEMICIAdHDQELIAYgAyABa0ECdWsiAUEASgRAIAAgCCABQQAgAUEAShsiASAFELMHIgUQPyABEMICIQYgBRA5GiABIAZHDQELIAMgAmsiAUEASgRAIAAgAiABQQJ1IgEQwgIgAUcNAQsgBBC4ByAAIQkLIAhBEGokACAJCywAAkAgACABRg0AA0AgACABQQFrIgFPDQEgACABEKkHIABBAWohAAwACwALCwsAIABBrK8EEMsBCyQAIABBC08EfyAAQRBqQXBxIgAgAEEBayIAIABBC0YbBUEKCwsPACAAIAAoAgAoAhwRAAALJAECfyMAQRBrIgIkACABIAAQ5gQhAyACQRBqJAAgASAAIAMbC7YMAQZ/IwBBEGsiBCQAIAQgADYCDAJAIABB0wFNBEBBgIMDQcCEAyAEQQxqEPUEKAIAIQIMAQsgAEF8TwRAEFYACyAEIAAgAEHSAW4iBkHSAWwiAms2AghBwIQDQYCGAyAEQQhqEPUEQcCEA2tBAnUhBQNAIAVBAnRBwIQDaigCACACaiECQQUhAAJAA0ACQCAAQS9GBEBB0wEhAANAIAIgAG4iASAASQ0EIAIgACABbEYNAiACIABBCmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBDGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBEGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBEmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBFmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBHGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBHmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBJGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBKGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBKmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBLmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBNGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBOmoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBPGoiAW4iAyABSQ0EIAIgASADbEYNAiACIABBwgBqIgFuIgMgAUkNBCACIAEgA2xGDQIgAiAAQcYAaiIBbiIDIAFJDQQgAiABIANsRg0CIAIgAEHIAGoiAW4i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AgAiACgCCCAAKAIAQaLa79cGaiICEIMCIQMgACgCDCACEIMCIQQgACgCECACEIMCIQECQCADIAVBAnZPDQAgASAEckEDcSAEIAUgA0ECdGsiBk8gASAGT3JyDQAgAUECdiEKIARBAnYhC0EAIQQDQCAAIAQgA0EBdiIGaiIMQQF0Ig0gC2pBAnRqIgEoAgAgAhCDAiEJIAUgASgCBCACEIMCIgFNIAkgBSABa09yDQEgACABIAlqai0AAA0BIAcgACABahCjAiIBRQRAIAAgCiANakECdGoiBCgCACACEIMCIQMgBSAEKAIEIAIQgwIiAk0gAyAFIAJrT3INAkEAIAAgAmogACACIANqai0AABshCAwCCyADQQFGDQEgBiADIAZrIAFBAEgiARshAyAEIAwgARshBAwACwALIAgFQQALIgAgByAAGwvLAQECfyMAQRBrIgEkAAJAIAC9QiCIp0H/////B3EiAkH7w6T/A00EQCACQYCAwPIDSQ0BIABEAAAAAAAAAABBABDMAiEADAELIAJBgIDA/wdPBEAgACAAoSEADAELAkACQAJAAkAgACABEJ4FQQNxDgMAAQIDCyABKwMAIAErAwhBARDMAiEADAMLIAErAwAgASsDCBDNAiEADAILIAErAwAgASsDCEEBEMwCmiEADAELIAErAwAgASsDCBDNApohAAsgAUEQaiQAIAALSAECfwJ/IAFBH00EQCAAKAIAIQIgAEEEagwBCyABQSBrIQEgAAsoAgAhAyAAIAIgAXQ2AgAgACADIAF0IAJBICABa3ZyNgIEC7ICAQV/IwBB8AFrIgckACAHIAMoAgAiCDYC6AEgAygCBCEDIAcgADYCACAHIAM2AuwBQQEhCQJAAkACQCAIQQFHIANyRQRAIAAhAwwBC0EAIAFrIQsgACEIA0AgCCAGIARBAnRqIgooAgBrIgMgACACEQMAQQBMBEAgCCEDDAILAkAgBSAEQQJIckUEQCAKQQhrKAIAIQUgCCALaiIKIAMgAhEDAEEATg0BIAogBWsgAyACEQMAQQBODQELIAcgCUECdGogAzYCACAHQegBaiIFIAUQkgUiBRCGAyAJQQFqIQkgBCAFaiEEQQAhBSADIQggBygC6AFBAUcNASAHKALsAQ0BDAMLCyAIIQMMAQsgBQ0BCyABIAcgCRCRBSADIAEgAiAEIAYQ2wMLIAdB8AFqJAALSAECfwJ/IAFBH00EQCAAKAIEIQIgAAwBCyABQSBrIQEgAEEEagsoAgAhAyAAIAIgAXY2AgQgACACQSAgAWt0IAMgAXZyNgIAC+QBAQl/IAAgAEE9EI0FIgFGBEBBAA8LAkAgACABIABrIgVqLQAADQBB1I4EKAIAIgNFDQAgAygCACICRQ0AA0ACQAJ/IAAhAUEAIQZBACAFIgdFDQAaAkAgAS0AACIERQ0AA0ACQCACLQAAIghFDQAgB0EBayIHRSAEIAhHcg0AIAJBAWohAiABLQABIQQgAUEBaiEBIAQNAQwCCwsgBCEGCyAGQf8BcSACLQAAawtFBEAgAygCACAFaiIBLQAAQT1GDQELIAMoAgQhAiADQQRqIQMgAg0BDAILCyABQQFqIQkLIAkLgwEBAX8CQCACQQFHDQAgACgCCCIDRQ0AIAEgAyAAKAIEa6x9IQELAkAgACgCFCAAKAIcRwRAIABBAEEAIAAoAiQRBAAaIAAoAhRFDQELIABBADYCHCAAQgA3AxAgACABIAIgACgCKBETAEIAUw0AIABCADcCBCAAIAAoAgBBb3E2AgALC0EBAn8jAEEQayIBJABBfyECAkAgABCKAw0AIAAgAUEPakEBIAAoAiARBABBAUcNACABLQAPIQILIAFBEGokACACC3wBAn8gACAAKAJIIgFBAWsgAXI2AkggACgCFCAAKAIcRwRAIABBAEEAIAAoAiQRBAAaCyAAQQA2AhwgAEIANwMQIAAoAgAiAUEEcQRAIAAgAUEgcjYCAEF/DwsgACAAKAIsIAAoAjBqIgI2AgggACACNgIEIAFBG3RBH3UL0wEBAX8CQCAEQQBMDQAgBEEBayEGIAAgAUECdGohACACIANBAnRqIQEgBEEDcSIDBEBBACECA0AgASgCACAAKAIAIAUQQBogBEEBayEEIAFBBGohASAAQQRqIQAgAkEBaiICIANHDQALCyAGQQNJDQADQCABKAIAIAAoAgAgBRBAGiABKAIEIAAoAgQgBRBAGiABKAIIIAAoAgggBRBAGiABKAIMIAAoAgwgBRBAGiABQRBqIQEgAEEQaiEAIARBBWshAiAEQQRrIQQgAkF+SQ0ACwsLEgAgACABakEBayIAIAAgAW9rCwkAIABBADYCAAv1BgEMfyMAQaAKayIHJAAgAkEETwRAIAAoAgAiBSACNgIYIAVBNDYCFCAAIAAoAgAoAgARAQALIABBtAFBxAEgARtqIAJBAnRqKAIAIghFBEAgACgCACIFIAI2AhggBUE0NgIUIAAgACgCACgCABEBAAsgAygCACIJRQRAIAMgAEEBQZALIAAoAgQoAgARBAAiCTYCAAsgCSAINgKMAUEAIQVBASECA0AgBSACIAhqLQAAIgRqIgNBgQJOBEAgACgCACIGQQk2AhQgACAGKAIAEQEACyAEBEAgB0GQCGogBWogAiAEEDoaIAMhBQsgAkEBaiICQRFHDQALQQAhAyAHQZAIaiAFakEAOgAAIActAJAIIgYEQCAGQRh0QRh1IQRBACECA0AgBkEYdEEYdSAERgRAA0AgByADQQJ0aiACNgIAIAJBAWohAiAEIANBAWoiAyAHQZAIamosAAAiBkYNAAsLQQEgBHQgAkwEQCAAKAIAIgpBCTYCFCAAIAooAgARAQALIARBAWohBCACQQF0IQIgBkH/AXENAAsLQQAhA0EBIQIDQCAJIAJBAnRqIAIgCGoiBC0AAAR/IAkgAkECdGogAyAHIANBAnRqKAIAazYCSCADIAQtAABqIgNBAnQgB2pBBGsoAgAFQX8LNgIAIAJBAWoiAkERRw0ACyAJQf//PzYCREEAIQogCUGQAWpBAEGACBA6GkEBIQYDQCAGIAhqIgwtAAAEQEEBIQtBAUEIIAZrIg10IQQDQCAIIApqIQ4gByAKQQJ0aigCACANdCECIAQhAwNAIAkgAkECdGogBjYCkAEgAiAJakGQCWogDi0AEToAACACQQFqIQIgA0EBSiEPIANBAWshAyAPDQALIApBAWohCiALIAwtAABJIQIgC0EBaiELIAINAAsLIAZBAWoiBkEJRw0ACwJAIAFFIAVBAExyDQBBACECIAVBAUcEQCAFQX5xIQFBACEDA0AgAiAIai0AEUEQTwRAIAAoAgAiBEEJNgIUIAAgBCgCABEBAAsgCCACQQFyai0AEUEQTwRAIAAoAgAiBEEJNgIUIAAgBCgCABEBAAsgAkECaiECIANBAmoiAyABRw0ACwsgBUEBcUUNACACIAhqLQARQRBJDQAgACgCACIBQQk2AhQgACABKAIAEQEACyAHQaAKaiQACycBAn8gASgCACECIwBBEGsiAyQAIAAgAUEEaiACEPsGIANBEGokAAsJACABIAIQ3QILFgAgASACKQIANwIAIAEgAikCCDcCCAtLAQF/IwBBEGsiAyQAIAMgAjYCDEGopAIgAUHw4ANB0J4CQd0AIANBDGoQ7gFB8OADQaCeAkHeACADQQxqEO4BEDAgA0EQaiQAIAALGQAgACABQY3XAUHx7QNB+OQDQfTkAxCsBAsKACAAQRhqENEBCyAAIAAqAgAgASoCBJQgASoCACAAKgIElJOLQwAAAD+UC7IBAQF9IAAgASoCAIw4AgAgASoCBCEDIABBgICA/Hs2AgggACADjDgCBCAAQQxqEOkFIAAgAioCACABKgIAlDgCGCAAIAIqAgAgASoCBJQ4AhwgACACKgIAOAIgIABBJGoQ6QUgACABKgIAjDgCMCABKgIEIQMgAEGAgID8ezYCOCAAIAOMOAI0IAAgAioCBCABKgIAlDgCPCAAIAIqAgQgASoCBJQ4AkAgACACKgIEOAJECyIAIAAgASACEKoBQwAAAABeIAMgBCAFEKoBQwAAAABec0ULDAAgACABIAAgAV0bC0EBAn8jAEEgayICJAAgABDUASABSQRAIAAQNSEDIAAgAkEIaiABIAAQQyADEJ0DIgAQogMgABChAwsgAkEgaiQACw8AIAAgACgCBEEBajYCBAsJACAAIAEQggYLCQAgACABOgBkC2kBAn8jAEEQayIEJAAgBEEANgIMIABBDGogBEEMaiADELoBIAEEQCAAKAIQIAEQmQYhBQsgACAFNgIAIAAgBSACQQN0aiICNgIIIAAgAjYCBCAAED4gBSABQQN0ajYCACAEQRBqJAAgAAsMACAAIAEgACABSBsLEAAgACgCACABKAIAa0EDdQssACAAKAIAGiAAKAIAIAAQ1AFBA3RqGiAAKAIAIAAQ1AFBA3RqGiAAKAIAGgtNAQF/IAAoAgQhAQNAIAEgACgCCEcEQCAAKAIQGiAAIAAoAghBCGs2AggMAQsLIAAoAgAEQCAAKAIQGiAAKAIAIQEgABC+BhogARA0CwtQAQF/IAAQ5AIgABA1IAAoAgAgACgCBCABQQRqIgIQmAIgACACEEggAEEEaiABQQhqEEggABA1IAEQPhBIIAEgASgCBDYCACAAIAAQQxCgAwtaAQJ/IwBBEGsiAiQAIAIgATYCDCABIAAQkAQiA00EQCAAENQBIgAgA0EBdkkEQCACIABBAXQ2AgggAkEIaiACQQxqEHsoAgAhAwsgAkEQaiQAIAMPCxCcAQALjgYCCX8CfCAAKAIAIQUgACgCBCEDQQAhACMAQdAPayIGJAACQCADQfQDSg0AAkACQAJAIAMOAgMAAQsgBUQAAAAAAADwPyAFKwMAozkDAAwBCyADQQAgA0EAShshCQNAIAAgCUYEQANAIAQgCUYEQEEAIQQDQCAJIAQiAUYNBQNAAkAgASADRgRAIAMhAQwBCyAGIAFBAnRqKAIAIARGDQAgAUEBaiEBDAELCyAGIAFBAnRqIAYgBEECdGooAgA2AgAgBSAEQQN0aiEAIAUgAUEDdGohAUEAIQIDQCACIAlHBEAgASsDACEKIAEgACsDADkDACAAIAo5AwAgAkEBaiECIAAgA0EDdCIIaiEAIAEgCGohAQwBCwsgBEEBaiEEDAALAAtEAAAAAAAAAAAhCkF/IQIgBSAEIgAgA2xBA3RqIgghAQNAIAAgA0cEQCABKwMAmSILIAogCiALYyIHGyEKIAAgAiAHGyECIABBAWohACABIANBA3RqIQEMAQsLQQAhACACQX9GIApEu73X2d982z1lcg0EIAYgAkECdGoiACgCACEBIAAgBiAEQQJ0aiIAKAIANgIAIAAgATYCACAFIAIgA2xBA3RqIQBBACECIAghAQNAIAIgA0cEQCAAKwMAIQogACABKwMAOQMAIAEgCjkDACACQQFqIQIgAUEIaiEBIABBCGohAAwBCwsgCCsDACEKQQEhASAIIQADQCABIANHBEAgACAAKwMIIAqjOQMAIAFBAWohASAAQQhqIQAMAQsLIABEAAAAAAAA8D8gCqM5AwBBACEHA0AgAyAHRwRAIAQgB0cEQCAFIAMgB2xBA3RqIgArAwCaIQpBASEBIAghAgNAIAEgA0cEQCAAIAogAisDAKIgACsDCKA5AwAgAkEIaiECIAFBAWohASAAQQhqIQAMAQsLIAAgAisDACAKojkDAAsgB0EBaiEHDAELCyAEQQFqIQQMAAsABSAGIABBAnRqIAA2AgAgAEEBaiEADAELAAsACyAFIQALIAZB0A9qJABBAEF/IAAbCwcAIAAQThoLKwEBfyAAIAEoAgA2AgAgASgCACEDIAAgATYCCCAAIAMgAkECdGo2AgQgAAsrACAAKAIAGiAAKAIAIAAQ0wFBAnRqGiAAKAIAGiAAKAIAIAAQREECdGoaC1IBA38jAEEQayIDJAAgAyAAIAEQtwIiAigCBCEBIAIoAgghBANAIAEgBEYEQCACEG8gA0EQaiQABSAAEDUgARDMBiACIAFBBGoiATYCBAwBCwsLCwAgACABQQgQ+gELPgECfyMAQRBrIgMkACADIABBARC/BiECIAAQNSACKAIEIAEQ4AIgAiACKAIEQQhqNgIEIAIQbyADQRBqJAALKAAgACABEEggAEEEaiABQQRqEEggABA1IAEQNRBIIAAQNRogARA1GguCAQACQCACQwAAAABgBEAgACgCFLIgAl5FDQEgACoCGCACEN0GQQEgAXSylA8LQcCnBEH1rQEQM0GZqQEQM0HpGRAzQegBEDZBox4QM0H1rgEQMxA3EAAAC0HApwRBy6oBEDNBmakBEDNB6RkQM0HpARA2QaMeEDNBjK8BEDMQNxAAAAtaAQJ/IwBBEGsiAiQAIAIgATYCDCABIAAQ5wYiA00EQCAAENsBIgAgA0EBdkkEQCACIABBAXQ2AgggAkEIaiACQQxqEHsoAgAhAwsgAkEQaiQAIAMPCxCcAQALDAAgASACLQAAOgAACyEAIAAgATYCACAAIAEoAgQiATYCBCAAIAEgAmo2AgggAAsSACAAED4oAgAgACgCAGtBDG0LLAAgACgCABogACgCACAAELsBQQxsahogACgCACAAELsBQQxsahogACgCABoLnQECBH8DfQNAIARBA0cEQCAAIARBBXRqIgYrAxC2IQcgBisDCLYhCCAGKwMAtiEJQQAhAwNAIANBBEcEQCADQQJ0IgUgAiAEQQR0amogByABIAVqIgUqAiCUIAkgBSoCAJQgBSoCECAIlJKSOAIAIANBAWohAwwBCwsgAiAEQQR0aiIDIAMqAgwgBisDGLaSOAIMIARBAWohBAwBCwsLVQEBfyAAKAIEIQIDQCACIAAoAghHBEAgACgCEBogACAAKAIIIAFrNgIIDAELCyAAKAIABEAgACgCEBogACgCACECIAAQPigCACAAKAIAaxogAhA0CwtJAQJ/IAAoAgQiBkEIdSEFIAZBAXEEQCACKAIAIAUQsQQhBQsgACgCACIAIAEgAiAFaiADQQIgBkECcRsgBCAAKAIAKAIYEQYAC/MBAQR/IwBBEGsiCCQAIAIgAUF/c0ERa00EQCAAED8hCQJ/IAFB5////wdJBEAgCCABQQF0NgIIIAggASACajYCDCAIQQxqIAhBCGoQeygCABCdAgwBC0FuC0EBaiIKEE0hAiAEBEAgAiAJIAQQtgELIAYEQCACIARqIAcgBhC2AQsgAyAEIAVqIgtrIQcgAyALRwRAIAIgBGogBmogBCAJaiAFaiAHELYBCyABQQpHBEAgCRA0CyAAIAIQkAEgACAKELMBIAAgBCAGaiAHaiIAEIsBIAhBADoAByAAIAJqIAhBB2oQhwEgCEEQaiQADwsQVgALnmoDDX8EfQl8IwBB4AFrIgwkACAMQoCAgICAgOCtwAA3A9gBIAxCgICAgICA4K3AADcDyAEgDEKAgICAgIDArMAANwO4ASAMQoCAgICAgMCswAA3A9ABIAxCgICAgICA4K3AADcDwAEgDEKAgICAgIDgrcAANwOwASAMQoCAgICAgMCswAA3A6gBIAxCgICAgICAwKzAADcDoAEDQCANQQRHBEAgDUEEdCIOIAxB4ABqaiIRIAkgDmoiDisDADkDACARIA4rAwg5AwggDUEBaiENDAELCyAMQaABaiEVIAxB4ABqIRYgDEEQaiESQQAhDUEIQQgQuQEhE0EIQQEQuQEhD0EIQQEQuQEhECAPKAIAIRcgEygCACEYA0AgDUEERwRAIBggDUEHdGoiCSAVIA1BBHQiFGoiDisDADkDACAOKwMIIR0gCUIANwMoIAlCADcDICAJQgA3AxggCUKAgICAgICA+D83AxAgCSAdOQMIIAkgFCAWaiIRKwMAIA4rAwCaojkDMCARKwMAIR0gDisDCCEeIAlCADcDUCAJQgA3A0ggCUFAa0IANwMAIAkgHSAemqI5AzggCSAOKwMAOQNYIA4rAwghHSAJQoCAgICAgID4PzcDaCAJIB05A2AgCSARKwMIIA4rAwCaojkDcCAJIBErAwggDisDCJqiOQN4IBQgF2oiCSARKwMAOQMAIAkgESsDCDkDCCANQQFqIQ0MAQsLIBMQpAMaIBAgEyAPEJQEGiAQKAIAIQ5BACEJA0AgCUECRwRAIBIgCUEYbCIRaiINIA4gEWoiESsDADkDACANIBErAwg5AwggDSARKwMQOQMQIAlBAWohCQwBCwsgEiAOKwMwOQMwIA4rAzghHSASQUBrQoCAgICAgID4PzcDACASIB05AzggExBGIA8QRiAQEEYCfyAMKwNwIh0gDCsDgAEiHqEiHyAfoiAMKwN4Ih8gDCsDiAEiIKEiISAhoqAiIZlEAAAAAAAA4EFjBEAgIaoMAQtBgICAgHgLIQkCfwJ/IAwrA5ABIiEgDCsDYCIioSIkICSiIAwrA5gBIiQgDCsDaCIloSIjICOioCIjmUQAAAAAAADgQWMEQCAjqgwBC0GAgICAeAsiDiAJIAkgDkgbtyAKoiAKoiIjmUQAAAAAAADgQWMEQCAjqgwBC0GAgICAeAshEQJ/ICIgHaEiHSAdoiAlIB+hIh0gHaKgIh2ZRAAAAAAAAOBBYwRAIB2qDAELQYCAgIB4CyEJAn8CfyAeICGhIh0gHaIgICAkoSIdIB2ioCIdmUQAAAAAAADgQWMEQCAdqgwBC0GAgICAeAsiDiAJIAkgDkgbtyAKoiAKoiIdmUQAAAAAAADgQWMEQCAdqgwBC0GAgICAeAshDgJAIABFBEAgAiEJA0AgAyAJIg1KBEAgDUEBdCEJIA0gDWwgDkgNAQsLIAIhDgNAIA4iCSADTg0CIAlBAXQhDiAJIAlsIBFIDQALDAELIAIhCQNAIA4gCSAJIg1sQQJ0SgRAIA1BAXQhCSADIA1KDQELCyACIQ4DQCAOIgkgCWxBAnQgEU4NASAJQQF0IQ4gAyAJSg0ACwsgCkQAAAAAAAAkQKIhHUQAAAAAAADwPyAKoUQAAAAAAADgP6JEAAAAAAAAJECiIQogCSADIAMgCUobIgkgAm0hESANIAMgAyANShsiAyACbSESIAIgAmwhEwJAAkACQAJAIAFFBEAgE0EDbCITQQQQ/gIiDkUNBAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAcODwABAgMEBQYHCAkKCwUFBQ4LIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNDCAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENESAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBA2xqIgMtAAJqNgIAIAcgBygCBCADLQABajYCBCAHIAcoAgggAy0AAGo2AggLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0LIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0QIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIJQQBIIAUgCUxyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakEMbGoiByAHKAIAIAQgAyAFbCAJakEDbGoiAy0AAGo2AgAgByAHKAIEIAMtAAFqNgIEIAcgBygCCCADLQACajYCCAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQogHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQ8gDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQJ0aiIDLQACajYCACAHIAcoAgQgAy0AAWo2AgQgByAHKAIIIAMtAABqNgIICyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNCSAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENDiAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAnRqIgMtAABqNgIAIAcgBygCBCADLQABajYCBCAHIAcoAgggAy0AAmo2AggLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0IIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0NIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIJQQBIIAUgCUxyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakEMbGoiByAHKAIAIAQgAyAFbCAJakECdGoiAy0AAWo2AgAgByAHKAIEIAMtAAJqNgIEIAcgBygCCCADLQADajYCCAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQcgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQwgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAQgAyAFbCAJamotAAAiAyAHKAIAajYCACAHIAMgBygCBGo2AgQgByADIAcoAghqNgIICyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNBiAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENCyAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiCUEASCAFIAlMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBDGxqIgcgBygCACAEIAMgBWwgCWpBAnRqIgMtAANqNgIAIAcgBygCBCADLQACajYCBCAHIAcoAgggAy0AAWo2AggLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0FIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0KIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAAn8gBCADIAVsIgMgB2pBAXRqLQABQRBrskN/CpVDlCIZIAQgB0H+/wNxIANqQQF0aiIDLQAAQYABa7IiGkNOGgFElJIiG4tDAAAAT10EQCAbqAwBC0GAgICAeAshByADLQACIQkgDiABIBFtIAJsIA0gEm1qQQxsaiIDIAMoAgAgB0EIdSIHQQAgB0EAShsiB0H/ASAHQf8BSRtqNgIAIAMgAygCCAJ/IBkgCUGAAWuyIhtDoErMQ5SSIhyLQwAAAE9dBEAgHKgMAQtBgICAgHgLQQh1IgdBACAHQQBKGyIHQf8BIAdB/wFJG2o2AgggAyADKAIEAn8gG0O4HlDDlCAZIBpD/pTIwpSSkiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0EIdSIDQQAgA0EAShsiA0H/ASADQf8BSRtqNgIECyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNBCAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENCSAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQAJ/IAQgAyAFbCIDIAdqQQF0ai0AAEEQa7JDfwqVQ5QiGSAHQf7/A3EgA2pBAXQgBGoiAy0AAUGAAWuyIhpDThoBRJSSIhuLQwAAAE9dBEAgG6gMAQtBgICAgHgLIQcgAy0AAyEJIA4gASARbSACbCANIBJtakEMbGoiAyADKAIAIAdBCHUiB0EAIAdBAEobIgdB/wEgB0H/AUkbajYCACADIAMoAggCfyAZIAlBgAFrsiIbQ6BKzEOUkiIci0MAAABPXQRAIByoDAELQYCAgIB4C0EIdSIHQQAgB0EAShsiB0H/ASAHQf8BSRtqNgIIIAMgAygCBAJ/IBtDuB5Qw5QgGSAaQ/6UyMKUkpIiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBCHUiA0EAIANBAEobIgNB/wEgA0H/AUkbajYCBAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQMgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQggDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQF0aiIDLQABIglBA3RBBHJB/AFxajYCACAHIAcoAgggAy0AACIDQQRyQfwBcWo2AgggByAHKAIEIANBBXQgCUEDdnJBAnJB/gFxajYCBAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQIgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQcgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQF0aiIDLQABIglBAnRBBHJB/AFxajYCACAHIAcoAgggAy0AACIDQQRyQfwBcWo2AgggByAHKAIEIANBBXQgCUEDdnJBBHJB/AFxajYCBAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQEgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQYgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIglBAEggBSAJTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQxsaiIHIAcoAgAgBCADIAVsIAlqQQF0aiIDLQABQfABcWpBCGo2AgAgByAHKAIIIAMtAAAiA0EIckH4AXFqNgIIIAcgBygCBCADQQR0QQhyQfgBcWo2AgQLIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgESASbCEAQQAhCUEAIQ0DQCANIBNGDQQgCyANaiAOIA1BAnRqKAIAIABuOgAAIA1BAWohDQwACwALIBNBBBD+AiIORQ0DAkAgB0EBTQRAIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNAiAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENBiAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pBA2xqIgMtAAEgAy0AAGogAy0AAmpBA25qNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAdBfnFBAkYEQCAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQIgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQYgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQJ0aiIDLQABIAMtAABqIAMtAAJqQQNuajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAHQX1xQQRGBEAgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0CIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0GIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHakECdGoiAy0AAiADLQABaiADLQADakEDbmo2AgALIA1BAWohDQwBCwsgAUEBaiEBDAALAAsCQAJAAkACQAJAAkAgB0EFaw4KAAcBAgMEBQAAAAcLIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNBiAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENCiAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pqLQAAajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQUgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQkgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQF0ai0AAWo2AgALIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0EIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0IIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHakEBdGotAABqNgIACyANQQFqIQ0MAQsLIAFBAWohAQwACwALIAlBACAJQQBKGyEPIANBACADQQBKGyEQIApEAAAAAAAAWUCgIR4gA7chISAJtyEiQQAhAQNAIAEgD0YNAyAeIB0gAbdEAAAAAAAA4D+goiAio6AhCkEAIQ0DQCANIBBHBEAgDCsDUCAMKwNAIB4gHSANt0QAAAAAAADgP6CiICGjoCIfoiAKIAwrA0iioKAiIEQAAAAAAAAAAGENByAMIAwrAyAgDCsDECAfoiAKIAwrAxiioKAgIKO2Ihk4AgwgDCAMKwM4IAwrAyggH6IgCiAMKwMwoqCgICCjtiIaOAIIIAggGSAaIAxBDGogDEEIahBzGiAMKgIMIRkCfyAAQQFGBEACfyAMKgIIQwAAgD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLQQJtQQF0IQMCfyAZQwAAgD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLQQJtQQF0DAELAn8gDCoCCEMAAAA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4CyEDIBlDAAAAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAsiB0EASCAFIAdMciADQQBIIAMgBk5yckUEQCAOIAEgEW0gAmwgDSASbWpBAnRqIgkgCSgCACAEIAMgBWwgB2pBAXRqIgMtAAAiB0H4AXEgAy0AASIDQQN0QfgBcWogB0EFdCADQQN2ckH8AXFqQQpqQQNuajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyAJQQAgCUEAShshDyADQQAgA0EAShshECAKRAAAAAAAAFlAoCEeIAO3ISEgCbchIkEAIQEDQCABIA9GDQIgHiAdIAG3RAAAAAAAAOA/oKIgIqOgIQpBACENA0AgDSAQRwRAIAwrA1AgDCsDQCAeIB0gDbdEAAAAAAAA4D+goiAho6AiH6IgCiAMKwNIoqCgIiBEAAAAAAAAAABhDQYgDCAMKwMgIAwrAxAgH6IgCiAMKwMYoqCgICCjtiIZOAIMIAwgDCsDOCAMKwMoIB+iIAogDCsDMKKgoCAgo7YiGjgCCCAIIBkgGiAMQQxqIAxBCGoQcxogDCoCDCEZAn8gAEEBRgRAAn8gDCoCCEMAAIA/kiIai0MAAABPXQRAIBqoDAELQYCAgIB4C0ECbUEBdCEDAn8gGUMAAIA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4C0ECbUEBdAwBCwJ/IAwqAghDAAAAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAshAyAZQwAAAD+SIhmLQwAAAE9dBEAgGagMAQtBgICAgHgLIgdBAEggBSAHTHIgA0EASCADIAZOcnJFBEAgDiABIBFtIAJsIA0gEm1qQQJ0aiIJIAkoAgAgBCADIAVsIAdqQQF0aiIDLQAAIgdB+AFxIAMtAAEiA0ECdEH4AXFqIAdBBXQgA0EDdnJB+AFxakEMakEDbmo2AgALIA1BAWohDQwBCwsgAUEBaiEBDAALAAsgCUEAIAlBAEobIQ8gA0EAIANBAEobIRAgCkQAAAAAAABZQKAhHiADtyEhIAm3ISJBACEBA0AgASAPRg0BIB4gHSABt0QAAAAAAADgP6CiICKjoCEKQQAhDQNAIA0gEEcEQCAMKwNQIAwrA0AgHiAdIA23RAAAAAAAAOA/oKIgIaOgIh+iIAogDCsDSKKgoCIgRAAAAAAAAAAAYQ0FIAwgDCsDICAMKwMQIB+iIAogDCsDGKKgoCAgo7YiGTgCDCAMIAwrAzggDCsDKCAfoiAKIAwrAzCioKAgIKO2Iho4AgggCCAZIBogDEEMaiAMQQhqEHMaIAwqAgwhGQJ/IABBAUYEQAJ/IAwqAghDAACAP5IiGotDAAAAT10EQCAaqAwBC0GAgICAeAtBAm1BAXQhAwJ/IBlDAACAP5IiGYtDAAAAT10EQCAZqAwBC0GAgICAeAtBAm1BAXQMAQsCfyAMKgIIQwAAAD+SIhqLQwAAAE9dBEAgGqgMAQtBgICAgHgLIQMgGUMAAAA/kiIZi0MAAABPXQRAIBmoDAELQYCAgIB4CyIHQQBIIAUgB0xyIANBAEggAyAGTnJyRQRAIA4gASARbSACbCANIBJtakECdGoiCSAJKAIAIAQgAyAFbCAHakEBdGoiAy0AACIHQfABcSAHQQR0QfABcWogAy0AAUEIckH4AXFqQRBqQQNuajYCAAsgDUEBaiENDAELCyABQQFqIQEMAAsACyARIBJsIQBBACEJQQAhDQNAIA0gE0YNAyALIA1qIA4gDUECdGooAgAgAG46AAAgDUEBaiENDAALAAtBAEEDQYMWQQAQPQtBfyEJCyAOEDQgDEHgAWokACAJDwtBAEEDQaQOQQAQPUEBEAMACyIAIAEgAiIAKQIANwIAIAEgACgCEDYCECABIAApAgg3AggLEQAgACABIAEoAgAoAigRAgALCABB/////wcLBQBB/wALKwACQCAAIAFGDQADQCAAIAFBBGsiAU8NASAAIAEQSCAAQQRqIQAMAAsACwvQAQECfyACQYAQcQRAIABBKzoAACAAQQFqIQALIAJBgAhxBEAgAEEjOgAAIABBAWohAAsgAkGEAnEiA0GEAkcEQCAAQa7UADsAACAAQQJqIQALIAJBgIABcSECA0AgAS0AACIEBEAgACAEOgAAIABBAWohACABQQFqIQEMAQsLIAACfwJAIANBgAJHBEAgA0EERw0BQcYAQeYAIAIbDAILQcUAQeUAIAIbDAELQcEAQeEAIAIbIANBhAJGDQAaQccAQecAIAIbCzoAACADQYQCRwuqAQEBfwJAIANBgBBxRQ0AIAJFIANBygBxIgRBCEYgBEHAAEZycg0AIABBKzoAACAAQQFqIQALIANBgARxBEAgAEEjOgAAIABBAWohAAsDQCABLQAAIgQEQCAAIAQ6AAAgAEEBaiEAIAFBAWohAQwBCwsgAAJ/Qe8AIANBygBxIgFBwABGDQAaQdgAQfgAIANBgIABcRsgAUEIRg0AGkHkAEH1ACACGws6AAALDAAgABA/IAFBAnRqC7AEAQt/IwBBgAFrIgokACAKIAE2AnggAiADEPYDIQggCkHOAjYCECAKQQhqQQAgCkEQaiIJEGghDwJAIAhB5QBPBEAgCBA7IglFDQEgDyAJEIABCyAJIQcgAiEBA0AgASADRgRAA0ACQCAAIApB+ABqEJMBQQAgCBtFBEAgACAKQfgAahB8BEAgBSAFKAIAQQJyNgIACwwBCyAAEGkhDSAGRQRAIAQgDRCGASENCyAMQQFqIRBBACEOIAkhByACIQEDQCABIANGBEAgECEMIA5FDQMgABB2GiAJIQcgAiEBIAggC2pBAkkNAwNAIAEgA0YEQAwFBQJAIActAABBAkcNACABEDggDEYNACAHQQA6AAAgC0EBayELCyAHQQFqIQcgAUEMaiEBDAELAAsABQJAIActAABBAUcNACABIAwQvgMoAgAhEQJAIAYEfyARBSAEIBEQhgELIA1GBEBBASEOIAEQOCAQRw0CIAdBAjoAACALQQFqIQsMAQsgB0EAOgAACyAIQQFrIQgLIAdBAWohByABQQxqIQEMAQsACwALCwJAAkADQCACIANGDQEgCS0AAEECRwRAIAlBAWohCSACQQxqIQIMAQsLIAIhAwwBCyAFIAUoAgBBBHI2AgALIA8QZyAKQYABaiQAIAMPBQJAIAEQvwFFBEAgB0EBOgAADAELIAdBAjoAACALQQFqIQsgCEEBayEICyAHQQFqIQcgAUEMaiEBDAELAAsACxBWAAsRACAAIAEgACgCACgCDBEDAAu3BAELfyMAQYABayIKJAAgCiABNgJ4IAIgAxD2AyEIIApBzgI2AhAgCkEIakEAIApBEGoiCRBoIQ8CQCAIQeUATwRAIAgQOyIJRQ0BIA8gCRCAAQsgCSEHIAIhAQNAIAEgA0YEQANAAkAgACAKQfgAahCUAUEAIAgbRQRAIAAgCkH4AGoQfQRAIAUgBSgCAEECcjYCAAsMAQsgABBqIQ0gBkUEQCAEIA0QwAMhDQsgDEEBaiEQQQAhDiAJIQcgAiEBA0AgASADRgRAIBAhDCAORQ0DIAAQdxogCSEHIAIhASAIIAtqQQJJDQMDQCABIANGBEAMBQUCQCAHLQAAQQJHDQAgARA4IAxGDQAgB0EAOgAAIAtBAWshCwsgB0EBaiEHIAFBDGohAQwBCwALAAUCQCAHLQAAQQFHDQAgASAMEEEsAAAhEQJAIA1B/wFxIAYEfyARBSAEIBEQwAMLQf8BcUYEQEEBIQ4gARA4IBBHDQIgB0ECOgAAIAtBAWohCwwBCyAHQQA6AAALIAhBAWshCAsgB0EBaiEHIAFBDGohAQwBCwALAAsLAkACQANAIAIgA0YNASAJLQAAQQJHBEAgCUEBaiEJIAJBDGohAgwBCwsgAiEDDAELIAUgBSgCAEEEcjYCAAsgDxBnIApBgAFqJAAgAw8FAkAgARC/AUUEQCAHQQE6AAAMAQsgB0ECOgAAIAtBAWohCyAIQQFrIQgLIAdBAWohByABQQxqIQEMAQsACwALEFYAC38CAn8CfiMAQaABayIEJAAgBCABNgI8IAQgATYCFCAEQX82AhggBEEQaiIFQgAQwwEgBCAFIANBARCDBSAEKQMIIQYgBCkDACEHIAIEQCACIAEgBCgCFCAEKAKIAWogBCgCPGtqNgIACyAAIAY3AwggACAHNwMAIARBoAFqJAALDQAgACABIAJCfxDGBAsaACAAIAEgASgCAEEMaygCAGooAhg2AgAgAAsLACAAQZSvBBDLAQsnAQF/IABBBGoQ1wQhAiAAQZyIAzYCACACQbCIAzYCACACIAEQ9AILJwEBfyAAQQRqEIEFIQIgAEHshwM2AgAgAkGAiAM2AgAgAiABEPQCC2oBAn8gAEHwjAM2AgAgACgCKCEBA0AgAQRAQQAgACABQQFrIgFBAnQiAiAAKAIkaigCACAAKAIgIAJqKAIAEQUADAELCyAAQRxqEEcgACgCIBA0IAAoAiQQNCAAKAIwEDQgACgCPBA0IAALCwAgAEGMrwQQywELXQECfwJAIAAoAgAiAkUNAAJ/IAIoAhgiAyACKAIcRgRAIAIgARDCASACKAIAKAI0EQMADAELIAIgA0EBajYCGCADIAE6AAAgARDCAQtBfxC9AUUNACAAQQA2AgALCwkAIAAQ+QIQNAu6AQECfyMAQRBrIgIkACAAIAAoAgBBDGsoAgBqKAIYBEAgAkEIaiIBIAA2AgQgAUEAOgAAIAAgACgCAEEMaygCAGoQzgMEQCAAIAAoAgBBDGsoAgBqKAJIBEAgACAAKAIAQQxrKAIAaigCSBDMAwsgAUEBOgAACwJAIAEtAABFDQAgACAAKAIAQQxrKAIAaigCGBDGAkF/Rw0AIAAgACgCAEEMaygCAGpBARDEAgsgARDFAgsgAkEQaiQAC4HiAQINfwF8IANFBEAgBEEBRgRAIAgEQAJ/IAAhBUEAIQAgASIGQQAgAUEAShshCiAHKAIAIgMgASACIg9BAWsiAWxBAXRqIQQgAyECA0AgACAKRwRAIARBADsBACACQQA7AQAgAEEBaiEAIAJBAmohAiAEQQJqIQQMAQsLIA9BACAPQQBKGyEJIAMgBkEBayIKQQF0aiEEQQAhACADIQIDQCAAIAlHBEAgBEEAOwEAIAJBADsBACAAQQFqIQAgBCAGQQF0IgtqIQQgAiALaiECDAELCyABQQEgAUEBShshEiAHQZCAyABqIQEgCCAGQQFqIgBqIQsgACAFaiEMIApBASAKQQFKGyITQQFrIQ0gAyAAQQF0aiECQQAgBmtBAXQhFEEAIQVBASEKAkADQCAKIBJHBEAgDCANaiEQIAsgDWohDkEBIQQDQAJAAkACQCAEIBNHBEAgDC0AACALLQAATQRAIAIgFGoiAC8BACIDQRB0QRB1IghBAEoEQCACIAg7AQAgByADQRxsaiIAQYyA0ABqIAo2AgAgAEH0/88AaiIDIAMoAgBBAWo2AgAgAEH4/88AaiIDIAMoAgAgBGo2AgAgAEH8/88AaiIAIAAoAgAgCmo2AgAMBQsgAEECay8BACIIQRB0QRB1IQMgAC4BAiIAQQBKBEAgA0EASgRAIAdBkIDIAGoiCSAAQQJ0akEEaygCACIDIAhBAnQgCWpBBGsoAgAiCEoEQCACIAg7AQBBACEJIAVBACAFQQBKGyERIAEhAANAIAkgEUYEQCAIIQMMCAsgAyAAKAIARgRAIAAgCDYCAAsgCUEBaiEJIABBBGohAAwACwALIAIgAzsBACADIAhODQVBACEJIAVBACAFQQBKGyERIAEhAANAIAkgEUYNBiAIIAAoAgBGBEAgACADNgIACyAJQQFqIQkgAEEEaiEADAALAAsgAkECay4BACIIQQBKBEAgB0GQgMgAaiIJIABBAnRqQQRrKAIAIgMgCEH//wNxQQJ0IAlqQQRrKAIAIghKBEAgAiAIOwEAQQAhCSAFQQAgBUEAShshESABIQADQCAJIBFGBEAgCCEDDAcLIAMgACgCAEYEQCAAIAg2AgALIAlBAWohCSAAQQRqIQAMAAsACyACIAM7AQAgAyAITg0EQQAhCSAFQQAgBUEAShshESABIQADQCAJIBFGDQUgCCAAKAIARgRAIAAgAzYCAAsgCUEBaiEJIABBBGohAAwACwALIAIgADsBACAHIABBB2xBAnRqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiAyADKAIAIApqNgIAIAQgAEGAgNAAaiIDKAIASARAIAMgBDYCAAsgAEGMgNAAaiAKNgIADAULIANBAEoEQCACIAM7AQAgByAIQQdsQQJ0aiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAKajYCACAEIABBhIDQAGoiAygCAEoEQCADIAQ2AgALIABBjIDQAGogCjYCAAwFCyACQQJrLwEAIgBBEHRBEHUiA0EASgRAIAIgAzsBACAHIABBHGxqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiAyADKAIAIApqNgIAIABBhIDQAGoiACgCACAETg0FIAAgBDYCAAwFCyAFQYCAAk4EQEEAQQNBugxBABA9QX8hCwwJCyACIAVBAWoiADsBACAHIAVBAnRqQZCAyABqIABBEHRBEHU2AgAgByAFQRxsaiIDQZSA0ABqIAQ2AgAgA0GQgNAAakEBNgIAIANBmIDQAGogCjYCACADQZyA0ABqIAQ2AgAgA0GggNAAaiAENgIAIANBpIDQAGogCjYCACADQaiA0ABqIAo2AgAgACEFDAQLIAJBADsBAAwDCyACQQRqIQIgDkECaiELIBBBAmohDCAKQQFqIQoMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAtBAWohCyAMQQFqIQwgBEEBaiEEDAALAAsLIAVBACAFQQBKG0EBaiEDQQEhAEEBIQIDQCAAIANHBEACQCAAIAEoAgAiBEYEQCACIgRBAWohAgwBCyAEQQJ0IAdqQYyAyABqKAIAIQQLIAEgBDYCACABQQRqIQEgAEEBaiEADAELCyAHIAJBAWsiBDYCCEEAIARFDQEaIAdBDGpBACAEQQJ0EDoaIAdBkIAoakEAIARBBHQQOhpBACEAA0AgACAETgRAQQAhBCAFQQAgBUEAShshAgNAIAIgBEYEQEEAIQsgBygCCCIAQQAgAEEAShshAUEAIQADQCAAIAFGDQUgByAAQQR0aiICQZCAKGoiAyADKwMAIAcgAEECdGooAgy3IhajOQMAIAJBmIAoaiICIAIrAwAgFqM5AwAgAEEBaiEADAALAAsgByAHIARBAnRqQZCAyABqKAIAQQFrIgFBAnQiA2oiACAAKAIMIAcgBEEHbEECdGoiAEGQgNAAaigCAGo2AgwgByABQQR0aiIBQZCAKGoiBSAFKwMAIABBlIDQAGooAgC3oDkDACABQZiAKGoiBSAFKwMAIABBmIDQAGooAgC3oDkDACAAQZyA0ABqKAIAIgUgAUGMgAhqIgEoAgBIBEAgASAFNgIACyAAQaCA0ABqKAIAIgUgByADQQJ0IgFBBHJqQYyACGoiAygCAEoEQCADIAU2AgALIABBpIDQAGooAgAiAyAHIAFBCHJqQYyACGoiBSgCAEgEQCAFIAM2AgALIABBqIDQAGooAgAiACAHIAFBDHJqQYyACGoiASgCAEoEQCABIAA2AgALIARBAWohBAwACwAFIAcgAEEEdGoiAUGQgAhqQQA2AgAgAUGMgAhqIAY2AgAgAUGUgAhqIA82AgAgAUGYgAhqQQA2AgAgAEEBaiEAIAcoAgghBAwBCwALAAsgCwsPCyAGRQRAAn8gACEIIAUhCkEAIQAgASIGQQAgAUEAShshBSAHKAIAIgMgASACIg9BAWsiAWxBAXRqIQQgAyECA0AgACAFRwRAIARBADsBACACQQA7AQAgAEEBaiEAIAJBAmohAiAEQQJqIQQMAQsLIA9BACAPQQBKGyEJIAMgBkEBayIFQQF0aiEEQQAhACADIQIDQCAAIAlHBEAgBEEAOwEAIAJBADsBACAAQQFqIQAgBCAGQQF0IgtqIQQgAiALaiECDAELCyABQQEgAUEBShshDSAHQZCAyABqIQEgCCAGQQFqIgBqIQwgBUEBIAVBAUobIhJBAWshEyADIABBAXRqIQJBACAGa0EBdCEUQQAhBUEBIQkCQANAIAkgDUcEQCAMIBNqIRBBASEEA0ACQAJAAkAgBCASRwRAIAogDC0AAE4EQCACIBRqIgAvAQAiA0EQdEEQdSIIQQBKBEAgAiAIOwEAIAcgA0EcbGoiAEGMgNAAaiAJNgIAIABB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIAlqNgIADAULIABBAmsvAQAiCEEQdEEQdSEDIAAuAQIiAEEASgRAIANBAEoEQCAHQZCAyABqIgsgAEECdGpBBGsoAgAiAyAIQQJ0IAtqQQRrKAIAIghKBEAgAiAIOwEAQQAhCyAFQQAgBUEAShshDiABIQADQCALIA5GBEAgCCEDDAgLIAMgACgCAEYEQCAAIAg2AgALIAtBAWohCyAAQQRqIQAMAAsACyACIAM7AQAgAyAITg0FQQAhCyAFQQAgBUEAShshDiABIQADQCALIA5GDQYgCCAAKAIARgRAIAAgAzYCAAsgC0EBaiELIABBBGohAAwACwALIAJBAmsuAQAiCEEASgRAIAdBkIDIAGoiCyAAQQJ0akEEaygCACIDIAhB//8DcUECdCALakEEaygCACIISgRAIAIgCDsBAEEAIQsgBUEAIAVBAEobIQ4gASEAA0AgCyAORgRAIAghAwwHCyADIAAoAgBGBEAgACAINgIACyALQQFqIQsgAEEEaiEADAALAAsgAiADOwEAIAMgCE4NBEEAIQsgBUEAIAVBAEobIQ4gASEAA0AgCyAORg0FIAggACgCAEYEQCAAIAM2AgALIAtBAWohCyAAQQRqIQAMAAsACyACIAA7AQAgByAAQQdsQQJ0aiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAJajYCACAEIABBgIDQAGoiAygCAEgEQCADIAQ2AgALIABBjIDQAGogCTYCAAwFCyADQQBKBEAgAiADOwEAIAcgCEEHbEECdGoiAEH0/88AaiIDIAMoAgBBAWo2AgAgAEH4/88AaiIDIAMoAgAgBGo2AgAgAEH8/88AaiIDIAMoAgAgCWo2AgAgBCAAQYSA0ABqIgMoAgBKBEAgAyAENgIACyAAQYyA0ABqIAk2AgAMBQsgAkECay8BACIAQRB0QRB1IgNBAEoEQCACIAM7AQAgByAAQRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAJajYCACAAQYSA0ABqIgAoAgAgBE4NBSAAIAQ2AgAMBQsgBUGAgAJOBEBBAEEDQboMQQAQPUF/IQwMCQsgAiAFQQFqIgA7AQAgByAFQQJ0akGQgMgAaiAAQRB0QRB1NgIAIAcgBUEcbGoiA0GUgNAAaiAENgIAIANBkIDQAGpBATYCACADQZiA0ABqIAk2AgAgA0GcgNAAaiAENgIAIANBoIDQAGogBDYCACADQaSA0ABqIAk2AgAgA0GogNAAaiAJNgIAIAAhBQwECyACQQA7AQAMAwsgAkEEaiECIBBBAmohDCAJQQFqIQkMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAJajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCTYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAJajYCAAsgAkECaiECIAxBAWohDCAEQQFqIQQMAAsACwsgBUEAIAVBAEobQQFqIQNBASEAQQEhAgNAIAAgA0cEQAJAIAAgASgCACIERgRAIAIiBEEBaiECDAELIARBAnQgB2pBjIDIAGooAgAhBAsgASAENgIAIAFBBGohASAAQQFqIQAMAQsLIAcgAkEBayIENgIIQQAgBEUNARogB0EMakEAIARBAnQQOhogB0GQgChqQQAgBEEEdBA6GkEAIQADQCAAIAROBEBBACEEIAVBACAFQQBKGyECA0AgAiAERgRAQQAhDCAHKAIIIgBBACAAQQBKGyEBQQAhAANAIAAgAUYNBSAHIABBBHRqIgJBkIAoaiIDIAMrAwAgByAAQQJ0aigCDLciFqM5AwAgAkGYgChqIgIgAisDACAWozkDACAAQQFqIQAMAAsACyAHIAcgBEECdGpBkIDIAGooAgBBAWsiAUECdCIDaiIAIAAoAgwgByAEQQdsQQJ0aiIAQZCA0ABqKAIAajYCDCAHIAFBBHRqIgFBkIAoaiIFIAUrAwAgAEGUgNAAaigCALegOQMAIAFBmIAoaiIFIAUrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBSABQYyACGoiASgCAEgEQCABIAU2AgALIABBoIDQAGooAgAiBSAHIANBAnQiAUEEcmpBjIAIaiIDKAIASgRAIAMgBTYCAAsgAEGkgNAAaigCACIDIAcgAUEIcmpBjIAIaiIFKAIASARAIAUgAzYCAAsgAEGogNAAaigCACIAIAcgAUEMcmpBjIAIaiIBKAIASgRAIAEgADYCAAsgBEEBaiEEDAALAAUgByAAQQR0aiIBQZCACGpBADYCACABQYyACGogBjYCACABQZSACGogDzYCACABQZiACGpBADYCACAAQQFqIQAgBygCCCEEDAELAAsACyAMCw8LAn8gACEGIAUhDyABIghBAm0iDEEAIAxBAEobIQUgBygCACIDIAJBAm0iDUEBayIBIAxsQQF0aiEEQQAhACADIQIDQCAAIAVHBEAgBEEAOwEAIAJBADsBACAAQQFqIQAgAkECaiECIARBAmohBAwBCwsgDUEAIA1BAEobIQogAyAMQQFrIgVBAXRqIQRBACEAIAMhAgNAIAAgCkcEQCAEQQA7AQAgAkEAOwEAIABBAWohACAEIAxBAXQiCWohBCACIAlqIQIMAQsLIAFBASABQQFKGyESIAVBASAFQQFKGyETIAdBkIDIAGohASAIQQF0IAZqQQJqIQsgDEEBdCADakECaiECQQAgDGtBAXQhFEEAIQVBASEKAkADQCAKIBJHBEBBASEEA0ACQAJAAkAgBCATRwRAIA8gCy0AAE4EQCACIBRqIgAvAQAiA0EQdEEQdSIGQQBKBEAgAiAGOwEAIAcgA0EcbGoiAEGMgNAAaiAKNgIAIABB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIApqNgIADAULIABBAmsvAQAiBkEQdEEQdSEDIAAuAQIiAEEASgRAIANBAEoEQCAHQZCAyABqIgkgAEECdGpBBGsoAgAiAyAGQQJ0IAlqQQRrKAIAIgZKBEAgAiAGOwEAQQAhCSAFQQAgBUEAShshECABIQADQCAJIBBGBEAgBiEDDAgLIAMgACgCAEYEQCAAIAY2AgALIAlBAWohCSAAQQRqIQAMAAsACyACIAM7AQAgAyAGTg0FQQAhCSAFQQAgBUEAShshECABIQADQCAJIBBGDQYgBiAAKAIARgRAIAAgAzYCAAsgCUEBaiEJIABBBGohAAwACwALIAJBAmsuAQAiBkEASgRAIAdBkIDIAGoiCSAAQQJ0akEEaygCACIDIAZB//8DcUECdCAJakEEaygCACIGSgRAIAIgBjsBAEEAIQkgBUEAIAVBAEobIRAgASEAA0AgCSAQRgRAIAYhAwwHCyADIAAoAgBGBEAgACAGNgIACyAJQQFqIQkgAEEEaiEADAALAAsgAiADOwEAIAMgBk4NBEEAIQkgBUEAIAVBAEobIRAgASEAA0AgCSAQRg0FIAYgACgCAEYEQCAAIAM2AgALIAlBAWohCSAAQQRqIQAMAAsACyACIAA7AQAgByAAQQdsQQJ0aiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAKajYCACAEIABBgIDQAGoiAygCAEgEQCADIAQ2AgALIABBjIDQAGogCjYCAAwFCyADQQBKBEAgAiADOwEAIAcgBkEHbEECdGoiAEH0/88AaiIDIAMoAgBBAWo2AgAgAEH4/88AaiIDIAMoAgAgBGo2AgAgAEH8/88AaiIDIAMoAgAgCmo2AgAgBCAAQYSA0ABqIgMoAgBKBEAgAyAENgIACyAAQYyA0ABqIAo2AgAMBQsgAkECay8BACIAQRB0QRB1IgNBAEoEQCACIAM7AQAgByAAQRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgMgAygCACAKajYCACAAQYSA0ABqIgAoAgAgBE4NBSAAIAQ2AgAMBQsgBUGAgAJOBEBBAEEDQboMQQAQPUF/IQsMCQsgAiAFQQFqIgA7AQAgByAFQQJ0akGQgMgAaiAAQRB0QRB1NgIAIAcgBUEcbGoiA0GUgNAAaiAENgIAIANBkIDQAGpBATYCACADQZiA0ABqIAo2AgAgA0GcgNAAaiAENgIAIANBoIDQAGogBDYCACADQaSA0ABqIAo2AgAgA0GogNAAaiAKNgIAIAAhBQwECyACQQA7AQAMAwsgAkEEaiECIApBAWohCiAIIAtqQQRqIQsMBQsgByADQRB0QRB1QRxsaiIAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAwBCyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAtBAmohCyAEQQFqIQQMAAsACwsgBUEAIAVBAEobQQFqIQNBASEAQQEhAgNAIAAgA0cEQAJAIAAgASgCACIERgRAIAIiBEEBaiECDAELIARBAnQgB2pBjIDIAGooAgAhBAsgASAENgIAIAFBBGohASAAQQFqIQAMAQsLIAcgAkEBayIENgIIQQAgBEUNARogB0EMakEAIARBAnQQOhogB0GQgChqQQAgBEEEdBA6GkEAIQADQCAAIAROBEBBACEEIAVBACAFQQBKGyECA0AgAiAERgRAQQAhCyAHKAIIIgBBACAAQQBKGyEBQQAhAANAIAAgAUYNBSAHIABBBHRqIgJBkIAoaiIDIAMrAwAgByAAQQJ0aigCDLciFqM5AwAgAkGYgChqIgIgAisDACAWozkDACAAQQFqIQAMAAsACyAHIAcgBEECdGpBkIDIAGooAgBBAWsiAUECdCIDaiIAIAAoAgwgByAEQQdsQQJ0aiIAQZCA0ABqKAIAajYCDCAHIAFBBHRqIgFBkIAoaiIFIAUrAwAgAEGUgNAAaigCALegOQMAIAFBmIAoaiIFIAUrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBSABQYyACGoiASgCAEgEQCABIAU2AgALIABBoIDQAGooAgAiBSAHIANBAnQiAUEEcmpBjIAIaiIDKAIASgRAIAMgBTYCAAsgAEGkgNAAaigCACIDIAcgAUEIcmpBjIAIaiIFKAIASARAIAUgAzYCAAsgAEGogNAAaigCACIAIAcgAUEMcmpBjIAIaiIBKAIASgRAIAEgADYCAAsgBEEBaiEEDAALAAUgByAAQQR0aiIBQZCACGpBADYCACABQYyACGogDDYCACABQZSACGogDTYCACABQZiACGpBADYCACAAQQFqIQAgBygCCCEEDAELAAsACyALCw8LIAgEQAJ/IAAhBUEAIQAgASIGQQAgAUEAShshCiAHKAIAIgMgASACIg9BAWsiAWxBAXRqIQQgAyEC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CyAHIANBEHRBEHVBHGxqIgBBjIDQAGogCjYCACAAQfT/zwBqIgMgAygCAEEBajYCACAAQfj/zwBqIgMgAygCACAEajYCACAAQfz/zwBqIgAgACgCACAKajYCAAsgAkECaiECIAtBAmohCyAEQQFqIQQMAAsACwsgBUEAIAVBAEobQQFqIQNBASEAQQEhAgNAIAAgA0cEQAJAIAAgASgCACIERgRAIAIiBEEBaiECDAELIARBAnQgB2pBjIDIAGooAgAhBAsgASAENgIAIAFBBGohASAAQQFqIQAMAQsLIAcgAkEBayIENgIIQQAgBEUNARogB0EMakEAIARBAnQQOhogB0GQgChqQQAgBEEEdBA6GkEAIQADQCAAIAROBEBBACEEIAVBACAFQQBKGyECA0AgAiAERgRAQQAhCyAHKAIIIgBBACAAQQBKGyEBQQAhAANAIAAgAUYNBSAHIABBBHRqIgJBkIAoaiIDIAMrAwAgByAAQQJ0aigCDLciFqM5AwAgAkGYgChqIgIgAisDACAWozkDACAAQQFqIQAMAAsACyAHIAcgBEECdGpBkIDIAGooAgBBAWsiAUECdCIDaiIAIAAoAgwgByAEQQdsQQJ0aiIAQZCA0ABqKAIAajYCDCAHIAFBBHRqIgFBkIAoaiIFIAUrAwAgAEGUgNAAaigCALegOQMAIAFBmIAoaiIFIAUrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBSABQYyACGoiASgCAEgEQCABIAU2AgALIABBoIDQAGooAgAiBSAHIANBAnQiAUEEcmpBjIAIaiIDKAIASgRAIAMgBTYCAAsgAEGkgNAAaigCACIDIAcgAUEIcmpBjIAIaiIFKAIASARAIAUgAzYCAAsgAEGogNAAaigCACIAIAcgAUEMcmpBjIAIaiIBKAIASgRAIAEgADYCAAsgBEEBaiEEDAALAAUgByAAQQR0aiIBQZCACGpBADYCACABQYyACGogDDYCACABQZSACGogDTYCACABQZiACGpBADYCACAAQQFqIQAgBygCCCEEDAELAAsACyALCw8LIARBAUYEQCAIBEACfyAAIQVBACEAIAEiBkEAIAFBAEobIQogBygCACIDIAEgAiIPQQFrIgFsQQF0aiEEIAMhAgNAIAAgCkcEQCAEQQA7AQAgAkEAOwEAIABB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BGohDQwFCyAHIANBEHRBEHVBHGxqIgBB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIApqNgIADAELIAcgA0EQdEEQdUEcbGoiAEGMgNAAaiAKNgIAIABB9P/PAGoiAyADKAIAQQFqNgIAIABB+P/PAGoiAyADKAIAIARqNgIAIABB/P/PAGoiACAAKAIAIApqNgIACyALQQFqIQsgAkECaiECIA1BAmohDSAEQQFqIQQMAAsACwsgBUEAIAVBAEobQQFqIQNBASEAQQEhAgNAIAAgA0cEQAJAIAAgASgCACIERgRAIAIiBEEBaiECDAELIARBAnQgB2pBjIDIAGooAgAhBAsgASAENgIAIAFBBGohASAAQQFqIQAMAQsLIAcgAkEBayIENgIIQQAgBEUNARogB0EMakEAIARBAnQQOhogB0GQgChqQQAgBEEEdBA6GkEAIQADQCAAIAROBEBBACEEIAVBACAFQQBKGyECA0AgAiAERgRAQQAhCyAHKAIIIgBBACAAQQBKGyEBQQAhAANAIAAgAUYNBSAHIABBBHRqIgJBkIAoaiIDIAMrAwAgByAAQQJ0aigCDLciFqM5AwAgAkGYgChqIgIgAisDACAWozkDACAAQQFqIQAMAAsACyAHIAcgBEECdGpBkIDIAGooAgBBAWsiAUECdCIDaiIAIAAoAgwgByAEQQdsQQJ0aiIAQZCA0ABqKAIAajYCDCAHIAFBBHRqIgFBkIAoaiIFIAUrAwAgAEGUgNAAaigCALegOQMAIAFBmIAoaiIFIAUrAwAgAEGYgNAAaigCALegOQMAIABBnIDQAGooAgAiBSABQYyACGoiASgCAEgEQCABIAU2AgALIABBoIDQAGooAgAiBSAHIANBAnQiAUEEcmpBjIAIaiIDKAIASgRAIAMgBTYCAAsgAEGkgNAAaigCACIDIAcgAUEIcmpBjIAIaiIFKAIASARAIAUgAzYCAAsgAEGogNAAaigCACIAIAcgAUEMcmpBjIAIaiIBKAIASgRAIAEgADYCAAsgBEEBaiEEDAALAAUgByAAQQR0aiIBQZCACGpBADYCACABQYyACGogDDYCACABQZSACGogEjYCACABQZiACGpBADYCACAAQQFqIQAgBygCCCEEDAELAAsACyAL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IQQMAAsABSAHIABBBHRqIgFBkIAIakEANgIAIAFBjIAIaiAMNgIAIAFBlIAIaiASNgIAIAFBmIAIakEANgIAIABBAWohACAHKAIIIQQMAQsACwALIAsLCwgAIAAoAhBFCwkAIAAQ/AIQNAsUACAAQciGAzYCACAAQQRqEEcgAAsKACAAQRh0QRh1CxQAIABBiIYDNgIAIABBBGoQRyAACwkAIAAgARD0BAvZAwICfgJ/IwBBIGsiBCQAAkAgAUL///////////8AgyIDQoCAgICAgMCAPH0gA0KAgICAgIDA/8MAfVQEQCABQgSGIABCPIiEIQMgAEL//////////w+DIgBCgYCAgICAgIAIWgRAIANCgYCAgICAgIDAAHwhAgwCCyADQoCAgICAgICAQH0hAiAAQoCAgICAgICACIVCAFINASACIANCAYN8IQIMAQsgAFAgA0KAgICAgIDA//8AVCADQoCAgICAgMD//wBRG0UEQCABQgSGIABCPIiEQv////////8Dg0KAgICAgICA/P8AhCECDAELQoCAgICAgID4/wAhAiADQv///////7//wwBWDQBCACECIANCMIinIgVBkfcASQ0AIARBEGogACABQv///////z+DQoCAgICAgMAAhCICIAVBgfcAaxCNASAEIAAgAkGB+AAgBWsQhQIgBCkDCEIEhiAEKQMAIgBCPIiEIQIgBCkDECAEKQMYhEIAUq0gAEL//////////w+DhCIAQoGAgICAgICACFoEQCACQgF8IQIMAQsgAEKAgICAgICAgAiFQgBSDQAgAkIBgyACfCECCyAEQSBqJAAgAiABQoCAgICAgICAgH+DhL8LRQEBfyMAQRBrIgUkACAFIAEgAiADIARCgICAgICAgICAf4UQoQEgBSkDACEBIAAgBSkDCDcDCCAAIAE3AwAgBUEQaiQAC8QBAgF/An5BfyEDAkAgAEIAUiABQv///////////wCDIgRCgICAgICAwP//AFYgBEKAgICAgIDA//8AURsNAEEAIAJC////////////AIMiBUKAgICAgIDA//8AViAFQoCAgICAgMD//wBRGw0AIAAgBCAFhIRQBEBBAA8LIAEgAoNCAFkEQEEAIAEgAlMgASACURsNASAAIAEgAoWEQgBSDwsgAEIAUiABIAJVIAEgAlEbDQAgACABIAKFhEIAUiEDCyADC4kCAAJAIAAEfyABQf8ATQ0BAkBBnJAEKAIAKAIARQRAIAFBgH9xQYC/A0YNAwwBCyABQf8PTQRAIAAgAUE/cUGAAXI6AAEgACABQQZ2QcABcjoAAEECDwsgAUGAQHFBgMADRyABQYCwA09xRQRAIAAgAUE/cUGAAXI6AAIgACABQQx2QeABcjoAACAAIAFBBnZBP3FBgAFyOgABQQMPCyABQYCABGtB//8/TQRAIAAgAUE/cUGAAXI6AAMgACABQRJ2QfABcjoAACAAIAFBBnZBP3FBgAFyOgACIAAgAUEMdkE/cUGAAXI6AAFBBA8LC0HAjgRBGTYCAEF/BUEBCw8LIAAgAToAAEEBC/YBAQF/AkACQAJAIAAgAXNBA3ENACACQQBHIQMCQCABQQNxRSACRXINAANAIAAgAS0AACIDOgAAIANFDQQgAEEBaiEAIAJBAWsiAkEARyEDIAFBAWoiAUEDcUUNASACDQALCyADRQ0BIAEtAABFDQIgAkEESQ0AA0AgASgCACIDQX9zIANBgYKECGtxQYCBgoR4cQ0BIAAgAzYCACAAQQRqIQAgAUEEaiEBIAJBBGsiAkEDSw0ACwsgAkUNAANAIAAgAS0AACIDOgAAIANFDQIgAEEBaiEAIAFBAWohASACQQFrIgINAAsLQQAhAgsgAEEAIAIQOhoLZgEDf0F/IQICQCAARSABRXINAEEAIQIgAEEMakEAQYAIEDoaIAEgACgCCCAAKAIEbGohAwNAIAEgA08NASAAIAEtAABBAnRqIgRBDGogBCgCDEEBajYCACABQQFqIQEMAAsACyACCyoBAX8jAEEQayIEJAAgBCADNgIMIAAgASACIAMQiAIhACAEQRBqJAAgAAuvAQEGfyMAQfABayIHJAAgByAANgIAQQEhBgJAIANBAkgNAEEAIAFrIQkgACEFA0AgACAFIAlqIgUgBCADQQJrIgpBAnRqKAIAayIIIAIRAwBBAE4EQCAAIAUgAhEDAEEATg0CCyAHIAZBAnRqIAggBSAIIAUgAhEDAEEATiIIGyIFNgIAIAZBAWohBiADQQFrIAogCBsiA0EBSg0ACwsgASAHIAYQkQUgB0HwAWokAAvhAQECfyACQQBHIQMCQAJAAkAgAEEDcUUgAkVyDQAgAUH/AXEhBANAIAAtAAAgBEYNAiACQQFrIgJBAEchAyAAQQFqIgBBA3FFDQEgAg0ACwsgA0UNAQsCQCAALQAAIAFB/wFxRiACQQRJcg0AIAFB/wFxQYGChAhsIQMDQCAAKAIAIANzIgRBf3MgBEGBgoQIa3FBgIGChHhxDQEgAEEEaiEAIAJBBGsiAkEDSw0ACwsgAkUNACABQf8BcSEBA0AgASAALQAARgRAIAAPCyAAQQFqIQAgAkEBayICDQALC0EAC8EBAQN/AkAgASACKAIQIgMEfyADBSACEJwFDQEgAigCEAsgAigCFCIFa0sEQCACIAAgASACKAIkEQQADwsCQCACKAJQQQBIBEBBACEDDAELIAEhBANAIAQiA0UEQEEAIQMMAgsgACADQQFrIgRqLQAAQQpHDQALIAIgACADIAIoAiQRBAAiBCADSQ0BIAAgA2ohACABIANrIQEgAigCFCEFCyAFIAAgARBAGiACIAIoAhQgAWo2AhQgASADaiEECyAEC40BACAAIAAgACAAIABECff9DeE9Aj+iRIiyAXXg70k/oKJEO49otSiCpL+gokRVRIgOVcHJP6CiRH1v6wMS1tS/oKJEVVVVVVVVxT+gIACiIAAgACAAIABEgpIuscW4sz+iRFkBjRtsBua/oKJEyIpZnOUqAECgokRLLYocJzoDwKCiRAAAAAAAAPA/oKMLjgoBDn8gASgCFCEJIAEoAhAhAyABKAIMIQsgASgCCCEFIAAoAuQDKAIYIQ0CQCABKAIEIgcgASgCACIGSgRAIAYhCgNAIAUgC0wEQCANIApBAnRqKAIAIQwgBSECA0AgAyAJTARAIAwgAkEGdGogA0EBdGohACADIQQDQCAALwEABEAgASAKNgIADAcLIABBAmohACAEIAlHIQggBEEBaiEEIAgNAAsLIAIgC0chACACQQFqIQIgAA0ACwsgByAKRyEAIApBAWohCiAADQALCyAGIQoLAkAgByAKSgRAIAchCANAIAUgC0wEQCANIAhBAnRqKAIAIQwgBSECA0AgAyAJTARAIAwgAkEGdGogA0EBdGohACADIQQDQCAALwEABEAgASAINgIEDAcLIABBAmohACAEIAlHIQYgBEEBaiEEIAYNAAsLIAIgC0chACACQQFqIQIgAA0ACwsgCCAKSiEAIAhBAWshCCAADQALCyAHIQgLAkAgBSALSARAIAUh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ASgCACEBIABBEGokACABC1MBA38jAEEQayIDJAAgAyAAIAEQvwYiAigCBCEBIAIoAgghBANAIAEgBEYEQCACEG8gA0EQaiQABSAAEDUaIAEQmAYgAiABQQhqIgE2AgQMAQsLCwkAIAAgARCfBgs8AQJ/IwBBEGsiASQAIAFBCGoiAiAAKAIAKAIAQUBrEIoEGiACKAIAEDUQWiEAIAIQ0QEgAUEQaiQAIAALGQEBfyAAEJUBIQIgACABEI4FIAAgAhCcBgskACAAIAEoAgA2AgAgACABKAIEIgE2AgQgAQRAIAEQmgMLIAALLAEBfyMAQRBrIgEkACABQQA2AgwgACABQQxqIAFBCGoQsQYgAUEQaiQAIAALEwAgAiAFoiAAIAOiIAEgBKKgoAsVACAAQbjMATYCACAAQQRqEKAEIAALVQECfyAAQcjMATYCACAAQThqEHUgAEEsahB1IABBIGoiARC6BiABKAIABEAgASABKAIAELUGIAEQNRogASgCACECIAEQkwIaIAIQNAsgABCNBBogAAsUACACIAKiIAAgAKIgASABoqCgnwsNACAAQf////8BEOwCCw0AIAAgApQgASABlJMLbAEBfyABEDUaIwBBEGsiAiQAIABCADcCACACQQA2AgwgAEEIaiACQQxqEI0DIAJBEGokACAAIAEoAgA2AgAgACABKAIENgIEIAEQNSgCACECIAAQNSACNgIAIAEQNUEANgIAIAFCADcCACAACwkAIAFBADYCAAuRAgIMfwF8QX8hCgJAIAEoAggiBiACKAIERw0AIAAoAgQiAyABKAIERw0AIAAoAggiByACKAIIRw0AQQAhCiADQQAgA0EAShshCyAHQQAgB0EAShshDCAGQQAgBkEAShshDSAAKAIAIQMDQCAEIAtGDQEgBCAGbCEOQQAhBQNAIAUgDEZFBEAgA0IANwMAIAIoAgAgBUEDdGohCCABKAIAIA5BA3RqIQlBACEARAAAAAAAAAAAIQ8DQCAAIA1GRQRAIAMgCSsDACAIKwMAoiAPoCIPOQMAIABBAWohACAJQQhqIQkgCCAHQQN0aiEIDAELCyAFQQFqIQUgA0EIaiEDDAELCyAEQQFqIQQMAAsACyAKCw0AIABB/////wMQ7AILyQICAn8BfQJAAkAgBkEATA0AIAUoAgQgBkEBak0NACAHQQBM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A0EQaiQAIAVBEGokACAAC7YDAgN/AX4jAEEgayIDJAACQCABQv///////////wCDIgVCgICAgICAwMA/fSAFQoCAgICAgMC/wAB9VARAIAFCGYinIQQgAFAgAUL///8PgyIFQoCAgAhUIAVCgICACFEbRQRAIARBgYCAgARqIQIMAgsgBEGAgICABGohAiAAIAVCgICACIWEQgBSDQEgAiAEQQFxaiECDAELIABQIAVCgICAgICAwP//AFQgBUKAgICAgIDA//8AURtFBEAgAUIZiKdB////AXFBgICA/gdyIQIMAQtBgICA/AchAiAFQv///////7+/wABWDQBBACECIAVCMIinIgRBkf4ASQ0AIANBEGogACABQv///////z+DQoCAgICAgMAAhCIFIARBgf4AaxCNASADIAAgBUGB/wAgBGsQhQIgAykDCCIAQhmIpyECIAMpAwAgAykDECADKQMYhEIAUq2EIgVQIABC////D4MiAEKAgIAIVCAAQoCAgAhRG0UEQCACQQFqIQIMAQsgBSAAQoCAgAiFhEIAUg0AIAJBAXEgAmohAgsgA0EgaiQAIAIgAUIgiKdBgICAgHhxcr4LCwAgACABEPoEECELJwAgACAFOgAQIAAgBDgCDCAAIAM4AgggACACOAIEIAAgATgCACAAC4oBAQN/QdicBEHYnAQoAgBBAWoiBTYCACAAIAU2AgAgAwRAA0AgAiAEQQN0aiIGKAIARQRAIAYgBTYCACACIARBA3RqIgAgATYCBCAAQQA2AgggAxACIAIPCyAEQQFqIgQgA0cNAAsLIAAgASACIANBBHRBCHIQyAIgA0EBdCIAEPkEIQEgABACIAELHwBB0JwEKAIARQRAQdScBCABNgIAQdCcBCAANgIACwu2DwIFfw5+IwBB0AJrIgUkACAEQv///////z+DIQogAkL///////8/gyEMIAIgBIVCgICAgICAgICAf4MhDSAEQjCIp0H//wFxIQgCQAJAIAJCMIinQf//AXEiCUH//wFrQYKAfk8EQCAIQf//AWtBgYB+Sw0BCyABUCACQv///////////wCDIg9CgICAgICAwP//AFQgD0KAgICAgIDA//8AURtFBEAgAkKAgICAgIAghCENDAILIANQIARC////////////AIMiAkKAgICAgIDA//8AVCACQoCAgICAgMD//wBRG0UEQCAEQoCAgICAgCCEIQ0gAyEBDAILIAEgD0KAgICAgIDA//8AhYRQBEAgAyACQoCAgICAgMD//wCFhFAEQEIAIQFCgICAgICA4P//ACENDAMLIA1CgICAgICAwP//AIQhDUIAIQEMAgsgAyACQoCAgICAgMD//wCFhFAEQEIAIQEMAgsgASAPhFAEQEKAgICAgIDg//8AIA0gAiADhFAbIQ1CACEBDAILIAIgA4RQBEAgDUKAgICAgIDA//8AhCENQgAhAQwCCyAPQv///////z9YBEAgBUHAAmogASAMIAEgDCAMUCIGG3kgBkEGdK18pyIGQQ9rEI0BQRAgBmshBiAFKQPIAiEMIAUpA8ACIQELIAJC////////P1YNACAFQbACaiADIAogAyAKIApQIgcbeSAHQQZ0rXynIgdBD2sQjQEgBiAHakEQayEGIAUpA7gCIQogBSkDsAIhAwsgBUGgAmogCkKAgICAgIDAAIQiEkIPhiADQjGIhCICQgBCgICAgLDmvIL1ACACfSIEQgAQiQEgBUGQAmpCACAFKQOoAn1CACAEQgAQiQEgBUGAAmogBSkDmAJCAYYgBSkDkAJCP4iEIgRCACACQgAQiQEgBUHwAWogBEIAQgAgBSkDiAJ9QgAQiQEgBUHgAWogBSkD+AFCAYYgBSkD8AFCP4iEIgRCACACQgAQiQEgBUHQAWogBEIAQgAgBSkD6AF9QgAQiQEgBUHAAWogBSkD2AFCAYYgBSkD0AFCP4iEIgRCACACQgAQiQEgBUGwAWogBEIAQgAgBSkDyAF9QgAQiQEgBUGgAWogAkIAIAUpA7gBQgGGIAUpA7ABQj+IhEIBfSICQgAQiQEgBUGQAWogA0IPhkIAIAJCABCJASAFQfAAaiACQgBCACAFKQOoASAFKQOgASIPIAUpA5gBfCIEIA9UrXwgBEIBVq18fUIAEIkBIAVBgAFqQgEgBH1CACACQgAQiQEgBiAJIAhraiEGAn8gBSkDcCIQQgGGIhQgBSkDiAEiDkIBhiAFKQOAAUI/iIR8IgtC5+wAfSIVQiCIIgIgDEKAgICAgIDAAIQiFkIBhiABQj+IhCIMQiCIIgR+IhEgAUIBhiIPQiCIIgogCyAVVq0gCyAUVK0gBSkDeEIBhiAQQj+IhCAOQj+IfHx8QgF9IhBCIIgiC358Ig4gEVStIA4gDiAQQv////8PgyIQIAxC/////w+DIhR+fCIOVq18IAQgC358IAQgEH4iEyALIBR+fCIRIBNUrUIghiARQiCIhHwgDiAOIBFCIIZ8Ig5WrXwgDiAOIBVC/////w+DIhUgFH4iEyACIAp+fCIRIBNUrSARIBEgECAPQv7///8PgyITfnwiEVatfHwiDlatfCAOIAQgFX4iFyALIBN+fCIEIAIgFH58IgsgCiAQfnwiEEIgiCALIBBWrSAEIBdUrSAEIAtWrXx8QiCGhHwiBCAOVK18IAQgESACIBN+IgIgCiAVfnwiCkIgiCACIApWrUIghoR8IgIgEVStIAIgEEIghnwgAlStfHwiAiAEVK18IgRC/////////wBYBEAgBUHQAGogAiAEIAMgEhCJASABQjGGIAUpA1h9IAUpA1AiAUIAUq19IQtCACABfSEKIAZB/v8AagwBCyAFQeAAaiAEQj+GIAJCAYiEIgIgBEIBiCIEIAMgEhCJASABQjCGIAUpA2h9IAUpA2AiDEIAUq19IQtCACAMfSEKIAEhDyAWIQwgBkH//wBqCyIGQf//AU4EQCANQoCAgICAgMD//wCEIQ1CACEBDAELAn4gBkEASgRAIAtCAYYgCkI/iIQhCyAEQv///////z+DIAatQjCGhCEMIApCAYYMAQsgBkGPf0wEQEIAIQEMAgsgBUFAayACIARBASAGaxCFAiAFQTBqIA8gDCAGQfAAahCNASAFQSBqIAMgEiAFKQNAIgIgBSkDSCIMEIkBIAUpAzggBSkDKEIBhiAFKQMgIgFCP4iEfSAFKQMwIgQgAUIBhiIBVK19IQsgBCABfQshBCAFQRBqIAMgEkIDQgAQiQEgBSADIBJCBUIAEIkBIAwgAiACIAMgAkIBgyIBIAR8IgNUIAsgASADVq18IgEgElYgASASURutfCICVq18IgQgAiACIARCgICAgICAwP//AFQgAyAFKQMQViABIAUpAxgiBFYgASAEURtxrXwiAlatfCIEIAIgBEKAgICAgIDA//8AVCADIAUpAwBWIAEgBSkDCCIDViABIANRG3GtfCIBIAJUrXwgDYQhDQsgACABNwMAIAAgDTcDCCAFQdACaiQAC4sMAQZ/IAAgAWohBQJAAkAgACgCBCICQQFxDQAgAkEDcUUNASAAKAIAIgIg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NgIAIAFCABDDAQtCACEUCyAAIBU3AwAgACAUNwMIIAxBMGokAAvQBgIEfwN+IwBBgAFrIgUkAAJAAkACQCADIARCAEIAEIYCRQ0AAn8gBEL///////8/gyEJAn8gBEIwiKdB//8BcSIGQf//AUcEQEEEIAYNARpBAkEDIAMgCYRQGwwCCyADIAmEUAsLIQcgAkIwiKciCEH//wFxIgZB//8BRg0AIAcNAQsgBUEQaiABIAIgAyAEEF4gBSAFKQMQIgEgBSkDGCICIAEgAhD7BCAFKQMIIQIgBSkDACEEDAELIAEgAkL///////8/gyAGrUIwhoQiCiADIARC////////P4MgBEIwiKdB//8BcSIHrUIwhoQiCRCGAkEATARAIAEgCiADIAkQhgIEQCABIQQMAgsgBUHwAGogASACQgBCABBeIAUpA3ghAiAFKQNwIQQMAQsgBgR+IAEFIAVB4ABqIAEgCkIAQoCAgICAgMC7wAAQXiAFKQNoIgpCMIinQfgAayEGIAUpA2ALIQQgB0UEQCAFQdAAaiADIAlCAEKAgICAgIDAu8AAEF4gBSkDWCIJQjCIp0H4AGshByAFKQNQIQMLIAlC////////P4NCgICAgICAwACEIQkgCkL///////8/g0KAgICAgIDAAIQhCiAGIAdKBEADQAJ+IAogCX0gAyAEVq19IgtCAFkEQCALIAQgA30iBIRQBEAgBUEgaiABIAJCAEIAEF4gBSkDKCECIAUpAyAhBAwFCyALQgGGIARCP4iEDAELIApCAYYgBEI/iIQLIQogBEIBhiEEIAZBAWsiBiAHSg0ACyAHIQYLAkAgCiAJfSADIARWrX0iCUIAUwRAIAohCQwBCyAJIAQgA30iBIRCAFINACAFQTBqIAEgAkIAQgAQXiAFKQM4IQIgBSkDMCEEDAELIAlC////////P1gEQANAIARCP4ghASAGQQFrIQYgBEIBhiEEIAEgCUIBhoQiCUKAgICAgIDAAFQNAAsLIAhBgIACcSEHIAZBAEwEQCAFQUBrIAQgCUL///////8/gyAGQfgAaiAHcq1CMIaEQgBCgICAgICAwMM/EF4gBSkDSCECIAUpA0AhBAwBCyAJQv///////z+DIAYgB3KtQjCGhCECCyAAIAQ3AwAgACACNwMIIAVBgAFqJAALvwIBAX8jAEHQAGsiBCQAAkAgA0GAgAFOBEAgBEEgaiABIAJCAEKAgICAgICA//8AEF4gBCkDKCECIAQpAyAhASADQf//AUkEQCADQf//AGshAwwCCyAEQRBqIAEgAkIAQoCAgICAgID//wAQXiADQf3/AiADQf3/AkgbQf7/AWshAyAEKQMYIQIgBCkDECEBDAELIANBgYB/Sg0AIARBQGsgASACQgBCgICAgICAgDkQXiAEKQNIIQIgBCkDQCEBIANB9IB+SwRAIANBjf8AaiEDDAELIARBMGogASACQgBCgICAgICAgDkQXiADQeiBfSADQeiBfUobQZr+AWohAyAEKQM4IQIgBCkDMCEBCyAEIAEgAkIAIANB//8Aaq1CMIYQXiAAIAQpAwg3AwggACAEKQMANwMAIARB0ABqJAALNQAgACABNwMAIAAgAkL///////8/gyAEQjCIp0GAgAJxIAJCMIinQf//AXFyrUIwhoQ3AwgLEAAgACABIAJBAEEAEIsFGgvEAgACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCABQQlrDhIACgsMCgsCAwQFDAsMDAoLBwgJCyACIAIoAgAiAUEEajYCACAAIAEoAgA2AgAPCwALIAIgAigCACIBQQRqNgIAIAAgATIBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATMBADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATAAADcDAA8LIAIgAigCACIBQQRqNgIAIAAgATEAADcDAA8LAAsgAiACKAIAQQdqQXhxIgFBCGo2AgAgACABKwMAOQMADwsgACACIAMRAgALDwsgAiACKAIAIgFBBGo2AgAgACABNAIANwMADwsgAiACKAIAIgFBBGo2AgAgACABNQIANwMADwsgAiACKAIAQQdqQXhxIgFBCGo2AgAgACABKQMANwMAC20BBH8gACgCACwAABDEAUUEQEEADwsDQCAAKAIAIQNBfyEBIAJBzJmz5gBNBEBBfyADLAAAQTBrIgQgAkEKbCIBaiAEQf////8HIAFrShshAQsgACADQQFqNgIAIAEhAiADLAABEMQBDQALIAILlxMCEX8BfiMAQdAAayIHJAAgByABNgJMIAdBN2ohFiAHQThqIRJBACEBAkACQAJAAkADQCABQf////8HIA1rSg0BIAEgDWohDSAHKAJMIgshAQJAAkACQCALLQAAIggEQANAAkACQCAIQf8BcSIIRQRAIAEhCAwBCyAIQSVHDQEgASEIA0AgAS0AAUElRw0BIAcgAUECaiIKNgJMIAhBAWohCCABLQACIQkgCiEBIAlBJUYNAAsLIAggC2siAUH/////ByANayIXSg0HIAAEQCAAIAsgARCKAQsgCCALRw0GQX8hEEEBIQggBygCTCwAARDEASEBIAcoAkwhCgJAIAFFDQAgCi0AAkEkRw0AIAosAAFBMGshEEEBIRRBAyEICyAHIAggCmoiATYCTEEAIQ4CQCABLAAAIhNBIGsiCkEfSwRAIAEhCAwBCyABIQhBASAKdCIJQYnRBHFFDQADQCAHIAFBAWoiCDYCTCAJIA5yIQ4gASwAASITQSBrIgpBIE8NASAIIQFBASAKdCIJQYnRBHENAAsLAkAgE0EqRgRAIAcCfwJAIAgsAAEQxAFFDQAgBygCTCIBLQACQSRHDQAgASwAAUECdCAEakHAAWtBCjYCACABLAABQQN0IANqQYADaygCACEPQQEhFCABQQNqDAELIBQNBkEAIRRBACEPIAAEQCACIAIoAgAiAUEEajYCACABKAIAIQ8LIAcoAkxBAWoLIgE2AkwgD0EATg0BQQAgD2shDyAOQYDAAHIhDgwBCyAHQcwAahCJBSIPQQBIDQggBygCTCEBC0EAIQhBfyEJAn9BACABLQAAQS5HDQAaIAEtAAFBKkYEQCAHAn8CQCABLAACEMQBRQ0AIAcoAkwiAS0AA0EkRw0AIAEsAAJBAnQgBGpBwAFrQQo2AgAgASwAAkEDdCADakGAA2soAgAhCSABQQRqDAELIBQNBiAABH8gAiACKAIAIgFBBGo2AgAgASgCAAVBAAshCSAHKAJMQQJqCyIBNgJMIAlBf3NBH3YMAQsgByABQQFqNgJMIAdBzABqEIkFIQkgBygCTCEBQQELIRUDQCAIIRFBHCEMIAEsAABB+wBrQUZJDQkgByABQQFqIhM2AkwgASwAACEIIBMhASAIIBFBOmxqQZ/5AmotAAAiCEEBa0EISQ0ACwJAAkAgCEEbRwRAIAhFDQsgEEEATgRAIAQgEEECdGogCDYCACAHIAMgEEEDdGopAwA3A0AMAgsgAEUNCCAHQUBrIAggAiAGEIgFIAcoAkwhEwwCCyAQQQBODQoLQQAhASAARQ0HCyAOQf//e3EiCiAOIA5BgMAAcRshCEEAIQ5B7toBIRAgEiEMAkACQAJAAn8CQAJAAkACQAJ/AkACQAJAAkACQAJAAkAgE0EBaywAACIBQV9xIAEgAUEPcUEDRhsgASARGyIBQdgAaw4hBBQUFBQUFBQUDhQPBg4ODhQGFBQUFAIFAxQUCRQBFBQEAAsCQCABQcEAaw4HDhQLFA4ODgALIAFB0wBGDQkMEwsgBykDQCEYQe7aAQwFC0EAIQECQAJAAkACQAJAAkACQCARQf8BcQ4IAAECAwQaBQYaCyAHKAJAIA02AgAMGQsgBygCQCANNgIADBgLIAcoAkAgDaw3AwAMFwsgBygCQCANOwEADBYLIAcoAkAgDToAAAwVCyAHKAJAIA02AgAMFAsgBygCQCANrDcDAAwTCyAJQQggCUEISxshCSAIQQhyIQhB+AAhAQsgEiEKIAFBIHEhESAHKQNAIhhQRQRAA0AgCkEBayIKIBinQQ9xQbD9AmotAAAgEXI6AAAgGEIPViELIBhCBIghGCALDQALCyAKIQsgCEEIcUUgBykDQFByDQMgAUEEdkHu2gFqIRBBAiEODAMLIBIhASAHKQNAIhhQRQRAA0AgAUEBayIBIBinQQdxQTByOgAAIBhCB1YhCiAYQgOIIRggCg0ACwsgASELIAhBCHFFDQIgCSASIAtrIgFBAWogASAJSBshCQwCCyAHKQNAIhhCAFMEQCAHQgAgGH0iGDcDQEEBIQ5B7toBDAELIAhBgBBxBEBBASEOQe/aAQwBC0Hw2gFB7toBIAhBAXEiDhsLIRAgGCASEKICIQsLIBVBACAJQQBIGw0OIAhB//97cSAIIBUbIQggBykDQCIYQgBSIAlyRQRAIBIiCyEMQQAhCQwMCyAJIBhQIBIgC2tqIgEgASAJSBshCQwLCyAHKAJAIgFB5JYCIAEbIgtBACAJQf////8HIAlB/////wdJGyIIENwDIgEgC2sgCCABGyIBIAtqIQwgCUEATgRAIAohCCABIQkMCwsgCiEIIAEhCSAMLQAADQ0MCgsgCQRAIAcoAkAMAgtBACEBIABBICAPQQAgCBCOAQwCCyAHQQA2AgwgByAHKQNAPgIIIAcgB0EIaiIBNgJAQX8hCSABCyEMQQAhAQJAA0AgDCgCACIKRQ0BIAdBBGogChD+BCILQQBIIgogCyAJIAFrS3JFBEAgDEEEaiEMIAkgASALaiIBSw0BDAILCyAKDQ0LQT0hDCABQQBIDQsgAEEgIA8gASAIEI4BIAFFBEBBACEBDAELQQAhCSAHKAJAIQwDQCAMKAIAIgpFDQEgB0EEaiAKEP4EIgogCWoiCSABSw0BIAAgB0EEaiAKEIoBIAxBBGohDCABIAlLDQALCyAAQSAgDyABIAhBgMAAcxCOASAPIAEgASAPSBshAQwICyAVQQAgCUEASBsNCEE9IQwgACAHKwNAIA8gCSAIIAEgBREuACIBQQBODQcMCQsgByAHKQNAPAA3QQEhCSAWIQsgCiEIDAQLIAcgAUEBaiIKNgJMIAEtAAEhCCAKIQEMAAsACyAADQcgFEUNAkEBIQEDQCAEIAFBAnRqKAIAIgAEQCADIAFBA3RqIAAgAiAGEIgFQQEhDSABQQFqIgFBCkcNAQwJCwtBASENIAFBCk8NBwNAIAQgAUECdGooAgANASABQQFqIgFBCkcNAAsMBwtBHCEMDAQLIAkgDCALayIRIAkgEUobIgpB/////wcgDmtKDQJBPSEMIA8gCiAOaiIJIAkgD0gbIgEgF0oNAyAAQSAgASAJIAgQjgEgACAQIA4QigEgAEEwIAEgCSAIQYCABHMQjgEgAEEwIAogEUEAEI4BIAAgCyAREIoBIABBICABIAkgCEGAwABzEI4BDAELC0EAIQ0MAwtBPSEMC0HAjgQgDDYCAAtBfyENCyAHQdAAaiQAIA0L1AIBBH8jAEHQAWsiBSQAIAUgAjYCzAEgBUGgAWoiAkEAQSgQOhogBSAFKALMATYCyAECQEEAIAEgBUHIAWogBUHQAGogAiADIAQQigVBAEgEQEF/IQEMAQsgACgCTEEATiEGIAAoAgAhByAAKAJIQQBMBEAgACAHQV9xNgIACwJ/AkACQCAAKAIwRQRAIABB0AA2AjAgAEEANgIcIABCADcDECAAKAIsIQggACAFNgIsDAELIAAoAhANAQtBfyAAEJwFDQEaCyAAIAEgBUHIAWogBUHQAGogBUGgAWogAyAEEIoFCyECIAgEQCAAQQBBACAAKAIkEQQAGiAAQQA2AjAgACAINgIsIABBADYCHCAAKAIUIQEgAEIANwMQIAJBfyABGyECCyAAIAAoAgAiACAHQSBxcjYCAEF/IAIgAEEgcRshASAGRQ0ACyAFQdABaiQAIAELfwIBfwF+IAC9IgNCNIinQf8PcSICQf8PRwR8IAJFBEAgASAARAAAAAAAAAAAYQR/QQAFIABEAAAAAAAA8EOiIAEQjAUhACABKAIAQUBqCzYCACAADwsgASACQf4HazYCACADQv////////+HgH+DQoCAgICAgIDwP4S/BSAACwvaAQECfwJAIAFB/wFxIgMEQCAAQQNxBEADQCAALQAAIgJFIAIgAUH/AXFGcg0DIABBAWoiAEEDcQ0ACwsCQCAAKAIAIgJBf3MgAkGBgoQIa3FBgIGChHhxDQAgA0GBgoQIbCEDA0AgAiADcyICQX9zIAJBgYKECGtxQYCBgoR4cQ0BIAAoAgQhAiAAQQRqIQAgAkGBgoQIayACQX9zcUGAgYKEeHFFDQALCwNAIAAiAi0AACIDBEAgAkEBaiEAIAMgAUH/AXFHDQELCyACDwsgABCiASAAag8LIAALCwAgACABQQEQ+gELOgAgACgCTEEATgRAIABCAEEAEIgDIAAgACgCAEFfcTYCAA8LIABCAEEAEIgDIAAgACgCAEFfcTYCAAsbAEEAIABrIABxQanMrztsQRt2QeDoAmosAAALqQEBBX8jAEGAAmsiBCQAAkAgAkECSA0AIAEgAkECdGoiByAENgIAIABFDQAgBCEDA0AgAyABKAIAIABBgAIgAEGAAkkbIgUQQBpBACEDA0AgASADQQJ0aiIGKAIAIAEgA0EBaiIDQQJ0aigCACAFEEAaIAYgBigCACAFajYCACACIANHDQALIABBgQJJDQEgACAFayEAIAcoAgAhAwwACwALIARBgAJqJAALKQEBfyAAKAIAQQFrEJAFIgEEfyABBSAAKAIEEJAFIgBBIGpBACAAGwsL1AQBB38jAEHQAWsiBCQAIARCATcDCAJAIAEgAmwiB0UNACAEIAI2AhAgBCACNgIUQQAgAmshCSACIgEhCEECIQUDQCAEQRBqIAVBAnRqIAEiBiACIAhqaiIBNgIAIAVBAWohBSAGIQggASAHSQ0ACwJ/IAAgACAHaiAJaiIGTwRAQQAhBUEBIQFBAAwBC0EBIQVBASEBA0ACfyAFQQNxQQNGBEAgACACIAMgASAEQRBqENsDIARBCGpBAhCGAyABQQJqDAELAkAgBEEQaiABQQFrIghBAnRqKAIAIAYgAGtPBEAgACACIAMgBEEIaiABQQAgBEEQahCFAwwBCyAAIAIgAyABIARBEGoQ2wMLIAFBAUYEQCAEQQhqQQEQhANBAAwBCyAEQQhqIAgQhANBAQshASAEIAQoAggiB0EBciIFNgIIIAAgAmoiACAGSQ0ACyAHQQFLIQUgBCgCDEEARwshCCAAIAIgAyAEQQhqIAFBACAEQRBqEIUDQQEgAUEBRyAFciAIG0UNAANAAn8gAUEBTARAIARBCGoiBiAGEJIFIgYQhgMgBCgCCCEFIAEgBmoMAQsgBEEIaiIHQQIQhAMgBCAEKAIIQQdzNgIIIAdBARCGAyAAIAlqIgggBEEQaiIKIAFBAmsiBkECdGooAgBrIAIgAyAHIAFBAWtBASAKEIUDIAdBARCEAyAEIAQoAghBAXIiBTYCCCAIIAIgAyAHIAZBASAKEIUDIAYLIQEgACAJaiEAIAFBAUcNACAEKAIMIAVBAUdyDQALCyAEQdABaiQAC0YBAX8Cf0EAIABBF3ZB/wFxIgFB/wBJDQAaQQIgAUGWAUsNABpBAEEBQZYBIAFrdCIBQQFrIABxDQAaQQFBAiAAIAFxGwsLEwAgAEEBdEGAgIAIakGBgIAISQsVAQF/IwBBEGsiASAAOAIMIAEqAgwLEAAgAYwgASAAGxCWBSABlAsMACAAIACTIgAgAJULDAAgACAAKAIAEI4FC3ACAn8BfiAAKAIoIQJBASEBAkAgAEIAIAAtAABBgAFxBH9BAUECIAAoAhQgACgCHEYbBUEBCyACERMAIgNCAFMNACADIAAoAggiAQR/IABBBGoFIAAoAhwiAUUNASAAQRRqCygCACABa6x8IQMLIAMLKwEBfgJAIAGsIQMgACgCTEEASARAIAAgAyACEIgDDAELIAAgAyACEIgDCwtZAQF/IAAgACgCSCIBQQFrIAFyNgJIIAAoAgAiAUEIcQRAIAAgAUEgcjYCAEF/DwsgAEIANwIEIAAgACgCLCIBNgIcIAAgATYCFCAAIAEgACgCMGo2AhBBAAuVAwIDfwN8IwBBEGsiAyQAAkAgALwiBEH/////B3EiAkHan6TuBE0EQCABIAC7IgYgBkSDyMltMF/kP6JEAAAAAAAAOEOgRAAAAAAAADjDoCIFRAAAAFD7Ifm/oqAgBURjYhphtBBRvqKgIgc5AwAgB0QAAABg+yHpv2MhBAJ/IAWZRAAAAAAAAOBBYwRAIAWqDAELQYCAgIB4CyECIAQEQCABIAYgBUQAAAAAAADwv6AiBUQAAABQ+yH5v6KgIAVEY2IaYbQQUb6ioDkDACACQQFrIQIMAgsgB0QAAABg+yHpP2RFDQEgASAGIAVEAAAAAAAA8D+gIgVEAAAAUPsh+b+ioCAFRGNiGmG0EFG+oqA5AwAgAkEBaiECDAELIAJBgICA/AdPBEAgASAAIACTuzkDAEEAIQIMAQsgAyACIAJBF3ZBlgFrIgJBF3Rrvrs5AwggA0EIaiADIAJBAUEAEJ8FIQIgAysDACEFIARBAEgEQCABIAWaOQMAQQAgAmshAgwBCyABIAU5AwALIANBEGokACACC9oKAwR8BX8BfiMAQTBrIgckAAJAAkACQCAAvSILQiCIpyIGQf////8HcSIIQfrUvYAETQRAIAZB//8/cUH7wyRGDQEgCEH8souABE0EQCALQgBZBEAgASAARAAAQFT7Ifm/oCIARDFjYhphtNC9oCICOQMAIAEgACACoUQxY2IaYbTQvaA5AwhBASEGDAULIAEgAEQAAEBU+yH5P6AiAEQxY2IaYbTQPaAiAjkDACABIAAgAqFEMWNiGmG00D2gOQMIQX8hBgwECyALQgBZBEAgASAARAAAQFT7IQnAoCIARDFjYhphtOC9oCICOQMAIAEgACACoUQxY2IaYbTgvaA5AwhBAiEGDAQLIAEgAEQAAEBU+yEJQKAiAEQxY2IaYbTgPaAiAjkDACABIAAgAqFEMWNiGmG04D2gOQMIQX4hBgwDCyAIQbuM8YAETQRAIAhBvPvXgARNBEAgCEH8ssuABEYNAiALQgBZBEAgASAARAAAMH982RLAoCIARMqUk6eRDum9oCICOQMAIAEgACACoUTKlJOnkQ7pvaA5AwhBAyEGDAULIAEgAEQAADB/fNkSQKAiAETKlJOnkQ7pPaAiAjkDACABIAAgAqFEypSTp5EO6T2gOQMIQX0hBgwECyAIQfvD5IAERg0BIAtCAFkEQCABIABEAABAVPshGcCgIgBEMWNiGmG08L2gIgI5AwAgASAAIAKhRDFjYhphtPC9oDkDCEEEIQYMBAsgASAARAAAQFT7IRlAoCIARDFjYhphtPA9oCICOQMAIAEgACACoUQxY2IaYbTwPaA5AwhBfCEGDAMLIAhB+sPkiQRLDQELIAAgAESDyMltMF/kP6JEAAAAAAAAOEOgRAAAAAAAADjDoCIDRAAAQFT7Ifm/oqAiAiADRDFjYhphtNA9oiIEoSIFRBgtRFT7Iem/YyEJAn8gA5lEAAAAAAAA4EFjBEAgA6oMAQtBgICAgHgLIQYCQCAJBEAgBkEBayEGIANEAAAAAAAA8L+gIgNEMWNiGmG00D2iIQQgACADRAAAQFT7Ifm/oqAhAgwBCyAFRBgtRFT7Iek/ZEUNACAGQQFqIQYgA0QAAAAAAADwP6AiA0QxY2IaYbTQPaIhBCAAIANEAABAVPsh+b+ioCECCyABIAIgBKEiADkDAAJAIAhBFHYiCSAAvUI0iKdB/w9xa0ERSA0AIAEgAiADRAAAYBphtNA9oiIAoSIFIANEc3ADLooZozuiIAIgBaEgAKGhIgShIgA5AwAgCSAAvUI0iKdB/w9xa0EySARAIAUhAgwBCyABIAUgA0QAAAAuihmjO6IiAKEiAiADRMFJICWag3s5oiAFIAKhIAChoSIEoSIAOQMACyABIAIgAKEgBKE5AwgMAQsgCEGAgMD/B08EQCABIAAgAKEiADkDACABIAA5AwhBACEGDAELIAtC/////////weDQoCAgICAgICwwQCEvyEAQQAhBkEBIQkDQCAHQRBqIAZBA3RqAn8gAJlEAAAAAAAA4EFjBEAgAKoMAQtBgICAgHgLtyICOQMAIAAgAqFEAAAAAAAAcEGiIQBBASEGIAlBAXEhCkEAIQkgCg0ACyAHIAA5AyACQCAARAAAAAAAAAAAYgRAQQIhBgwBC0EBIQkDQCAJIgZBAWshCSAHQRBqIAZBA3RqKwMARAAAAAAAAAAAYQ0ACwsgB0EQaiAHIAhBFHZBlghrIAZBAWpBARCfBSEGIAcrAwAhACALQgBTBEAgASAAmjkDACABIAcrAwiaOQMIQQAgBmshBgwBCyABIAA5AwAgASAHKwMIOQMICyAHQTBqJAAgBgvEEQIDfBB/IwBBsARrIgkkACACIAJBA2tBGG0iCEEAIAhBAEobIhJBaGxqIQwgBEECdEGAywJqKAIAIg0gA0EBayILakEATgRAIAMgDWohCCASIAtrIQIDQCAJQcACaiAKQQN0aiACQQBIBHxEAAAAAAAAAAAFIAJBAnRBkMsCaigCALcLOQMAIAJBAWohAiAKQQFqIgogCEcNAAsLIAxBGGshD0EAIQggDUEAIA1BAEobIQogA0EATCEOA0ACQCAOBEBEAAAAAAAAAAAhBQwBCyAIIAtqIRFBACECRAAAAAAAAAAAIQUDQCAAIAJBA3RqKwMAIAlBwAJqIBEgAmtBA3RqKwMAoiAFoCEFIAJBAWoiAiADRw0ACwsgCSAIQQN0aiAFOQMAIAggCkYhAiAIQQFqIQggAkUNAAtBLyAMayEUQTAgDGshESAMQRlrIRUgDSEIAkADQCAJIAhBA3RqKwMAIQVBACECIAghCiAIQQBMIhBFBEADQCAJQeADaiACQQJ0agJ/An8gBUQAAAAAAABwPqIiBplEAAAAAAAA4EFjBEAgBqoMAQtBgICAgHgLtyIGRAAAAAAAAHDBoiAFoCIFmUQAAAAAAADgQWMEQCAFqgwBC0GAgICAeAs2AgAgCSAKQQFrIgpBA3RqKwMAIAagIQUgAkEBaiICIAhHDQALCwJ/IAUgDxDrASIFIAVEAAAAAAAAwD+inEQAAAAAAAAgwKKgIgWZRAAAAAAAAOBBYwRAIAWqDAELQYCAgIB4CyEOIAUgDrehIQUCQAJAAkACfyAPQQBMIhZFBEAgCEECdCAJaiICIAIoAtwDIgIgAiARdSICIBF0ayIKNgLcAyACIA5qIQ4gCiAUdQwBCyAPDQEgCEECdCAJaigC3ANBF3ULIgtBAEwNAgwBC0ECIQsgBUQAAAAAAADgP2YNAEEAIQsMAQtBACECQQAhCiAQRQRAA0AgCUHgA2ogAkECdGoiFygCACEQQf///wchEwJ/AkAgCg0AQYCAgAghEyAQDQBBAAwBCyAXIBMgEGs2AgBBAQshCiACQQFqIgIgCEcNAAsLAkAgFg0AQf///wMhAgJAAkAgFQ4CAQACC0H///8BIQILIAhBAnQgCWoiECAQKALcAyACcTYC3AMLIA5BAWohDiALQQJHDQBEAAAAAAAA8D8gBaEhBUECIQsgCkUNACAFRAAAAAAAAPA/IA8Q6wGhIQULIAVEAAAAAAAAAABhBEBBACEKIAghAgJAIAggDUwNAANAIAlB4ANqIAJBAWsiAkECdGooAgAgCnIhCiACIA1KDQALIApFDQAgDyEMA0AgDEEYayEMIAlB4ANqIAhBAWsiCEECdGooAgBFDQALDAMLQQEhAgNAIAIiCkEBaiECIAlB4ANqIA0gCmtBAnRqKAIARQ0ACyAIIApqIQoDQCAJQcACaiADIAhqIgtBA3RqIAhBAWoiCCASakECdEGQywJqKAIAtzkDAEEAIQJEAAAAAAAAAAAhBSADQQBKBEADQCAAIAJBA3RqKwMAIAlBwAJqIAsgAmtBA3RqKwMAoiAFoCEFIAJBAWoiAiADRw0ACwsgCSAIQQN0aiAFOQMAIAggCkgNAAsgCiEIDAELCwJAIAVBGCAMaxDrASIFRAAAAAAAAHBBZgRAIAlB4ANqIAhBAnRqAn8CfyAFRAAAAAAAAHA+oiIGmUQAAAAAAADgQWMEQCAGqgwBC0GAgICAeAsiArdEAAAAAAAAcMGiIAWgIgWZRAAAAAAAAOBBYwRAIAWqDAELQYCAgIB4CzYCACAIQQFqIQgMAQsCfyAFmUQAAAAAAADgQWMEQCAFqgwBC0GAgICAeAshAiAPIQwLIAlB4ANqIAhBAnRqIAI2AgALRAAAAAAAAPA/IAwQ6wEhBQJAIAhBAEgNACAIIQMDQCAJIAMiAEEDdGogBSAJQeADaiADQQJ0aigCALeiOQMAIANBAWshAyAFRAAAAAAAAHA+oiEFIAANAAsgCEEASA0AIAghAgNAIAggAiIAayEDRAAAAAAAAAAAIQVBACECA0ACQCACQQN0QeDgAmorAwAgCSAAIAJqQQN0aisDAKIgBaAhBSACIA1ODQAgAiADSSEMIAJBAWohAiAMDQELCyAJQaABaiADQQN0aiAFOQMAIABBAWshAiAAQQBKDQALCwJAAkACQAJAAkAgBA4EAQICAAQLRAAAAAAAAAAAIQYCQCAIQQBMDQAgCUGgAWogCEEDdGorAwAhBSAIIQIDQCAJQaABaiIDIAJBA3RqIAUgAyACQQFrIgBBA3RqIgMrAwAiByAHIAWgIgWhoDkDACADIAU5AwAgAkEBSyEDIAAhAiADDQALIAhBAkgNACAJQaABaiAIQQN0aisDACEFIAghAgNAIAlBoAFqIgMgAkEDdGogBSADIAJBAWsiAEEDdGoiAysDACIGIAYgBaAiBaGgOQMAIAMgBTkDACACQQJLIQMgACECIAMNAAtEAAAAAAAAAAAhBiAIQQFMDQADQCAGIAlBoAFqIAhBA3RqKwMAoCEGIAhBAkohACAIQQFrIQggAA0ACwsgCSsDoAEhBSALDQIgASAFOQMAIAkrA6gBIQUgASAGOQMQIAEgBTkDCAwDC0QAAAAAAAAAACEFIAhBAE4EQANAIAgiAEEBayEIIAUgCUGgAWogAEEDdGorAwCgIQUgAA0ACwsgASAFmiAFIAsbOQMADAILRAAAAAAAAAAAIQUgCEEATgRAIAghAwNAIAMiAEEBayEDIAUgCUGgAWogAEEDdGorAwCgIQUgAA0ACwsgASAFmiAFIAsbOQMAIAkrA6ABIAWhIQVBASECIAhBAEoEQANAIAUgCUGgAWogAkEDdGorAwCgIQUgAiAIRyEAIAJBAWohAiAADQALCyABIAWaIAUgCxs5AwgMAQsgASAFmjkDACAJKwOoASEFIAEgBpo5AxAgASAFmjkDCAsgCUGwBGokACAOQQdxCwsAIAAgAUEUEPoBC+gCAgN/A30gALwiAkH/////B3EiAUGAgIDkBE8EQCAAQ9oPyT8gAJggALxB/////wdxQYCAgPwHSxsPCwJAAn8gAUH////2A00EQEF/IAFBgICAzANPDQEaDAILIACLIQAgAUH//9/8A00EQCABQf//v/kDTQRAIAAgAJJDAACAv5IgAEMAAABAkpUhAEEADAILIABDAACAv5IgAEMAAIA/kpUhAEEBDAELIAFB///vgARNBEAgAEMAAMC/kiAAQwAAwD+UQwAAgD+SlSEAQQIMAQtDAACAvyAAlSEAQQMLIQMgACAAlCIFIAWUIgQgBENHEtq9lEOYyky+kpQhBiAFIAQgBEMlrHw9lEMN9RE+kpRDqaqqPpKUIQQgAUH////2A00EQCAAIAAgBiAEkpSTDwsgA0ECdCIBQeDKAmoqAgAgACAGIASSlCABQfDKAmoqAgCTIACTkyIAIACMIAJBAE4bIQALIAALnQQAQZDgA0Hz9wEQLEGo4ANB8u0BQQFBAUEAECtBtOADQYHrAUEBQYB/Qf8AEAdBzOADQfrqAUEBQYB/Qf8AEAdBwOADQfjqAUEBQQBB/wEQB0HY4ANB4eEBQQJBgIB+Qf//ARAHQeTgA0HY4QFBAkEAQf//AxAHQfDgA0Hw4QFBBEGAgICAeEH/////BxAHQfzgA0Hn4QFBBEEAQX8QB0GI4QNBgPABQQRBgICAgHhB/////wcQB0GU4QNB9+8BQQRBAEF/EAdBoOEDQaXkAUKAgICAgICAgIB/Qv///////////wAQ9AZBrOEDQaTkAUIAQn8Q9AZBuOEDQZrkAUEEEBVBxOEDQaz0AUEIEBVBiJ4CQZLwARAUQeDEAkGakgIQFEG4xQJBBEGF8AEQDUGUxgJBAkGe8AEQDUHwxgJBBEGt8AEQDUH0ngJBwO4BECpBqMcCQQBB1ZECEAFB0McCQQBBu5ICEAFB+McCQQFB85ECEAFBoMgCQQJB5Y4CEAFByMgCQQNBhI8CEAFB8MgCQQRBrI8CEAFBmMkCQQVByY8CEAFBwMkCQQRB4JICEAFB6MkCQQVB/pICEAFB0McCQQBBr5ACEAFB+McCQQFBjpACEAFBoMgCQQJB8ZACEAFByMgCQQNBz5ACEAFB8MgCQQRBtJECEAFBmMkCQQVBkpECEAFBkMoCQQZB748CEAFBuMoCQQdBpZMCEAEL7hIBFX8jAEGAC2siDSQAIANBA3QiBUFgcUEEciEPIAJBAnQiB0FgcUECciESIAFBA3QiDEFgcUEEciETIAAoAuQDKAIYIRgCQCAAKAKEASIIQQBMBEAMAQsgDyAFQRxyIgpqQQF1IRQgEiAHQR5yIgtqQQF1IRUgEyAMQRxyIg5qQQF1IRYgACgCiAEiBSgCCCEXIAUoAgQhECAFKAIAIRFB/////wchDANAAn8gBCARai0AACIFIBNIBEAgBSAOa0EBdCIHIAdsIQcgBSATa0EBdCIFIAVsDAELIAUgDkoEQCAFIBNrQQF0IgcgB2whByAFIA5rQQF0IgUgBWwMAQsCfyAFIBZMBEAgBSAOa0EBdCIFIAVsDAELIAUgE2tBAXQiBSAFbAshB0EACyEGAn8gBCAQai0AACIFIBJIBEAgBiAFIBJrQQNsIgYgBmxqIQYgBSALa0EDbCIFIAVsDAELIAUgC0oEQCAGIAUgC2tBA2wiBiAGbGohBiAFIBJrQQNsIgUgBWwMAQsgBSAVTARAIAUgC2tBA2wiBSAFbAwBCyAFIBJrQQNsIgUgBWwLIAdqIQcCfyAEIBdqLQAAIgUgD0gEQCAGIAUgD2siBiAGbGohBiAFIAprIgUgBWwMAQsgBSAKSgRAIAYgBSAKayIGIAZsaiEGIAUgD2siBSAFbAwBCyAFIBRMBEAgBSAKayIFIAVsDAELIAUgD2siBSAFbAshCSANQYADaiAEQQJ0aiAGNgIAIAcgCWoiBSAMIAUgDEgbIQwgBEEBaiIEIAhHDQALIAhBAXEhBQJAIAhBAUYEQEEAIQtBACEEDAELIAhBfnEhB0EAIQtBACEEQQAhBgNAIAwgDUGAA2ogBEECdGooAgBOBEAgDUGAAWogC2ogBDoAACALQQFqIQsLIAwgDUGAA2ogBEEBciIIQQJ0aigCAE4EQCANQYABaiALaiAIOgAAIAtBAWohCwsgBEECaiEEIAZBAmoiBiAHRw0ACwsgBUUNACANQYADaiAEQQJ0aigCACAMSg0AIA1BgAFqIAtqIAQ6AAAgC0EBaiELC0H/ACEGIA1BgANqIQQDQCAEQv/////3/////wA3AhggBEL/////9/////8ANwIQIARC//////f/////ADcCCCAEQv/////3/////wA3AgAgBEEgaiEEIAZBB0YhBSAGQQhrIQYgBUUNAAsgC0EASgRAQQAhFgNAIA8gDUGAAWogFmotAAAiCiAAKAKIASIHKAIIai0AAGsiCEEEdCIFQcACaiEOIAVBwAFqIRQgBUFAayEVIBMgBygCACAKai0AAGsiCUEGdCIXQYACaiEQQQchBSANIgZBgANqIQQgEiAHKAIEIApqLQAAayIRQcgAbEGQAWoiDCEHIBFBA2wiESARbCAJQQF0IgkgCWxqIAggCGxqIhEhCQNAIAQoAgAgCUoEQCAEIAk2AgAgBiAKOgAACyAJIBVqIgggBCgCBEgEQCAEIAg2AgQgBiAKOgABCyAIIBRqIgggBCgCCEgEQCAEIAg2AgggBiAKOgACCyAIIA5qIgggBCgCDEgEQCAEIAg2AgwgBiAKOgADCyAFIghBAWshBSAHIAlqIQkgBkEEaiEGIARBEGohBCAHQaACaiEHIAgNAAtBByEFIAwhByAQIBFqIhAhCQNAIAQoAgAgCUoEQCAEIAk2AgAgBiAKOgAACyAJIBVqIgggBCgCBEgEQCAEIAg2AgQgBiAKOgABCyAIIBRqIgggBCgCCEgEQCAEIAg2AgggBiAKOgACCyAIIA5qIgggBCgCDEgEQCAEIAg2AgwgBiAKOgADCyAFIghBAWshBSAHIAlqIQkgBkEEaiEGIARBEGohBCAHQaACaiEHIAgNAAtBByEFIAwhByAQIBdqQYAGaiIQIQkDQCAEKAIAIAlKBEAgBCAJNgIAIAYgCjoAAAsgCSAVaiIIIAQoAgRIBEAgBCAINgIEIAYgCjoAAQsgCCAUaiIIIAQoAghIBEAgBCAINgIIIAYgCjoAAgsgCCAOaiIIIAQoAgxIBEAgBCAINgIMIAYgCjoAAwsgBSIIQQFrIQUgByAJaiEJIAZBBGohBiAEQRBqIQQgB0GgAmohByAIDQALIBAgF2pBgApqIQlBByEFA0AgBCgCACAJSgRAIAQgCTYCACAGIAo6AAALIAkgFWoiByAEKAIESARAIAQgBzYCBCAGIAo6AAELIAcgFGoiByAEKAIISARAIAQgBzYCCCAGIAo6AAILIAcgDmoiByAEKAIMSARAIAQgBzYCDCAGIAo6AAMLIAUiB0EBayEFIAkgDGohCSAGQQRqIQYgBEEQaiEEIAxBoAJqIQwgBw0ACyAWQQFqIhYgC0cNAAsLIAFBfHEhBUEAIQcgDSEEIANBfHFBAXQhACACQXhxIgNBAXJBBnQhDCADQQJyQQZ0IQYgA0EDckEGdCEIIANBBHJBBnQhCSADQQVyQQZ0IQogA0EGckEGdCELIAJBB3JBBnQhDwNAIBggBSAHakECdGooAgAiASADQQZ0aiAAaiICIAQtAABBAWo7AQAgAiAELQABQQFqOwECIAIgBC0AAkEBajsBBCACIAQtAANBAWo7AQYgASAMaiAAaiICIAQtAARBAWo7AQAgAiAELQAFQQFqOwECIAIgBC0ABkEBajsBBCACIAQtAAdBAWo7AQYgASAGaiAAaiICIAQtAAhBAWo7AQAgAiAELQAJQQFqOwECIAIgBC0ACkEBajsBBCACIAQtAAtBAWo7AQYgASAIaiAAaiICIAQtAAxBAWo7AQAgAiAELQANQQFqOwECIAIgBC0ADkEBajsBBCACIAQtAA9BAWo7AQYgASAJaiAAaiICIAQtABBBAWo7AQAgAiAELQARQQFqOwECIAIgBC0AEkEBajsBBCACIAQtABNBAWo7AQYgASAKaiAAaiICIAQtABRBAWo7AQAgAiAELQAVQQFqOwECIAIgBC0AFkEBajsBBCACIAQtABdBAWo7AQYgASALaiAAaiICIAQtABhBAWo7AQAgAiAELQAZQQFqOwECIAIgBC0AGkEBajsBBCACIAQtABtBAWo7AQYgASAPaiAAaiIBIAQtABxBAWo7AQAgASAELQAdQQFqOwECIAEgBC0AHkEBajsBBCABIAQtAB9BAWo7AQYgBEEgaiEEIAdBAWoiB0EERw0ACyANQYALaiQAC8sDAQR/IAAoAuQDIABBAUH8DyAAKAIEKAIAEQQAIgBB/AdqIgE2AiggAEL/////DzcC+AcgAEKBgICAIDcCgAggAEKDgICAwAA3AogIIABC/f///283AvAHIABChYCAgOAANwKQCCAAQvv///9PNwLoByAAQoeAgICAATcCmAggAEL5////r383AuAHIABCiYCAgKABNwKgCCAAQvf///+PfzcC2AcgAEKLgICAwAE3AqgIIABC9f///+9+NwLQByAAQo2AgIDgATcCsAggAELz////z343AsgHIABBDzYCuAggAELx////r343AsAHQRAhAkEQIQMDQCABIANBAnQiAGogAjYCACABIABrQQAgAmsiBDYCACABIABBBHJqIAI2AgAgASADQX9zQQJ0aiAENgIAIAJBAWohAkEwIQAgA0ECaiIDQTBHDQALA0AgASAAQQJ0IgJqQSA2AgAgASACa0FgNgIAIAEgAkEEcmpBIDYCACABIABBf3NBAnRqQWA2AgAgASACQQhyakEgNgIAIAFBfiAAa0ECdGpBYDYCACABIAJBDHJqQSA2AgAgAUF9IABrQQJ0akFgNgIAIABBBGoiAEGAAkcNAAsL9wIBCn8gACgC5AMiBCAAKAJYIgFBAUYiAjYCHCAEIABBAUH+BUGAAiACGyAAKAJ4IAAoAgQoAggRCAA2AhggACgCeEEASgRAIAQoAhQhBiABQQFHIQgDQCAGIAQgB0ECdCIBaigCICICbSEGIAhFBEAgBCgCGCABaiIDIAMoAgBB/wFqNgIACyACQf4BaiACQQFrIglBAXQiCm0hBSAEKAIYIAFqKAIAIQFBACECQQAhAwNAIAMgBUoEQANAIAMgAkEBaiICQQF0QQFyQf8BbCAJaiAKbSIFSg0ACwsgASADaiACIAZsOgAAIANBAWoiA0GAAkcNAAsgCEUEQEEBIQIDQCABIAJrIgUgAS0AADoAACABIAJqIgMgAS0A/wE6AP8BIAEgAkF/c2ogAS0AADoAACADIAEtAP8BOgCAAiAFQQJrIAEtAAA6AAAgAyABLQD/AToAgQIgAkEDaiICQYACRw0ACwsgB0EBaiIHIAAoAnhIDQALCwsYACAAKAIAIgFBMzYCFCAAIAEoAgARAQAL+gMB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IwBBIGsiAyQAIAAQNSICIANBCGogACAAEENBAWoQowMgABBDIAIQnQMiAigCCCABEOACIAIgAigCCEEIajYCCCAAIAIQogMgAhChAyADQSBqJAALtAQBCX8gABC5AiECIAAQ5gIhAyMAQSBrIgYkACAGIAM2AhAgBiACNgIYIAZBEGogBkEYahCfAyEFIwBBEGsiBCQAIAQgAzYCACAEIAI2AgggBUECTgRAIAQoAgghAyAEENIBKAIAIQEjAEEQayICJAAgAiADKQIANwMIIAMgASkCADcCACABIAJBCGopAgA3AgAgAkEQaiQAIAQoAgghAiAEKAIAGiMAQTBrIgEkACABIAI2AiAgASACNgIoIAFBIGogAUEoahCfAyECAkAgBUEBayIFQQJIDQAgBUECa0EBdiIJIAJIDQAgASABQShqIAJBAXQiA0EBciICEPYBNgIYAkAgA0ECaiIDIAVODQAgAUEYaiIHKAIAIQggASAHQQEQ9gE2AhAgCCABKAIQEKkCRQ0AIAFBGGoQpAEaIAMhAgsgASgCGCABKAIgEKkCDQAgASABKAIgKQIANwMQA0ACQCABKAIgIAEoAhgpAgA3AgAgASABKAIYNgIgIAIgCUoNACABIAFBKGogAkEBdCIDQQFyIgIQ9gE2AhgCQCADQQJqIgMgBU4NACABQRhqIgcoAgAhCCABIAdBARD2ATYCCCAIIAEoAggQqQJFDQAgAUEYahCkARogAyECCyABKAIYIAFBEGoQqQJFDQELCyABKAIgIAFBEGopAgA3AgALIAFBMGokAAsgBEEQaiQAIAZBIGokACAAKAIEQQhrIQIgABBDIQMgACACEKkDIAAgAxCYBAu5AgIBfQF/IAIgARDqBSIDi2AiBEUEQCAAQwAAgD8gA5UiAiABKgIQIAEqAhQgASoCHCABKgIgEKUBlDgCACAAIAIgASoCCCABKgIEIAEqAiAgASoCHBClAZQ4AgQgACACIAEqAgQgASoCCCABKgIQIAEqAhQQpQGUOAIIIAAgAiABKgIUIAEqAgwgASoCICABKgIYEKUBlDgCDCAAIAIgASoCACABKgIIIAEqAhggASoCIBClAZQ4AhAgACACIAEqAgggASoCACABKgIUIAEqAgwQpQGUOAIUIAAgAiABKgIMIAEqAhAgASoCGCABKgIcEKUBlDgCGCAA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OQPABiAEIAsgDaI5A7gGIAQgCiANojkDsAYgBEEAQcAAEDoiAkIANwNIIAJBQGtCgICAgICAgPi/fzcDACACQgA3A1AgAkIANwNYIAJCADcDYCACQoCAgICAgID4PzcDaCACQfAAakEAQTAQOhogAkKAgICAgICA+D83A6ABIAJBqAFqQQBByAAQOhogAkKAgICAgICA+L9/NwPwASACQfgBakEAQTAQOhogAkIANwOwAiACQoCAgICAgID4v383A6gCIAJCADcDuAIgAkIANwPAAiACQgA3A8gCIAJCgICAgICAgPg/NwPQAiACQdgCakEAQfAAEDoaIAJCgICAgICAgPg/NwPIAyACQdADakEAQTAQOhogAkKAgICAgICA+D83A4AEIAJBiARqQQBBMBA6GiACQoCAgICAgID4PzcDuAQDQEEAIQMgBkEDRwRAA0AgA0EGRwRAIANBA3QiCCAHIAZBMGxqaiEJQQAhAkQAAAAAAAAAACEKA0AgAkEMRwRAIARBwARqIAZB4ABsaiACQQN0aisDACAEIAJBMGxqIAhqKwMAoiAKoCEKIAJBAWohAgwBCwsgCSAKOQMAIANBAWohAwwBCwsgBkEBaiEGDAELCyAEQeAGaiQAQX8hAwJAIAErA1ggASsDUCAFKwMYIgyiIAErA0AiCyAFKwMIIg6iIAUrAxAiDyABKwNIoqCgoCIKRAAAAAAAAAAAYgR/IAErAyAhECABKwMoIREgASsDMCESIAErAzghEyAFIAErAwAiDSAKoiABKwMQIAyiIA0gDqIgASsDCCAPoqCgIAErAxigIg0gC6KhIAogCqIiC6M5AyAgBSABKwMIIAqiIA0gASsDSKKhIAujOQMoIAUgASsDECAKoiANIAErA1CioSALozkDMCAFIAErAyAgCqIgEyASIAyiIBAgDqIgDyARoqCgoCIMIAErA0CioSALozkDOCAFIAErAyggCqIgDCABKwNIoqEgC6M5A0AgBSABKwMwIAqiIAwgASsDUKKhIAujOQNIQQAFQX8LQQBOBEBBACECA0BBACEDIAJBAkYNAgNAIANBBkcEQCADQQN0IgQgACACQTBsamohBkEAIQFEAAAAAAAAAAAhCgNAIAFBA0cEQCAFQSBqIAJBGGxqIAFBA3RqKwMAIAVB0ABqIAFBMGxqIARqKwMAoiAKoCEK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AjYCBCAAEDUgAiABQRRsajYCACAAQQAQ9QYLVgEBfyMAQRBrIgQkACAEIAAgAxC7BCEDIAAQNSEAA0AgASACRwRAIAAgAygCBCABELcDIAMgAygCBEEUajYCBCABQRRqIQEMAQsLIAMQbyAEQRBqJAALJgAgACgCABogACgCACAAENsBahogACgCABogACgCACAAEJUBahoLBAAgAQshAQF/IAEgAGshAyAAIAFHBEAgAiAAIAMQywILIAIgA2oLBwAgASAAawtOAQF/IwBBEGsiBCQAIAQgACADEK8DIQMgABA1GiACIAFrIgBBAEoEQCADKAIEIAEgABBAGiADIAMoAgQgAGo2AgQLIAMQbyAEQRBqJAALFwAgAEIANwIAIABBAToAECAAQgA3AggLLAAgACgCABogACgCACAAENwBQRRsahogACgCABogACgCACAAEIEBQRRsahoLUwEDfyMAQRBrIgMkACADIAAgARC7BCICKAIEIQEgAigCCCEEA0AgASAERgRAIAIQbyADQRBqJAAFIAAQNRogARChBiACIAFBFGoiATYCBAwBCwsLDAAgACgCABogARA0CwoAIAFBBGoQ0QELKQEBfwNAIAJBCEZFBEAgASACaiAAIAJrLQAHOgAAIAJBAWohAgwBCwsLKgEBfyMAQRBrIgIkACACQQhqIAEQigQiASAAEIIEIAEQ0QEgAkEQaiQACxkBAX8gABCBASECIAAgARCgBSAAIAIQogYLLAEBfyMAQRBrIgIkACACIAE2AgwgACACQQxqIAJBCGoQsQYgAkEQaiQAIAAL2gQCCX8BfSMAQSBrIgUkACAFIAEQ3AI2AhAgBUEYaiEIIAVBEGohCSAFQQhqIQojAEEgayICJAAgABA+GiABKAIAIQYgABCPASEDIAJBADoAHwJAAkAgA0UNACAAIAYgAxBcIgcQPCgCACIERQ0AA0AgBCgCACIERQ0BIAYgBCgCBEcEQCAEKAIEIAMQXCAHRw0CCyAAEFogBEEIaiABENABRQ0ACwwBCyACQRBqIAAgBkG8zQEgCSAKEIEGIAAQPigCACEBIAAQWiEEAkAgAwRAIAFBAWqzIAQqAgAgA7OUXkUNAQsgAiADEOEBQQFzIANBAXRyNgIMIAICfyAAED4oAgBBAWqzIAAQWioCAJWNIgtDAACAT10gC0MAAAAAYHEEQCALqQwBC0EACzYCCCAAIAJBDGogAkEIahB7KAIAEIEEIAYgABCPASIDEFwhBwsCQCAAIAcQPCgCACIBRQRAIAIoAhAgAEEIaiIBKAIANgIAIAEgAigCEDYCACAAIAcQPCABNgIAIAIoAhAoAgBFDQEgAigCECEBIAAgAigCECgCACgCBCADEFwQPCABNgIADAELIAIoAhAgASgCADYCACABIAIoAhA2AgALIAJBEGoiARC4ASEEIAAQPiIAIAAoAgBBAWo2AgAgAkEBOgAfIAEoAgAhACABQQA2AgAgAARAIAEQSiIBLQAEBEAgASgCACAAQQhqEJcGCyAABEAgASgCABogABA0CwsLIAggAkEQaiAEEIIBIAJBH2oQsQIgAkEgaiQAIAgQcCEAIAVBIGokACAAQQRqCykBAX8DQCACQQRGRQRAIAEgAmogACACay0AAzoAACACQQFqIQIMAQsLC4IDAQR/AkACQAJAAkAgACgCGA4DAAABAgsgACgCLCIBQQAgAUEAShshA0EAIQEDQCABIANGDQMCQCAAIAFBCHRqIgJBNGooAgBBAEgNACACKwNQRAAAAAAAAOA/Y0UNACACQX82AjggAkF/NgI0IAJBBjYCnAILIAFBAWohAQwACwALIAAoAiwiAUEAIAFBAEobIQNBACEBA0AgASADRg0CAkAgACABQQh0aiICQTRqKAIAQQBIDQAgAisDUEQAAAAAAADgP2NFDQAgAkF/NgI8IAJBfzYCNCACQQY2ApwCCyABQQFqIQEMAAsACyAAKAIsIgFBACABQQBKGyEEQQAhAQNAIAEgBEYNAUEAIQMCQCAAIAFBCHRqIgJBOGooAgBBAEgNACACKwNYRAAAAAAAAOA/Y0UNACACQX82AjhBASEDCwJAIAIoAjxBAEgNACACKwNgRAAAAAAAAOA/Y0UNACACQX82AjwgA0UNACACQQY2ApwCCyABQQFqIQEMAAsACwuCAgEEfyABIAAQgQEiAksEQCMAQSBrIgQkAAJAIAEgAmsiAyAAEDUoAgAgACgCBGtBFG1NBEAgACADEKMGDAELIAAQNSEBIARBCGogACAAEIEBIANqELkEIAAQgQEgARCMByECIwBBEGsiASQAIAEgAigCCDYCACACKAIIIQUgASACQQhqNgIIIAEgBSADQRRsajYCBCABKAIAIQMDQCABKAIEIANHBEAgAigCEBogASgCABChBiABIAEoAgBBFGoiAzYCAAwBCwsgARCrASABQRBqJAAgACACEIkHIAIQhgcLIARBIGokAA8LIAEgAkkEQCAAIAAoAgAgAUEUbGoQqAYLC6kBAQR/IwBBIGsiAyQAIAAgATYCACADQRhqIAEQqQYhBEEQEE0hBSMAQSBrIgIkACACIAE2AgwgBRD+AyAFQcjNATYCACAFQQxqIAJBCGogAkEMaiACQRhqEK0CIAJBEGoQrQIaIAJBIGokACAAIAU2AgQgBBC4ARogAyABNgIEIAMgATYCACAEKAIAIQEgBEEANgIAIAEEQCAEIAEQkAYLIANBIGokACAAC54BAQJ/IABCADcCACAAQQhqIgFBADYCACABQQRqEE4aIAFBEGoQThogAEEkaiIBQtIJNwIAIAFBCGoQiwQaIAFBDGoiAkIANwIEIAIgATYCACACQQxqEE4aIAJBGGoQThogAkEkahBOGiACQTBqEE4aIAFByABqEE4aIAFB1ABqEKUDIAFBEDYCbCABQgA3AmQgAhCTBiACQQEQkgYgAAukAgEDfyAAKAIAIQIgACABNgIAIAIEQCACBEAgAkGUBmoiAEEYahDkASAAQQxqEHUgABB1IAJBjAVqIgBB/ABqEHUgAEHwAGoQdSAAQdwAahDlBSACQfwEahDkASACQaABaiIAQZABahB1IABB3ABqIgFBKGoQoAQgAUEcahB1IABByABqEKEEIABBPGoQoQQgAEEgahCgBCAAQRBqIgAQhAIgACgCAARAIAAgACgCABDVBiAAEDUaIAAoAgAhASAAELsBGiABEDQLIAJB3ABqEI4EGiACQcgAaiIDKAIIIQAgAxA1IQQDQCAABEAgACgCACEBIAQgAEEIahClBiAAEDQgASEADAELCyADELICIAJBQGsQ0QEgAkEMahDkAQsgAhA0CwsIACAAIAEQegvYAQEFfyMAQcABayIDJAAgACADQQhqIgEQqwYgAEEEaiABQQRyEKsGA0ACQEEAIQEgAkEDRgRAA0AgASAAKAKwASICQQN0QaijAWooAgBODQIgACABQQN0IgJqQegAaiACIANqQfAAahCmBiABQQFqIQEMAAsABQNAIAFBBEZFBEAgAUEDdCIEIAAgAkEFdCIFampBCGogAyAFaiAEakEQ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AgAgAkEQaiQACwwAIAAgARD4AUEBcwvkAQEBfyMAQSBrIgMkACADIAE2AhAgAyAANgIYIAMgAjYCCCADKAIQIAMoAhgQlwEhASADKAIIIAMoAhAQlwEhAAJAAn8CfyABRQRAQQAhAiAARQ0DIAMoAhAgAygCCBDIAUEBIQIgAygCECADKAIYEJcBRQ0DIANBEGohACADQRhqDAELIAMoAhghASAABEAgA0EIaiEAQQEMAgsgASADKAIQEMgBQQEhAiADKAIIIAMoAhAQlwFFDQIgA0EIaiEAIANBEGoLKAIAIQFBAgshAiABIAAoAgAQyAELIANBIGokACACCxIAIAAQPigCACAAKAIAa0EDdQsNACAAIAEgAkEDEKkECwsAIABBAEEkEDoaC5EBAQN/IwBBEGsiAiQAIAIgATYCDCMAQRBrIgMkACAAEDUaIANBx+PxODYCDCADQf////8HNgIIIANBDGogA0EIahD5ASgCACEEIANBEGokACABIARNBEAgABD1ASIAIARBAXZJBEAgAiAAQQF0NgIIIAJBCGogAkEMahB7KAIAIQQLIAJBEGokACAEDwsQnAEACwsAIAEgAkEkEEAaCw0AIAAgASACQSQQqwQLjQICDH8BfUF/IQoCQCABKAIIIgYgAigCBEcNACAAKAIEIgMgASgCBEcNACAAKAIIIgcgAigCCEcNAEEAIQogA0EAIANBAEobIQsgB0EAIAdBAEobIQwgBkEAIAZBAEobIQ0gACgCACEDA0AgBCALRg0BIAQgBmwhDkEAIQUDQCAFIAxGRQRAQQAhACADQQA2AgAgAigCACAFQQJ0aiEIIAEoAgAgDkECdGohCUMAAAAAIQ8DQCAAIA1GRQRAIAMgCSoCACAIKgIAlCAPkiIPOAIAIABBAWohACAJQQRqIQkgCCAHQQJ0aiEIDAELCyAFQQFqIQUgA0EEaiEDDAELCyAEQQFqIQQMAAsACyAKCysBAX8gACABKAIANgIAIAEoAgAhAyAAIAE2AgggACADIAJBDGxqNgIEIAALfwEDfyAAEIQCIAAQNRogACgCACEEIAAoAgQhAyABQQRqIQIDQCADIARHBEAgAigCAEEMayADQQxrIgMQkgQaIAIgAigCAEEMazYCAAwBCwsgACACEEggAEEEaiABQQhqEEggABA1IAEQPhBIIAEgASgC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hgEhDyACIAIoAgAiEEEBajYCACAQIA86AAAMAQsgCxC/AQR/QX8FIAtBABBBLAAACyEQQQAhD0EAIRMDQCAEIBFGDQECQCAPIBBHBEAgDyESDAELIAIgAigCACIQQQFqNgIAIBAgCjoAAEEAIRIgCxA4IBNBAWoiE00EQCAPIRAMAQsgCyATEEEtAABB/wBGBEBBfyEQDAELIAsgExBBLAAAIRALIBFBAWsiES0AACEPIAIgAigCACIYQQFqNgIAIBggDzoAACASQQFqIQ8MAAsACyAXIAIoAgAQmwILIBVBAWohFQwACwALuwIBAX8jAEEQayIKJAAgCQJ/IAAEQCACEKIHIQACQCABBEAgCiAAEP4BIAMgCigCADYAACAKIAAQ/QEMAQsgCiAAELgDIAMgCigCADYAACAKIAAQwAELIAggChCMASAKEDkaIAQgABC+AToAACAFIAAQnwE6AAAgCiAAEJ4BIAYgChCMASAKEDkaIAogABDBASAHIAoQjAEgChA5GiAAEPwBDAELIAIQoQchAAJAIAEEQCAKIAAQ/gEgAyAKKAIANgAAIAogABD9AQwBCyAKIAAQuAMgAyAKKAIANgAAIAogABDAAQsgCCAKEIwBIAoQORogBCAAEL4BOgAAIAUgABCfAToAACAKIAAQngEgBiAKEIwBIAoQORogCiAAEMEBIAcgChCMASAKEDkaIAAQ/AELNgIAIApBEGokAAsxAQF/IwBBEGsiAiQAIAIgACgCADYCCCACQQhqIAEQ7gUgAigCCCEAIAJBEGokACAACwsAIABBmK4EEMsBCwsAIAAgAUEMEPoBCwsAIABBoK4EEMsBCxUAIAAgASgCABDjBCABKAIAEPIBGguaEAEKfyMAQbAEayILJAAgCyAKNgKkBCALIAE2AqgEIAtBzwI2AmAgCyALQYgBaiALQZABaiALQeAAaiIBEGgiDygCACIKNgKEASALIApBkANqNgKAASABEEUhESALQdAAahBFIQ4gC0FAaxBFIQwgC0EwahBFIQ0gC0EgahBFIRAjAEEQayIBJAAgCwJ/IAIEQCABIAMQnAciAhD+ASALIAEoAgA2AHggASACEP0BIA0gARDVASABEDkaIAEgAhDAASAMIAEQ1QEgARA5GiALIAIQvgE2AnQgCyACEJ8BNgJwIAEgAhCeASARIAEQjAEg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ORogDxBnIAtBsARqJAAgAA8LIAohAgsgAUEBaiEBDAALAAseACAAIAEQuAEQgAEgARBKKAIAIQEgABBKIAE2AgALNAEBfyMAQRBrIgIkACACIAAoAgA2AgggAiACKAIIIAFqNgIIIAIoAgghACACQRBqJAAgAAsLACAAQYiuBBDLAQsLACAAQZCuBBDLAQvDAQEGfyMAQRBrIgQkACAAEEooAgAhBQJ/IAIoAgAgACgCAGsiA0H/////B0kEQCADQQF0DAELQX8LIgNBASADGyEDIAEoAgAhBiAAKAIAIQcgBUHPAkYEf0EABSAAKAIACyADEMgCIggEQCAFQc8CRwRAIAAQuAEaCyAEQc4CNgIEIAAgBEEIaiAIIARBBGoQaCIFEJ8HIAUQZyABIAAoAgAgBiAHa2o2AgAgAiADIAAoAgBqNgIAIARBEGokAA8LEFYACyUBAX8gASgCABDnBEEYdEEYdSECIAAgASgCADYCBCAAIAI6AAALzxABCn8jAEGwBGsiCyQAIAsgCjYCpAQgCyABNgKoBCALQc8CNgJoIAsgC0GIAWogC0GQAWogC0HoAGoiARBoIg8oAgAiCjYChAEgCyAKQZADajYCgAEgARBFIREgC0HYAGoQRSEOIAtByABqEEUhDCALQThqEEUhDSALQShqEEUhECMAQRBrIgEkACALAn8gAgRAIAEgAxCiByICEP4BIAsgASgCADYAeCABIAIQ/QEgDSABEIwBIAEQORogASACEMABIAwgARCMASABEDkaIAsgAhC+AToAdyALIAIQnwE6AHYgASACEJ4BIBEgARCMASABEDkaIAEgAhDBASAOIAEQjAEgARA5GiACEPwBDAELIAEgAxChByICEP4BIAsgASgCADYAeCABIAIQ/QEgDSABEIwBIAEQORogASACEMABIAwgARCMASABEDkaIAsgAhC+AToAdyALIAIQnwE6AHYgASACEJ4BIBEgARCMASABEDkaIAEgAhDBASAOIAEQjAEgARA5GiACEPwBCzYCJCABQRBqJAAgCSAIKAIANgIAIARBgARxIhJBCXYhE0EAIQFBACECA0AgAiEKAkACQAJAAkAgAUEERg0AIAAgC0GoBGoQlAFFDQBBACEEAkACQAJAAkACQAJAIAtB+ABqIAFqLAAADgUBAAQDBQkLIAFBA0YNByAHQYDA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QCABIAlGRQRAIAIgAUECdCICIAAoAgwgDUECdGooAgBqKAIAIAIgC2ooAgBsaiECIAFBAWohAQwBCwsgArcgECANQQN0aisDAKMgEqMiEyARIBEgE2MiARshESAMIAogARshCiADIAggARshCCADQQFqIQMMAAsACyAHQQFqIQcMAQsLDAELIAlBAnQQOyILRQ0DQQAhAQNAIAEgCUZFBEAgByABIAJqLQAAQf8Bc2ohByABQQFqIQEMAQsLIAcgCW4hCkEAIQdBACEBA0AgASAJRkUEQCALIAFBAnRqIAEgAmotAABB/wFzIAprIgg2AgAgAUEBaiEBIAggCGwgB2ohBwwBCwsgB7efIhIgA7ejRAAAAAAAAC5AYw0CQQAhByAAKAIAIgFBACABQQBKGyEOQX8hCEF/IQpBfyEMA0AgByAORwRAIAAoAgghAQJAA0ACQCABIAxBAWoiDEECdCIPaigCAA4DAQACAAsLIAAoAhghEEEAIQMDQCADQQRGDQEgAyAPaiENQQAhAkEAIQEDQCABIAlGRQRAIAIgAUECdCICIAAoAhQgDUECdGooAgBqKAIAIAIgC2ooAgBsaiECIAFBAWohAQwBCwsgArcgECANQQN0aisDAKMgEqMiEyARIBEgE2MiARshESAMIAogARshCiADIAggARshCCADQQFqIQMMAAsACyAHQQFqIQcMAQsLCyAFIAg2AgAgBCAKNgIAIAYgETkDACALEDRBAA8LIARBADYCACAFQQA2AgAgBkKAgICAgICA+L9/NwMAIAsQNEF+DwsgBEEANgIAIAVBADYCACAGQoCAgICAgID4v383AwAgCxA0QX4PC0EAQQNBpA5BABA9QQEQAwALaQAgAEUEQA8LAkAgACgCACABRg0AIAAgATYCACABRQRAIABB5IanAmoiACgCABA0IABBADYCAAwBCyAAQeSGpwJqIAAoAiggACgCJGwQOyIANgIAIAANAEEAQQNBpA5BABA9QQEQAwALC+8BAQF/IwBBIGsiBiQAIAYgATYCGAJAIAMoAgRBAXFFBEAgBkF/NgIAIAYgACABIAIgAyAEIAYgACgCACgCEBEJACIBNgIYAkACQAJAIAYoAgAOAgABAgsgBUEAOgAADAMLIAVBAToAAAwCCyAFQQE6AAAgBEEENgIADAELIAYgAxBQIAYQnQEh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IAIoAggQWDgCICAGIAggAioCWCACKgJcIAIoAgwgAigCCBBYOAIkIAYgCCACKgJgIAIqAmQgAigCDCACKAIIEFg4AiggBiAIIAIqAmggAioCbCACKAIMIAIoAggQWDgCLCAIIAQgBSAuIDSUEIsCIAYgCCACKgJwIAIqAnQgAigCDCACKAIIEFg4AjAgBiAIIAIqAnggAioCfCACKAIMIAIoAggQWDgCNCAGIAggAioCgAEgAioChAEgAigCDCACKAIIEFg4AjggBiAIIAIqAogBIAIqAowBIAIoAgwgAigCCBBYOAI8IAYgCCACKgKQASACKgKUASACKAIMIAIoAggQWDgCQCAGIAggAioCmAEgAioCnAEgAigCDCACKAIIEFg4AkQgCCAEIAUgLiAzlBCLAiAGIAggAioCoAEgAioCpAEgAigCDCACKAIIEFg4AkggBiAIIAIqAqgBIAIqAqwBIAIoAgwgAigCCBBYOAJMIAYgCCACKgKwASACKgK0ASACKAIMIAIoAggQWDgCUCAGIAggAioCuAEgAioCvAEgAigCDCACKAIIEFg4AlQgBiAIIAIqAsABIAIqAsQBIAIoAgwgAigCCBBYOAJYIAYgCCACKgLIASACKgLMASACKAIMIAIoAggQWDgCXCAIIAQgBSAuIDGUEIsCIAYgCCACKgLQASACKgLUASACKAIMIAIoAggQWDgCYCAGIAggAioC2AEgAioC3AEgAigCDCACKAIIEFg4AmQgBiAIIAIqAuABIAIqAuQBIAIoAgwgAigCCBBYOAJoIAYgCCACKgLoASACKgLsASACKAIMIAIoAggQWDgCbCAGIAggAioC8AEgAioC9AEgAigCDCACKAIIEFg4AnAgBiAIIAIqAvgBIAIqAvwBIAIoAgwgAigCCBBYOAJ0IAggBCAFIC4gMJQQiwIgBiAIIAIqAoACIAIqAoQCIAIoAgwgAigCCBBYOAJ4IAYgCCACKgKIAiACKgKMAiACKAIMIAIoAggQWDgCfCAGIAggAioCkAIgAioClAIgAigCDCACKAIIEFg4AoABIAYgCCACKgKYAiACKgKcAiACKAIMIAIoAggQWDgChAEgBiAIIAIqAqACIAIqAqQCIAIoAgwgAigCCBBYOAKIASAGIAggAioCqAIgAioCrAIgAigCDCACKAIIEFg4AowBIAgg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KAIEIgJBAWsgASgCDCIEbkEBak4EQCABIAI2AhAMAQsgASADIARsNgIQIAAgAiABKAIIbEEHdBCmBSABQQE2AiggASgCECECCyABIABBASABKAIIIAIQqQU2AgAgBSgCUCECIAFBADYCJCABQgA3AhggASACNgIUCyABKAIsIgENAAsLC9UHAQd/AkACQCACIANqIgggASgCBEsNACABKAIMIANJDQAgASgCAA0BCyAAKAIAIgNBFzYCFCAAIAMoAgARAQALAkAgAiABKAIYIgNPBEAgCCABKAIQIANqTQ0BCyABKAIoRQRAIAAoAgAiA0HHADYCFCAAIAMoAgARAQALIAEoAiQEQAJAIAEoAhAiA0EATA0AIAEoAhQiBSADIAMgBUobIgUgASgCHCABKAIYIgNrIgYgBSAGSBsiBSABKAIEIANrIgYgBSAGSBsiBUEATA0AIAFBMGohCiADIAEoAggiC2whBkEAIQMDQCAAIAogASgCACADQQJ0aigCACAGIAUgC2wiByABKAI0EQYAIAEoAhAiCSABKAIUIgUgA2oiA0wNASAGIAdqIQYgBSAJIANrIgcgBSAHSBsiBSABKAIcIAEoAhggA2oiB2siCSAFIAlIGyIFIAEoAgQgB2siByAFIAdIGyIFQQBKDQALCyABQQA2AiQLIAEgAiAIIAEoAhAiA2siBUEAIAVBAEobIAEoAhggAkkbIgY2AhggA0EATA0AIAEoAhQiBSADIAMgBUobIgMgASgCHCAGayIFIAMgBUgbIgMgASgCBCAGayIFIAMgBUgbIgVBAEwNACABQTBqIQogASgCCCILIAZsIQZBACEDA0AgACAKIAEoAgAgA0ECdGooAgAgBiAFIAtsIgcgASgCMBEGACABKAIQIgkgASgCFCIFIANqIgNMDQEgBiAHaiEGIAUgCSADayIHIAUgB0gbIgUgASgCHCABKAIYIANqIgdrIgkgBSAJSBsiBSABKAIEIAdrIgcgBSAHSBsiBUEASg0ACwsCQAJAAkAgASgCHCIFIAhPDQACQAJAAkAgAiAFSwRAIAIhBSAERQ0BIAAoAgAiA0EXNgIUIAAgAygCABEBAAwCCyAEDQELIAEoAiANASAAKAIAIgNBFzYCFCAAIAMoAgARAQAMBAsgASAINgIcIAEoAiBFDQILIAUgASgCGCIAayIDIAgg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IAIgBy0AACIAIAUgDWooAgBqai0AADoAACABIAIgACAGIAhqQRB1amotAAA6AAEgASACIAAgA2pqLQAAOgACCwuLAgEDfyMAQRBrIggkAAJAAkAgACgC3AMiBygCJARAIAdBIGpBACAEIAUoAgBBAnRqQQBBASAHKAIoEIsDIAdBADYCJCAFIAUoAgBBAWo2AgAgByAHKAIsQQFrNgIsDAELIAcoAiwhCSAIIAQgBSgCACIDQQJ0aiIEKAIANgIIIAgCfyAJIAYgA2siAyADIAlLGyIDQQIgA0ECSRsiA0ECTwRAIAQoAgQMAQsgB0EBNgIkIAcoAiALNgIMIAAgASACKAIAIAhBCGogBygCDBEHACAHKAIkIQAgBSAFKAIAIANqNgIAIAcgBygCLCADazYCLCAADQELIAIgAigCAEEBajYCAAsgCEEQaiQAC4YFAQ5/IAJBAnQiBSABKAIIaigCACEKIAEoAgQgBWooAgAhCyABKAIAIAJBA3RqIgEoAgAhByABKAIEIQggAygCBCECIAMoAgAhAyAAKALQAiEEIAAoAtwDIgEoAhwhDiABKAIYIQ8gASgCFCEQIAEoAhAhESAAKAJwIgFBAk8EfyABQQF2IQkDQCAQIAstAABBAnQiAWooAgAhDCAPIAotAABBAnQiBmooAgAhBSABIA5qKAIAIQEgAyAEIAYgEWooAgAiDSAHLQAAIgZqai0AADoAACADIAQgBiABIAVqQRB1IgVqai0AADoAASADIAQgBiAMamotAAA6AAIgAyAEIA0gBy0AASIBamotAAA6AAMgAyAEIAEgBWpqLQAAOgAEIAMgBCABIAxqai0AADoABSACIAQgDSAILQAAIgFqai0AADoAACACIAQgASAFamotAAA6AAEgAiAEIAEgDGpqLQAAOgACIAIgBCANIAgtAAEiAWpqLQAAOgADIAIgBCABIAVqai0AADoABCACIAQgASAMamotAAA6AAUgAkEGaiECIAhBAmohCCADQQZqIQMgB0ECaiEHIApBAWohCiALQQFqIQsgCUEBayIJDQALIAAoAnAFIAELQQFxBEAgECALLQAAQQJ0IgBqKAIAIQkgDyAKLQAAQQJ0IgFqKAIAIQUgACAOaigCACEAIAMgBCABIBFqKAIAIgEgBy0AACIGamotAAA6AAAgAyAEIAYgACAFakEQ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CwJAIAFBDEkNACACLQACQcEARw0AIAItAANB5ABHDQAgAi0ABEHvAEcNACACLQAFQeIARw0AIAItAAZB5QBHDQAgAi0ACCEDIAItAAchByACLQAKIQkgAi0ACSEKIAItAAwhCyACLQALIQ0gAi0ADSEFIAAoAgAiAUHOADYCFCABIAU2AiQgASALIA1BCHRyNgIgIAEgCSAKQQh0cjYCHCABIAMgB0EIdHI2AhggAEEBIAEoAgQRAgAgACAFOgCsAiAAQQE2AqgCDAILIAAoAgAiASAFNgIYIAFB0AA2AhQgAEEBIAAoAgAoAgQRAgAMAQsgACgCACIBIAM2AhggAUHGADYCFCAAIAAoAgAoAgARAQALIAYgBDYCBCAGIAg2AgBBASEEIAxBAEwNACAAIAwgACgCGCgCEBECAAsgAkEQaiQAIAQLNgAgAEEANgLYASAAQQA2ArgDIABBADYCkAEgACgC0AMiAEEANgKkASAAQQA2AhggAEIANwIMC4s7AQ9/IwBBoAJrIgkkACAAKAK4AyEBA0ACQAJAAkAgAQ0AIAAoAtADKAIMRQRAIAAoAhgiAigCBCIBRQRAIAAgAigCDBEAAEUEQEEAIQEMBAsgAigCBCEBCyACKAIAIgMtAAAhBSABQQFrIgQEfyADQQFqBSAAIAIoAgwRAABFBEBBACEBDAQLIAIoAgQhBCACKAIACyIBQQFqIQMgBUH/AUYgAS0AACIBQdgBRnFFBEAgACgCACIGIAU2AhggBkE3NgIUIAAoAgAgATYCHCAAIAAoAgAoAgARAQALIAAgATYCuAMgAiAEQQFrNgIEIAIgAzYCAAwBCyAAEOIDRQRAQQAhAQwCCyAAKAK4AyEBCwJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgAUEBaw7+AQ8REREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREREgECBQkFBQUFAwQFCAUFBQ8PDw8PDw8PAAcGChALERENDQ0NDQ0NDQ0NDQ0NDQ0NEREREREREREMEREREREOEQsgACgCACICQegANgIUIABBASACKAIEEQIAIAAoAtADIgEoAgwEQCAAKAIAIgJBwAA2AhQgACACKAIAEQEAIAAoAtADIQELIABCADcA6AEgAEIANwDwASAAQoGChIiQoMCAATcAgAIgAEKBgoSIkKDAgAE3APgBIABChYqUqNCgwYIFNwCQAiAAQoWKlKjQoMGCBTcAiAIgAEIANwOwAiAAQQA2AiggAEIANwOYAiAAQQA6AKwCIABCgYAENwKkAiAAQQA6AKICIABBgQI7AaACIAFBATYCDAwUC0EAIQEgAEEAQQBBABDQAg0TDBILQQAhASAAQQBBAUEAENACDRIMEQtBACEBIABBAEEAQQEQ0AINEQwQC0EAIQEgAEEAQQFBARDQAg0QDA8LIAAoAgAiAiABNgIYIAJBPzYCFCAAIAAoAgAoAgARAQAMDwsgACgCGCIGKAIEIQEgBigCACEDIAAoAtADKAIQRQRAIAAoAgAiAkE8NgIUIAJBGGpByKkCQdAAEEAaIAAgACgCACgCABEBAAsgAUUEQCAAIAYoAgwRAABFBEBBACEBDA8LIAYoAgAhAyAGKAIEIQELIAMtAAAhBSABQQFrIgIEfyADQQFqBSAAIAYoAgwRAABFBEBBACEBDA8LIAYoAgQhAiAGKAIACyIELQAAIQEgAkEBayIDBH8gBEEBagUgACAGKAIMEQAARQRAQQAhAQwPCyAGKAIEIQMgBigCAAshBCAAKAIAIgIgBC0AACILNgIYIAJB6QA2AhRBASECIABBASAAKAIAKAIEEQIAAkACQAJAIAtBAXRBBmogBUEIdCABckcgC0EES3INACALBEAgACALNgLUAiAEQQFqIQogA0EBayEFDAILIAAoAuABRQ0AIAAgCzYC1AIgBEEBaiEKIANBAWshBQwCCyAAKAIAIgFBDDYCFCAAIAEoAgARAQAgACALNgLUAiAEQQFqIQogA0EBayEFIAtFDQELQQAhBANAIAVFBEAgACAGKAIMEQAARQRAQQAhAQwRCyAGKAIAIQogBigCBCEFCyAKLQAAIQMCQCAERQ0AIARBAmshAiAEQQFrIQhBACEBA0AgAyAAIAFBAnRqKALYAigCAEcEQCAEIAFBAWoiAUcNAQwCCwsgACgC2AIoAgAhAQJAIARBAkkNAEEBIQMgAkEDTwRAIAhBfHEhDEEAIQcDQCAAIANBAnRqIgIoAuQCKAIAIg0gAigC4AIoAgAiDiACKALcAigCACIPIAIoAtgCKAIAIgIgASABIAJIGyICIAIgD0gbIgIgAiAOSBsiAiACIA1IGyEBIANBBGohAyAHQQRqIgcgDEcNAAsLQQAhAiAIQQNxIghFDQADQCAAIANBAnRqKALYAigCACIHIAEgASAHSBshASADQQFqIQMgAkEBaiICIAhHDQALCyABQQFqIQMLIAVBAWshCCAAKALYASEBAkAgACgCJCIHQQBKBEAgASAHQdgAbGohBUEAIQIDQCADIAEoAgBGDQIgAUHYAGohASACQQFqIgIgB0cNAAsgBSEBCyAAKAIAIgIgAzYCGCACQQQ2AhQgACAAKAIAKAIAEQEACyAAIARBAnRqIAE2AtgCIAgEfyAKQQFqBSAAIAYoAgwRAABFBEBBACEBDBELIAYoAgQhCCAGKAIACyEFIAEgBS0AACICQQ9xNgIYIAEgAkEEdjYCFCAAKAIAIgIgASgCADYCGCACIAEoAhQ2AhwgASgCGCEBIAJB6gA2AhQgAiABNgIgIABBASACKAIEEQIAIAVBAWohCiAIQQFrIQUgBEEBaiIEIAtHDQALQQAhAgsgBUUEQCAAIAYoAgwRAABFBEBBACEBDA8LIAYoAgAhCiAGKAIEIQULIAAgCi0AADYCnAMgACAFQQFrIgMEfyAKQQFqBSAAIAYoAgwRAABFBEBBACEBDA8LIAYoAgQhAyAGKAIACyIELQAANgKgAyAAIANBAWsiBwR/IARBAWoFIAAgBigCDBEAAEUEQEEAIQEMDwsgBigCBCEHIAYoAgALIgUtAAAiBEEPcTYCqAMgACAEQQR2NgKkAyAAKAIAIgQgACgCnAM2AhggBCAAKAKgAzYCHCAEIAAoAqQDNgIgIAQgACgCqAM2AiQgBEHrADYCFEEBIQEgAEEBIAQoAgQRAgAgACgC0ANBADYCFCACRQRAIAAgACgCkAFBAWo2ApABCyAGIAdBAWs2AgQgBiAFQQFqNgIAIABBADYCuAMMDQsgACgCACICQdcANgIUIABBASACKAIEEQIAIABBADYCuANBAiEBDAwLIAAoAhgiBSgCBCIBRQRAIAAgBSgCDBEAAEUEQEEAIQEMDQsgBSgCBCEBCyAFKAIAIgItAAAhBCABQQFrIgMEfyACQQFqBSAAIAUoAgwRAABFBEBBACEBDA0LIAUoAgQhAyAFKAIACyIBQQFqIQIgA0EBayEDIAEtAAAgBEEIdHIiBEECayEBIARBA08EQANAIAEhBCADRQRAIAAgBSgCDBEAAEUEQEEAIQEMDwsgBSgCBCEDIAUoAgAhAgsgAi0AACEBIANBAWsiCAR/IAJBAWoFIAAgBSgCDBEAAEUEQEEAIQEMDwsgBSgCBCEIIAUoAgALIgMtAAAhAiAAKAIAIgYgATYCGCAGQdEANgIUIAAoAgAgAjYCHCAAQQEgACgCACgCBBECAAJAAkACQCABQSBPBEAgACgCACIGIAE2AhggBkEdNgIUIAAgACgCACgCABEBAAwBCyABQRBJDQELIAAgAWogAjoA+AEMAQsgACABaiIBIAJBBHYiBjoA+AEgASACQQ9xIgE6AOgBIAEgBk0NACAAKAIAIgEgAjYCGCABQR42AhQgACAAKAIAKAIAEQEACyADQQFqIQIgCEEBayEDIARBAmshASAEQQJKDQALCyABBEAgACgCACIEQQw2AhQgACAEKAIAEQEACyAFIAM2AgQgBSACNgIADAwLIAAoAhgiBigCBCIBRQRAIAAgBigCDBEAAEUNCiAGKAIEIQELIAYoAgAiAi0AACEEIAFBAWsiAQR/IAJBAWoFIAAgBigCDBEAAEUNCiAGKAIEIQEgBigCAAsiAkEBaiEDIAFBAWshASACLQAAIARBCHRyIgJBAmshBSACQRNPBEADQCABRQRAIAAgBigCDBEAAEUNDCAGKAIAIQMgBigCBCEBCyAAKAIAIgIgAy0AACIHNgIYIAJB0gA2AhRBASECIABBASAAKAIAKAIEEQIAQQAhBCAJQQA6AIACIANBAWohAyABQQFrIQEDQCABRQRAIAAgBigCDBEAAEUNDSAGKAIAIQMgBigCBCEBCyAJQYACaiACaiADLQAAIgg6AAAgA0EBaiEDIAFBAWshASAEIAhqIQQgAkEBaiICQRFHDQALIAAoAgAiAiAJLQCBAjYCGCACIAktAIICNgIcIAIgCS0AgwI2AiAgAiAJLQCEAjYCJCACIAktAIUCNgIoIAIgCS0AhgI2AiwgAiAJLQCHAjYCMCAJLQCIAiEIIAJB2AA2AhQgAiAINgI0IABBAiACKAIEEQIAIAAoAgAiAiAJLQCJAjYCGCACIAktAIoCNgIcIAIgCS0AiwI2AiAgAiAJLQCMAjYCJCACIAktAI0CNgIoIAIgCS0AjgI2AiwgAiAJLQCPAjYCMCAJLQCQAiEIIAJB2AA2AhQgAiAINgI0IABBAiACKAIEEQIAIARBgAJNIAVBEWsiBSAETnFFBEAgACgCACICQQk2AhQgACACKAIAEQEAC0EAIQIgCUEAQYACEDohCCAEBEADQCABRQRAIAAgBigCDBEAAEUNDiAGKAIAIQMgBigCBCEBCyACIAhqIAMtAAA6AAAgA0EBaiEDIAFBAWshASACQQFqIgIgBEcNAAsLIAAgB0EQayICQQJ0akHEAWogACAHQQJ0akG0AWogB0EQcSILGyEKIAIgByALGyICQQRPBEAgACgCACIHIAI2AhggB0EfNgIUIAAgACgCACgCABEBAAsgBSAEayEFIAooAgAiAkUEQCAAQQBBmAIgACgCBCgCABEEACICQQA2ApQCIAogAjYCAAsgAiAIKQOAAjcCACACIAgpA4gCNwIIIAIgCC0AkAI6ABAgCigCAEERaiAIQYACEEAaIAVBEEoNAAsLIAUEQCAAKAIAIgJBDDYCFCAAIAIoAgARAQALIAYgATYCBCAGIAM2AgAMCwsgACgCGCIGKAIEIgFFBEAgACAGKAIMEQAARQRAQQAhAQwLCyAGKAIEIQELIAYoAgAiAi0AACEFIAFBAWsiAwR/IAJBAWoFIAAgBigCDBEAAEUEQEEAIQEMCwsgBigCBCEDIAYoAgALIgFBAWohAiADQQFrIQQgAS0AACAFQQh0ciIBQQJrIQggAUEDTwRAA0AgBEUEQCAAIAYoAgwRAABFBEBBACEBDA0LIAYoAgQhBCAGKAIAIQILIAItAAAhBSAAKAIAIgFB0wA2AhQgASAFQQ9xIgE2AhggACgCACAFQQR2NgIcIABBASAAKAIAKAIEEQIAIAFBBE8EQCAAKAIAIgMgATYCGCADQSA2AhQgACAAKAIAKAIAEQEACyAAIAFBAnRqIgMoAqQBIgFFBEAgAEEAQYQBIAAoAgQoAgARBAAiAUEANgKAASADIAE2AqQBCyAIQQFrIQoCQAJAAkACQAJ/IAVBEEkiC0UEQEEAIQcgCEGAAUsNAgNAIAEgB0EBdCIFakEBOwEAIAEgBUECcmpBATsBACABIAVBBHJqQQE7AQAgASAFQQZyakEBOwEAIAEgBUEIcmpBATsBACABIAVBCnJqQQE7AQAgASAFQQxyakEBOwEAIAEgBUEOcmpBATsBACAHQQhqIgdBwABHDQALIApBAXUMAQtBACEHIAhBwABLDQEDQCABIAdBAXQiBWpBATsBACABIAVBAnJqQQE7AQAgASAFQQRyakEBOwEAIAEgBUEGcmpBATsBACABIAVBCHJqQQE7AQAgASAFQQpyakEBOwEAIAEgBUEMcmpBATsBACABIAVBDnJqQQE7AQAgB0EIaiIHQcAARw0ACyAKCyEFQdDDAiEIAkACQAJAAkACQAJAIAVBBGsOLgUHBwcHAAcHBwcHBwEHBwcHBwcHBwIHBwcHBwcHBwcHAwcHBwcHBwcHBwcHBwQHC0HgwgIhCAwEC0HgwQIhCAwDC0GwwAIhCAwCC0HgvgIhCAwBC0HQvAIhCAsgAkEBaiECIARBAWshBAwCCyACQQFqIQIgBEEBayEEQcAAIQVBkLoCIQgMAQsgAkEBaiECIARBAWshBEGQugIhCCAFQQBMDQELQQAhAwNAAn8gC0UEQCAERQRAIAAgBigCDBEAAEUEQEEAIQEMEQsgBigCBCEEIAYoAgAhAgsgAi0AACEHIARBAWsiBAR/IAJBAWoFIAAgBigCDBEAAEUEQEEAIQEMEQsgBigCBCEEIAYoAgALIgItAAAgB0EIdHIMAQsgBEUEQCAAIAYoAgwRAABFBEBBACEBDBALIAYoAgQhBCAGKAIAIQILIAItAAALIQcgASAIIANBAnRqKAIAQQF0aiAHOwEAIAJBAWohAiAEQQFrIQQgA0EBaiIDIAVHDQALC0EAIQgCQCAAKAIAIgMoAmhBAkgNAANAIAMgASAIQQF0IgdqLwEANgIYIAMgASAHQQJyai8BADYCHCADIAEgB0EEcmovAQA2AiAgAyABIAdBBnJqLwEANgIkIAMgASAHQQhyai8BADYCKCADIAEgB0EKcmovAQA2AiwgAyABIAdBDHJqLwEANgIwIAEgB0EOcmovAQAhByADQd8ANgIUIAMgBzYCNCAAQQIgAygCBBECACAIQTdLDQEgCEEIaiEIIAAoAgAhAwwACwALIAogBUEAIAUgCxtqayIIQQBKDQALCyAIBEAgACgCACIBQQw2AhQgACABKAIAEQEACyAGIAQ2AgQgBiACNgIADAoLIAAoAhgiAigCBCIDRQRAIAAgAigCDBEAAEUEQEEAIQEMCgsgAigCBCEDCyACKAIAIgQtAAAhASADQQFrIgMEfyAEQQFqBSAAIAIoAgwRAABFBEBBACEBDAoLIAIoAgQhAyACKAIACyEEIANBAWshAyAELQAAIAFBCHRyQQRHBEAgACgCACIBQQw2AhQgACABKAIAEQEACyADBH8gBEEBagUgACACKAIMEQAARQRAQQAhAQwKCyACKAIEIQMgAigCAAsiAS0AACEFIANBAWsiBAR/IAFBAWoFIAAgAigCDBEAAEUEQEEAIQEMCgsgAigCBCEEIAIoAgALIgEtAAAhAyAAKAIAIgZB1AA2AhQgBiADIAVBCHRyIgU2AhggAEEBIAAoAgAoAgQRAgAgACAFNgKYAiACIARBAWs2AgQgAiABQQFqNgIADAkLIAAoAhgiASgCBCEDIAEoAgAhAiAAKALQAygCEEUEQCAAKAIAIgRBPDYCFCAEQRhqQZmqAkHQABBAGiAAIAAoAgAoAgARAQALAkACQCAAKAIkQQNIDQAgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQILIAItAAAhBCADQQFrIgMEfyACQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyECIANBAWshAyACLQAAIARBCHRyQRhHBEAgACgCACIEQQw2AhQgACAEKAIAEQEACyADBH8gAkEBagUgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCAAshAiADQQFrIQMgAi0AAEENRwRAIAAoAgAiBEHGADYCFCAEIAAoArgDNgIYIAAgACgCACgCABEBAAsgAwR/IAJBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgItAAAhBCADQQFrIgMEfyACQQFqBSAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIACyIFQQFqIQIgA0EBayEDIAUtAAAgBEEIdHJB/wFHDQAgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQILIAJBAWohBCADQQFrIQMgAi0AAEEDRwRAIAQhAgwBCyADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhBAsgBEEBaiECIANBAWshAyAAKALYASIHKAJYIAQtAABHDQAgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAAoAtgBIQcgASgCBCEDIAEoAgAhAgsgAkEBaiEEIANBAWshAyAHKAIAIAItAABHBEAgBCECDAELIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyAAKALYASEHIAEoAgQhAyABKAIAIQQLIARBAWohAiADQQFrIQMgBygCsAEgBC0AAEcNACADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhAgsgAkEBaiEEIANBAWshAyACLQAAQYABRwRAIAQhAgwBCyADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhBAsgBC0AACEFIANBAWsiAwR/IARBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgRBAWohAiADQQFrIQMgBC0AACAFQQh0cg0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACLQAAIQQgA0EBayIDBH8gAkEBagUgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCAAsiBUEBaiECIANBAWshAyAFLQAAIARBCHRyDQAgA0UEQCAAIAEoAgwRAABFBEBBACEBDAsLIAEoAgQhAyABKAIAIQILIAJBAWohBCADQQFrIQMgAi0AAARAIAQhAgwBCyADRQRAIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgAhBAsgBC0AACEFIANBAWsiAwR/IARBAWoFIAAgASgCDBEAAEUEQEEAIQEMCwsgASgCBCEDIAEoAgALIgRBAWohAiADQQFrIQMgBC0AACAFQQh0ckEBRw0AIANFBEAgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCACECCyACLQAAIQQgA0EBayIDBH8gAkEBagUgACABKAIMEQAARQRAQQAhAQwLCyABKAIEIQMgASgCAAsiBUEBaiECIANBAWshAyAFLQAAIARBCHRyDQAgA0UEQCAAIAEoAgwRAABFBEBB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NgIgIAAoAgAgACgCqAM2AiQgACAAKAIAKAIAEQEAIAAoAiQhAyAAKAKsAwwDCyAFKAIQRQRAIAAoAgAiAUEkNgIUIAAgASgCABEBAAsgACgC1AJFDQQgABCyBUEBDwtBAiECIAAoApABIgEgACgCmAFODQQgACABNgKYAQwECyAAQT82ArQDIABBkLoCNgKwAyAAQQg2AqwDQQgLIgE2AsgCIAAgATYCxAIgA0EASgRAIAAoAtgBIQJBACEEA0AgAiABNgIoIAIgATYCJCACIAIoAgggACgCHGwgACgCvAIgAWwQbTYCHCACIAIoAgwgACgCIGwgACgCrAMgACgCwAJsEG02AiAgAiACKAIIIAAoAhxsIAAoArwCEG02AiwgAigCDCAAKAIgbCAAKALAAhBtIQEgAkEANgJQIAJBATYCNCACIAE2AjAgBEEBaiIEIAAoAiRORQRAIAJB2ABqIQIgACgCrAMhAQwBCwsgACgCrAMhAQsgACAAKAIgIAEgACgCwAJsEG02AswCQQEhASAAKALMAyAAKALUAiICIAAoAiROBH8gACgC4AFBAEcFQQELNgIQCyACRQRAIAVBAjYCGAwBCwsgBUEANgIYQQEPCyACC0MBAX8gACgCzAMiAUEBNgIYIAFCADcCECABQf8ANgIAIAAgACgCACgCEBEBACAAIAAoAtADKAIAEQEAIABBADYCoAELHAAgACAAKALUAygCCBEBACAAKALMA0H/ADYCAAsMACAAKAIYQQE2AiQLiwEBAn8gACgCGCIBKAIgQQFBgCAgASgCHBBhIgJFBEAgASgCJARAIAAoAgAiAkErNgIUIAAgAigCABEBAAsgACgCACICQfsANgIUIABBfyACKAIEEQIAIAEoAiBB/wE6AAAgASgCIEHZAToAAUECIQILIAFBADYCJCABIAI2AgQgASABKAIgNgIAQQELVAECfyABQQBKBEAgASAAKAIYIgIoAgQiA0oEQANAIAAgAigCDBEAABogASADayIBIAIoAgQiA0oNAAsLIAIgAyABazYCBCACIAIoAgAgAWo2AgALC3sBAX8gACgCGCICRQRAIAAgAEEAQSggACgCBCgCABEEACICNgIYIAIgAEEAQYAgIAAoAgQoAgARBAA2AiAgACgCGCECCyACIAE2AhwgAkH3ADYCGCACQfgANgIUIAJB+QA2AhAgAkH6ADYCDCACQfsANgIIIAJCADcCAAvNAQEEfyMAQRBrIgQkACAAKAIUIgNBzQFHBEAgACgCACIFIAM2AhggBUEVNgIUIAAgACgCACgCABEBAAsCQCAAKAKMASIFIAAoAnQiBk8EQCAAKAIAIgFB/gA2AhQgAEF/IAEoAgQRAgBBACEBDAELIAAoAggiAwRAIAMgBjYCCCADIAU2AgQgACADKAIAEQEACyAEQQA2AgwgACABIARBDGogAiAAKALAAygCBBEHACAAIAQoAgwiASAAKAKMAWo2AowBCyAEQRBqJAAgAQvDQAEUfwJAAkACQAJAAkAgACgCFCIBQcoBaw4DAAEDAgsgACAAQQFBHCAAKAIEKAIAEQQAIg02ArwDIA1BADYCCCANQcwBNgIEIA1BzQE2AgAgACgC1AEiAUEIRwRAIAAoAgAiAiABNgIYIAJBEDYCFCAAIAAoAgAoAgARAQALIAAoAhQiAUHKAUcEQCAAKAIAIgIgATYCGCACQRU2AhQgACAAKAIAKAIAEQEACwJ/IAAoAqwDIgIgACgCMGwiAyAAKAI0IgRNBEAgACAAKAIcIAIQbTYCcEEBIQEgACgCIAwBCyAEQQF0IANPBEAgACAAKAIcQQF0IAIQbTYCcEECIQEgACgCIEEBdAwBC0EDIQEgBEEDbCADTwRAIAAgACgCHEEDbCACEG02AnAgACgCIEEDbAwBCyAEQQJ0IANPBEAgACAAKAIcQQJ0IAIQbTYCcEEEIQEgACgCIEECdAwBC0EFIQEgBEEFbCADTwRAIAAgACgCHEEFbCACEG02AnAgACgCIEEFbAwBC0EGIQEgBEEGbCADTwRAIAAgACgCHEEGbCACEG02AnAgACgCIEEGbAwBC0EHIQEgBEEHbCADTwRAIAAgACgCHEEHbCACEG02AnAgACgCIEEHbAwBCyAEQQN0IANPBEAgACAAKAIcQQN0IAIQbTYCcEEIIQEgACgCIEEDdAwBC0EJIQEgBEEJbCADTwRAIAAgACgCHEEJbCACEG02AnAgACgCIEEJbAwBC0EKIQEgBEEKbCADTwRAIAAgACgCHEEKbCACEG02AnAgACgCIEEKbAwBC0ELIQEgBEELbCADTwRAIAAgACgCHEELbCACEG02AnAgACgCIEELbAwBC0EMIQEgBEEMbCADTwRAIAAgACgCHEEMbCACEG02AnAgACgCIEEMbAwBC0ENIQEgBEENbCADTwRAIAAgACgCHEENbCACEG02AnAgACgCIEENbAwBC0EOIQEgBEEObCADTwRAIAAgACgCHEEObCACEG02AnAgACgCIEEObAwBC0EPIQEgACgCHCEGIARBD2wgA08EQCAAIAZBD2wgAhBtNgJwIAAoAiBBD2wMAQsgACAGQQR0IAIQbTYCcEEQIQEgACgCIEEEdAsgACgCrAMQbSECIAAgATYCyAIgACABNgLEAiAAIAI2AnQCQCAAKAIkIgRBAEwNACAAKALYASECIARBAWtBB08EQCAEQXhxIQZBACEDA0AgAiABNgIoIAIgATYCJCACIAE2ApAFIAIgATYCjAUgAiABNgK4BCACIAE2ArQEIAIgATYC4AMgAiABNgLcAyACIAE2AogDIAIgATYChAMgAiABNgKwAiACIAE2AqwCIAIgATYC2AEgAiABNgLUASACIAE2AoABIAIgATYCfCACQcAFaiECIANBCGoiAyAGRw0ACwsgBEEHcSIERQ0AQQAhAwNAIAIgATYCKCACIAE2AiQgAkHYAGohAiADQQFqIgMgBEcNAAsLAkAgACgCJCIJQQBMDQBBCEEEIAAoAkwbIQogACgCyAIhAyAAKALEAiEEIAAoAtgBIgchCANAAkAgCiAEIgFIDQAgACgCvAIiAiAIKAIIIgxBAXRvDQBBAiEGA0AgBCAGbCIBIApKDQEgAiAGQQF0IgYgDGxvRQ0ACwsgCCABNgIkAkAgCiADIgJIDQAgACgCwAIiDCAIKAIMIg5BAXRvDQBBAiEGA0AgAyAGbCICIApKDQEgDCAGQQF0IgYgDmxvRQ0ACwsgCCACNgIoAkAgAkEBdCIGIAFIBEAgCCAGNgIkDAELIAIgAUEBdCIBTA0AIAggATYCKAsgCEHYAGohCCALQQFqIgsgCUcNAAsgCUEATA0AQQAhBgNAIAcgBygCJCAHKAIIIAAoAhxsbCAAKAKsAyAAKAK8AmwQbTYCLCAHIAcoAiggBygCDCAAKAIgbGwgACgCrAMgACgCwAJsEG02AjAgB0HYAGohByAGQQFqIgYgACgCJCIJSA0ACwsgACgCLEEBayIBQQZNBEAgAUECdEHQswJqKAIAIQkLIAAgCTYCeCAAQQEgCSAAKAJUGzYCfCAAIAAQrgUEfyAAKALAAgVBAQs2AoABIAAgAEEBQYAKIAAoAgQoAgARBABBAEGABBA6IgJBgARqIgE2AtACA0AgASAFaiAFOgAAIAEgBUEBciIDaiADOgAAIAEgBUECciIDaiADOgAAIAEgBUEDciIDaiADOgAAIAEgBUEEciIDaiADOgAAIAEgBUEFciIDaiADOgAAIAEgBUEGciIDaiADOgAAIAEgBUEHciIDaiADOgAAIAVBCGoiBUGAAkcNAAsgAkGABmpB/wFBgAQQOhoCQAJAIAAoAnRFDQAgACgCcEUNACAAKAJ4QQBKDQELIAAoAgAiAUEhNgIUIAAgASgCABEBAAsgDUEANgIMIAAQrgUhASANQgA3AhQgDSABNgIQAkAgACgCVEUEQCAAQQA2AmwgAEIANwJkDAELIAAoAkBFBEAgAEEANgJsIABCADcCZAsgACgCRARAIAAoAgAiAUEwNgIUIAAgASgCABEBAAsCQCAAKAJ4QQNHBEAgAEEANgKIASAAQQA2AmwgAEIBNwJkDAELIAAoAogBBEAgAEEBNgJoDAELIAAoAlwEQCAAQQE2AmwMAQsgAEEBNgJkCyAAKAJkBEAgACAAQQFB2AAgACgCBCgCABEEACIBNgLkAyABQQA2AkQgAUHuATYCDCABQe8BNgIIIAFB8AE2AgAgAUEANgI0IAAoAnhBBU4EQCAAKAIAQrmAgIDAADcCFCAAIAAoAgAoAgARAQALIAAoAmAiCkGBAk4EQCAAKAIAQruAgICAIDcCFCAAIAAoAgAoAgARAQAgACgCYCEKCyAAKAJ4IgdBAWsiCUF4cSEIIAlBB3EhAyAAKALkAyEGIAdBAkghCyAHQQJrQQdJIQxBASEBA0AgASIFQQFqIgEhBAJAIAsNAEEAIQIgASEEIAxFBEADQCABIARsIAFsIAFsIAFsIAFsIAFsIAFsIAFsIQQgAkEIaiICIAhHDQALC0EAIQIgA0UNAANAIAEgBGwhBCACQQFqIgIgA0cNAAsLIAQgCkwNAAtBASEDIAVBAU0EQCAAKAIAIgEgBDYCGCABQTo2AhQgACAAKAIAKAIAEQEACwJAIAdBAEwNACAHQQNxIQtBACEIAkAgCUEDSQRAQQAhAQwBCyAHQXxxIQxBACEBIAZBIGohAkEAIQkDQCACIAFBAnQiBGogBTYCACACIARBBHJqIAU2AgAgAiAEQQhyaiAFNgIAIAIgBEEMcmogBTYCACABQQRqIQEgAyAFbCAFbCAFbCAFbCEDIAlBBGoiCSAMRw0ACwsgCwRAA0AgBiABQQJ0aiAFNgIgIAFBAWohASADIAVsIQMgCEEBaiIIIAtHDQALCyAHQQBMDQBBACEBIAAoAixBAkchBUEBIQIDQCAKIAMgBiAFBH8gAQUgAUECdEGAugJqKAIAC0ECdGoiCCgCICIEbSAEQQFqIglsIgROBEAgCCAJNgIgQQAhAiAEIQMgAUEBaiIBIAdHDQELIAJBAXEhBEEBIQJBACEBIARFDQALCyAAKAJ4IQEgACgCACICIAM2AhggAgJ/IAFBA0YEQCACIAYoAiA2AhwgAiAGKAIkNgIgIAIgBigCKDYCJEHgAAwBCyAAKAIAIQJB4QALNgIUIABBASACKAIEEQIAIABBASADIAAoAnggACgCBCgCCBEIACEOIAAoAngiAUEASgRAQQAhCCADIQIDQCACIAYgCEECdCIEaigCICIMbSEFIAxBAEoEQCAFQXxxIREgBUEDcSEPIAVBAWshEiAEIA5qIQcgDEEBayITQQF2IRRBACELA0AgAyAFIAtsIgRKBEAgC0H/AWwgFGogE20hCgNAAkAgBUEATA0AQQAhCUEAIQFBACEQIBJBA08EQANAIAcoAgAgASAEamogCjoAACAHKAIAIAFBAXIgBGpqIAo6AAAgBygCACABQQJyIARqaiAKOgAAIAcoAgAgAUEDciAEamogCjoAACABQQRqIQEgEEEEaiIQIBFHDQALCyAPRQ0AA0AgBygCACABIARqaiAKOgAAIAFBAWohASAJQQFqIgkgD0cNAAsLIAIgBGoiBCADSA0ACwsgC0EBaiILIAxHDQALIAAoAnghAQsgBSECIAhBAWoiCCABSA0ACwsgBiADNgIUIAYgDjYCECAAEKUFAkAgACgCWEECRw0AIAAoAnhBAEwNACAAKAJwQQF0QQRqIQIgACgC5AMhA0EAIQEDQCADIAFBAnRqIABBASACIAAoAgQoAgQRBAA2AkQgAUEBaiIBIAAoAnhIDQALCyANIAAoAuQDNgIUCyAAKAJsRQRAIAAoAmhFDQELQQAhAiAAIABBAUEsIAAoAgQoAgARBAAiATYC5AMgAUEANgIoIAFBADYCICABQfYBNgIMIAFB9wE2AgAgACgCeEEDRwRAIAAoAgAiA0EwNgIUIAAgAygCABEBAAsgASAAQQFBgAEgACgCBCgCABEEADYCGANAIABBAUGAICAAKAIEKAIEEQQAIQMgAkECdCIEIAEoAhhqIAM2AgAgAEEBQYAgIAAoAgQoAgQRBAAhAyABKAIYIARBBHJqIAM2AgAgAkECaiICQSBHDQALIAFBATYCHAJAIAAoAmwEQEEIIQNBOiEEAkAgACgCYCICQQhOBEAgAkGBAkkNAUE7IQRBgAIhAwsgACgCACIFIAM2AhggBSAENgIUIAAgACgCACgCABEBAAsgAEEBIAJBAyAAKAIEKAIIEQgAIQMgASACNgIUIAEgAzYCEAwBCyABQQA2AhALIAAoAlgEQCAAQQI2AlggASAAQQEgACgCcEEGbEEMaiAAKAIEKAIEEQQANgIgIAAQpAULIA0gACgC5AM2AhgLIAAoAkRFBEACQCANKAIQBEBBACECIAAgAEEBQTAgACgCBCgCABEEACIBNgLcAyABQQA2AgggAUHOATYCACABIAAoAnggACgCcGwiAzYCKAJAIAAoAsACQQJGBEAgAUHPATYCDCABQdABNgIEIABBASADIAAoAgQoAgQRBAAhAgwBCyABQdEBNgIMIAFB0gE2AgQLIAEgAjYCICAAKAIoIQMgACgC3AMiASAAQQFBgAggACgCBCgCABEEADYCECABIABBAUGACCAAKAIEKAIAEQQANgIUIAEgAEEBQYAIIAAoAgQoAgARBAA2AhggASAAQQFBgAggACgCBCgCABEEACIENgIcIAEoAhghBSABKAIUIQYgASgCECEHQQAhAkGAfyEBAkAgA0EHRgRAA0AgByACQQJ0IgNqIAFB05sLbEGAgAJqQRB1NgIAIAMgBmogAUHElg5sQYCAAmpBEHU2AgAgAyAFaiABQd2kemw2AgAgAyAEaiABQc2ffWxBgIACajYCACABQQFqIQEgAkEBaiICQYACRw0ADAILAAsDQCAHIAJBAnQiA2ogAUHpzQVsQYCAAmpBEHU2AgAgAyAGaiABQaKLB2xBgIACakEQdTYCACADIAVqIAFBrpJ9bDYCACADIARqIAFB589+bEGAgAJqNgIAIAFBAWohASACQQFqIgJBgAJHDQALCwwBCyAAIABBAUEcIAAoAgQoAgARBAAiATYC4AMg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IAIgAkELajYCBCADQaKDAiACEOoBQQBMDQAgAigCDCEDIAItAAtB3wFxQc0ARgRAIAIgA0HoB2wiAzYCDAsgASADQegHbDYCLAsgAkEQaiQAIABBADYCuAIgAEEANgIYIABBADYCCCAAQgA3AqQBIABCADcCrAEgAEIANwK0ASAAQgA3ArwBIABCADcCxAEgAEIANwLMASAAIABBAEGsASAAKAIEKAIAEQQAIgE2AtADIAFCADcCYCABQYABNgIcIAFBgQE2AgggAUGCATYCBCABQYMBNgIAIAFBADYCaCABQYABNgIkIAFBgAE2AiggAUIANwJsIAFBgAE2AiwgAUGAATYCMCABQgA3AnQgAUGAATYCNCABQYABNgI4IAFCADcCfCABQYABNgI8IAFBADYChAEgAUGAATYCQCABQgA3AogBIAFBgAE2AkQgAUGAATYCSCABQYABNgJMIAFBgAE2AlAgAUIANwKQASABQYABNgJUIAFCADcCmAEgAUEANgKgASABQYABNgJcIAFBhAE2AiAgAUGEATYCWCAAQQA2ArgDIABBADYCkAEgAEEANgLYASAAKALQAyIBQQA2AqQBIAFBADYCGCABQgA3AgwgACAAQQBBHCAAKAIEKAIAEQQAIgE2AswDIAFBATYCGCABQgA3AhAgAUH8ADYCDCABQf0ANgIIIAFB/gA2AgQgAUH/ADYCACAAQcgBNgIUCyIBAX1BfyAAKgIAIAEqAgCTIgJDAAAAAF4gAkMAAAAAXRsLEAAgASACIAMgACgCABEEAAs5AQF/IAAoAgQiBEEBdSABaiEBIAAoAgAhACABIAIgAyAEQQFxBH8gASgCACAAaigCAAUgAAsRBQALNwEBfyAAKAIEIgNBAXUgAWohASAAKAIAIQAgASACIANBAXEEfyABKAIAIABqKAIABSAACxECAAs0AQF/IwBBEGsiBCQAIAAoAgAhACAEIAM2AgwgASACIARBDGogABEEACEAIARBEGokACAAC1QBAn8jAEEQayIEJAAgACgCBCIFQQF1IAFqIQEgACgCACEAIAVBAXEEQCABKAIAIABqKAIAIQALIAQgAzYCDCABIAIgBEEMaiAAEQUAIARBEGokAAtSAQJ/IwBBEGsiAyQAIAAoAgQiBEEBdSABaiEBIAAoAgAhACAEQQFxBEAgASgCACAAaigCACEACyADIAI2AgwgASADQQxqIAARAgAgA0EQaiQACzYBAX8jAEEQayIEJAAgACgCACEAIAQgAxCPAyABIAIgBCAAEQQAIQAgBBA5GiAEQRBqJAAgAAtWAQJ/IwBBEGsiBCQAIAAoAgQiBUEBdSABaiEBIAAoAgAhACAFQQFxBEAgASgCACAAaigCACEACyAEIAMQjwMgASACIAQgABEFACAEEDkaIARBEGokAAtUAQJ/IwBBEGsiAyQAIAAoAgQiBEEBdSABaiEBIAAoAgAhACAEQQFxBEAgASgCACAAaigCACEACyADIAIQjwMgASADIAARAgAgAxA5GiADQRBqJAALCwAgASACIAARAgALKwIBfwF8IwBBEGsiAiQAIAIgASAAER0AOQMIIAIrAwghAyACQRBqJAAgAwsLACABIAIgABEUAAsnAQF/IwBBEGsiASQAIAEgABEOADYCDCABKAIMIQAgAUEQaiQAIAALCQAgASAAEQEACw8AIAEgACgCAGogAjYCAAsNACABIAAoAgBqKAIACxgBAX9BEBBNIgBCADcDACAAQgA3AwggAAs5AQF/IwBBEGsiAyQAIAMgASACIAARBQBBEBBNIgAgAykCADcCACAAIAMpAgg3AgggA0EQaiQAIAALKwEBfyMAQRBrIgMkACADIAEgAiAAEQMANgIMIAMoAgwhACADQRBqJAAgAAs1AQF/IwBBEGsiAiQAIAIgARCPAyACIAIgABEAADYCDCACKAIMIQAgAhA5GiACQRBqJAAgAAswAQF/IwBBEGsiAyQAIAMgASACIAARBQBBDBBNIAMQkgQhACADEHUgA0EQaiQAIAALKQEBfyMAQRBrIgIkACACIAEgABEAADYCDCACKAIMIQAgAkEQaiQAIAALLQEBfyMAQRBrIgQkACAEIAEgAiADIAARBAA2AgwgBCgCDCEAIARBEGokACAACx8AIAAgARC4BSIAIAIpAgg3AgggACACKQIANwIAQQELeQEDfyABELcBIAJLBEAgASACELgFIQIjAEEQayIDJAAjAEEQayIBJAAgASADQQhqIgU2AgxBEBBNIgQgAikCCDcCCCAEIAIpAgA3AgAgAUEMaiAEEOMDIAFBEGokACAAQaikAiAFEA42AgAgA0EQaiQADwsgABDnAwuAAwEEfyABIAAQtwEiA0sEQCMAQSBrIgYkAAJAIAEgA2siBCAAEDUoAgAgACgCBGtBBHVNBEAjAEEQayIFJAAgBSAAIAQQxAUiAygCBCEBIAMoAgghBANAIAEgBEYEQCADEG8gBUEQaiQABSAAEDUgASACEJEDIAMgAUEQaiIBNgIEDAELCwwBCyAAEDUhASAGQQhqIAAgABC3ASAEahDDBSAAELcBIAEQwgUhAyMAQRBrIgEkACABIAMoAgg2AgAgAygCCCEFIAEgA0EIajYCCCABIAUgBEEEdGo2AgQgASgCACEEA0AgASgCBCAERwRAIAMoAhAgASgCACACEJEDIAEgASgCAEEQaiIENgIADAELCyABEKsBIAFBEGokACAAIAMQwQUgAxC/BQsgBkEgaiQADwsgASADSQRAIAAoAgAgAUEEdGohASAAELcBGiAAIAEQygUgACgCABogACgCACAAEIoCQQR0ahogACgCABogACgCACAAELcBQQR0ahoLCxAAIAAEQCAAENgFCyAAEDQLBgBB8KICCxYAIAIoAgAhAiAAIAEQPCACNgIAQQELYgECfyABEEQgAksEQCABIAIQPCEDIwBBEGsiAiQAIwBBEGsiASQAIAEgAkEIaiIENgIMIAFBDGogAygCABDjAyABQRBqJAAgAEHw4AMgBBAONgIAIAJBEGokAA8LIAAQ5wMLDwAgAARAIAAQdQsgABA0CwYAQZCgAguqAgECfwJAIAIgACABEJkBIgBHBH8gABCIAUUEQCACEIgBRQRAIAAgAigCCDYCCCAAIAIpAgA3AgAMAwsgAhA/IQMgAhA4IQEjAEEQayICJAACQCABQQpNBEAgACABEJIBIAAgAyABELYBIAJBADoADyAAIAFqIAJBD2oQhwEMAQsgAEEKIAFBCmsgAC0ACyIAQQAgACABIAMQtQMLIAJBEGokAAwCCyACED8hAyACEDghASMAQRBrIgIkAAJAIAEgABDpASIESQRAIAAoAgAhBCAAIAEQiwEgBCADIAEQtgEgAkEAOgAPIAEgBGogAkEPahCHAQwBCyAAIARBAWsgASAEa0EBaiAAKAIEIgBBACAAIAEgAxC1AwsgAkEQaiQAQQAFIAALGgtBAQuFAQECfyABEFcgAksEQCABIAIQmQEhASMAQRBrIgIkACAAAn8jAEEQayIAJAAgACACQQhqIgQ2AgwgARA4QQRqEDsi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IAM2AgwgAEEBNgIAIAAgA0EIahDyAyIDNgIQIANEAAAAAAAAAAAQ1wIgAAs2AuQBIABFBEAgAkEIakG5lQIQSyIAEPABIAAQORogASgC4AEiAARAIAAoAgAiAARAIABBABCzBgsgABA0IAEoAuABKAIcEDQgASgC4AEoAiQQNCABKALgASgCNBA0IAEoAuABKAIsEDQgASgC4AEQNCABQQA2AuABCyABKALkASEACyAABEAgAEMAAKBAOAIsCyABKALkASIABEAgAEMAAAA/OAIoCyABKALkASIABEAgAEEQNgIkCyABKALkASIABEAgAEEGNgIYCyABKALkASIABEAgAEEGNgIcCyABKALkASIABEAgAEEGNgIgCyABIAEoAsABELQFNgLgAUEAIQALIAJBIGokACAAC9EEAgh/AnwjAEFAaiIBJAAgASAANgI8IAFBrI0EIAFBPGoQdDYCACABEGw2AjhBfyEAAkAgASABQThqEHkNACABQTxqEH4hAiABQQA2AjggAUF/NgI0IAIoAoACQX5HDQACQAJAAkAgAigC4AEgAigCzAEQ5QcLCwsgAigC4AEiAARAIAEgACgCNDYCOCABIAAoAjg2AjQLIAIrA/gBIQkgAisD8AEhCgJAQcAAEDsiAARAIABCADcDCCAAQgA3AyggAEIANwMYIABCADcDECAAQoCAgICAgID4PzcDICAAQgA3AzAgAEIANwM4IAAEfyAJRAAAAAAAAAAAYSAKRAAAAAAAAAAAYXIEf0F+BSAARAAAAAAAAPA/IAmjIgkgCUQAAAAAAADwPyAKo6CjOQMAQQALBUF/C0EATg0BIAAQNAtBACEACyACIAA2AugBA0AgBSABKAI0IgBODQEgASgCOCAFQcQAbGoiBCgCPEUEQCACIAQoAjAiBjYCgAJBACEDA0BBACEAIANBA0YEQCACIAZBAnRqKAKIAiIEBEAgBEEBNgKYAQNAQQAhAyAAQQNHBEADQCADQQRHBEAgA0ECdCIGIAQgAEEEdCIHamogASAHaiAGaioCADgCCCADQQFqIQMMAQsLIABBAWohAAwBCwsgBEF/NgKoAQsFA0AgAEEERwRAIABBAnQiByABIANBBHQiCGpqIAQgCGogB2oqAgA4AgAgAEEBaiEADAELCyADQQFqIQMMAQsLCyAFQQFqIQUMAAsACyAB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lTgCAEEAIR8gBiEACyACQQFqIQIMAAsACyAEQQFqIQQMAAsAC0EAIQggBkECdEEQaiIEQQAgBEEAShshCyACQQF0QQZqIQUgEiECIBAhBANAIAggC0cEQCACQQA2AgAgBEEANgIAIAhBAWohCCAEQQRqIQQgAkEEaiECDAELC0EAIRYgBkEBdEEGaiIGQQAgBkEAShshJSAFQQAgBUEAShshJiArIC0gFSAobGpqIQxBACERIBIhBSAQIQsDQEEAIQggESAmRwRAA0AgCEECRwRAIAJBADYCACAEQQA2AgAgCEECdCIGIA5BBGpqQQA2AgAgDkEMaiAGakEANgIAIAhBAWohCCAEQQRqIQQgAkEEaiECDAELCyALQQhqIQsgBUEIaiEFQQAhCCAMIQYDQCAIICVHBEAgCEECdEEEcSIpIA5BDGpqIiogBi0AACIdICooAgBqIio2AgAgDkEEaiApaiIpICkoAgAgHSAdbGoiHTYCACACIAUoAgAgKmo2AgAgBCALKAIAIB1qNgIAIAhBAWohCCAEQQRqIQQgC0EEaiELIAJBBGohAiAFQQRqIQUgBkEBaiEGDAELCyARQQFqIREgDCAVaiEMDAELCwNAIBZBB0YNAiAWQQNrISkgFkECaiEqIBYgKGohOUEAIQIDQCACQQdHBEAgAkECaiE6QQAhBiANKAIAIh1BACAdQQBKGyElIA0oAgQiJkEAICZBAEobITsgFUEBdCE8ICsgAiAtaiAVIDlsamohBSANKAIYIQtBACERA0AgESA7RwRAIAUhBCALIQhBACEMA0AgDCAlRwRAIAxBAWohDCAILwEAIAQtAABsIAZqIQYgBEECaiEEIAhBAmohCAwBCwsgEUEBaiERIAUgPGohBSALICVBAXRqIQsMAQsLIA4gECAdQQF0IgVBCGoiCyAqQQJrIghsIgwgOkECayIEakECdCIRaigCACAQIAsgCCAmQQF0amwiCyAEIAVqIgVqQQJ0IghqKAIAaiIdIBAgBSAMakECdCIFaigCACAQIAQgC2pBAnQiBGooAgBqIBEgEmooAgAgCCASaigCAGogBCASaigCACAFIBJqKAIAamsiBCAEbCANKAIkIgVtaiILRwR/IAYgDSgCICAEbCAFbWtB5ABsIA0oAhxtQeQAbAJ/IB0gC2uykSI9i0MAAABPXQRAID2oDAELQYCAgIB4C20FQQALNgIUIAAgDigCFCIESARAIBwgAiA4KAIAakEDazYCDCAcICkgNygCAGo2AgggGCAEskMAQBxGlTgCAEEAIR8gBCEACyACQQFqIQIMAQsLIBZBAWohFgwACwALIBIQNCAQEDQMBAsgF0EBaiEXDAALAAsMAwsMAgsgDkFAayQAIB8MAwsgAkF8cUECciICIAtqISUgAiALayEQIAAoAgRBBG1BAnRBAnIiACALaiEmIAAgC2shCANAAkAgCCAmSg0AAkAgCCAdakEASA0AIAggLWogGk4NASAIIBVsITEgECECA0AgAiAlSg0BAkAgAiANKAIIQQF0a0EASA0AIA0oAgxBAXQgAmogFU4NAiASIAIgMWpqIgAtAAANACAAQQE6AAAgKyAVICEgDSACIAggDkEUahDMBSAOKAIUIRcgDkEwaiERIA5BJGohFiAOQRhqIQxBACEAAkAgDigCPCIFBEAgBUEAIAVBAEobIQYDQAJAIAAgBkcEQCAMIABBAnRqKAIAIBdODQEgACEGCyAFIAZGBEAgBUECSw0EIBEgBUECdCIAaiACNgIAIAAgFmogCDYCACAAIAxqIBc2AgAgDiAOKAI8QQFqNgI8DAQLQQIhACAFQQNHBEAgDiAFQQFqNgI8IAUhAAsDQCAAIAZKBEAgESAAQQJ0IgVqIBEgAEEBayIAQQJ0IihqKAIANgIAIAUgFmogFiAoaigCADYCACAFIAxqIAwgKGooAgA2AgAMAQsLIBEgAEECdCIAaiACNgIAIAAgFmogCDYCACAAIAxqIBc2AgAMAwsgAEEBaiEADAALAAsgESACNgIAIBYgCDYCACAMIBc2AgAgDkEBNgI8C0EAIQYLIAJBBGohAgwACwALIAhBBGohCAwBCwsgBEEBaiEEDAELCwwLC0EASARAQX8hLAwBCyAYIBwoAgyyOAIEIBggHCgCCLI4AgggGCAjKAIAICBB8ABsaiIAKgIYIAAqAgwgACgCBCgCACAnQRRsaigCACAkQRRsaiICKgIIlCAAKgIQIAIqAgyUkpI4AgwgGCAAKgIoIAAqAhwgAioCCJQgACoCICACKgIMlJKSOAIQIBggACoCOCAAKgIsIAIqAgiUIAAqAjAgAioCDJSSkjgCFAsgHEEwaiQAICwLNgIAAkAgLA0AIBgqAgAgByoCKF5FDQAgByAJQQN0aiICQdQOagJ9IAcoAgBBAUYEQCAHKAIMIgBB6ABqIBlBgOgAaioCALsgGUGE6ABqKgIAuyAiQQhqICIgACgCsAEQtgYgByAJQQN0akHQDmogIisDCLY4AgAgIisDALYMAQsgByAJQQN0akHQDmogGUGA6ABqKgIAOAIAIBlBhOgAaioCAAs4AgAgByAJQQxsaiIAQZARaiAZQYjoAGoqAgA4AgAgAEGUEWogGUGM6ABqKgIAOAIAIABBmBFqIBlBkOgAaioCADgCACACQdALaiAiQRBqIApBAnRqKAIAIgAqAhA4AgAgAkHUC2ogACoCFDgCACAHIAlBGGxqIgJBoOAAaiAAKAIANgIAIAJBpOAAaiAAKAIENgIAIAAoAgghACACQazgAGpBADYCACACQajgAGogADYCACAJQQFqIQkLIApBAWohCgwACwALICJBEGogG0ECdGogEyAKQRhsaiICNgIAIAcgAEEDdGoiBEHQC2ogAioCEDgCACAEQdQLaiACKgIUOAIAIAcgG0E0bGoiBEHw5wBqIDI2AgAgBEHs5wBqIAI2AgAgBEHo5wBqIA82AgAgBEHk5wBqIAc2AgAgCSAAQQFqIgAgAEEFRhshACAbQQFqIRsgMEEBaiEwDAALAAsLQQAhACAJQQAgCUEAShshBgNAIAAgBkcEQCAPIABBGGwiBGoiAiAEIAdqIgRBsOAAaikCADcCrAEgAiAEQajgAGopAgA3AqQBIAIgBEGg4ABqKQIANwKcASAAQQFqIQAMAQsLIA8gCUEYbGpBfzYCqAECQAJAIAcoAgBBAUYEQEF9IQogCUEDSA0CIAMgBygCECAvIAdB0A5qIgAgB0GQEWoiAiAJIBRBABDSAiI9OAKcASA9IAcqAixeRQ0BIAcoAhBEAAAAoJmZ6T8Q1wIgAyAHKAIQIBQgACACIAkgFEEBENICIj04ApwBID0gByoCLF5FDQEgBygCEEQAAABAMzPjPxDXAiADIAcoAhAgFCAAIAIgCSAUQQEQ0gIiPTgCnAEgPSAHKgIsXkUNASAHKAIQRAAAAKCZmdk/ENcCIAMgBygCECAUIAAgAiAJIBRBARDSAiI9OAKcASA9IAcqAixeRQ0BIAcoAhBEAAAAAAAAAAAQ1wIgAyAHKAIQIBQgACACIAkgFEEBENICIj04ApwBQXwhCiA9IAcqAixeRQ0BDAILQX0hCiAJQQNIDQEgAyAvIAdB0A5qIgAgB0GQEWoiAiAJIBRBAEMAAIA/ENECIj04ApwBID0gByoCLF5FDQAgAyAUIAAgAiAJIBRBAUPNzEw/ENECIj04ApwBID0gByoCLF5FDQAgAyAUIAAgAiAJIBRBAUOamRk/ENECIj04ApwBID0gByoCLF5FDQAgAyAUIAAgAiAJIBRBAUPNzMw+ENECIj04ApwBID0gByoCLF5FDQAgAyAUIAAgAiAJIBRBAUMAAAAAENECIj04ApwBQXwhCiA9IAcqAixeDQELIA8gDygCmAFBAWo2ApgBQQAhCkEAIRsDQEEAIQAgG0EDRgRAA0BBACEAIApBA0YEQANAQQAhCiAAQQNGDQYDQCAKQQRHBEAgCkECdCICIA8gAEEEdCIEamogBCAUaiACaioCADgCCCAKQQFqIQoMAQsLIABBAWohAAwACwAFA0AgAEEERwRAIA8gCkEEdGogAEECdGoiAiACKgIIOAI4IABBAWohAAwBCwsgCkEBaiEKDAELAAsABQNAIABBBEcEQCAPIBtBBHRqIABBAnRqIgIgAioCODgCaCAAQQFqIQAMAQsLIBtBAWohGwwBCwALAAsgD0EANgKYAQsgIkEwaiQAA0ACQEEAIQAgLkEDRgRAIB4oAugBIQIgCkEfdiEEIwBBQGoiACQAIAIEfyAAAnwgAysDgAIiQyADKwOoAiJEoCADKwPQAiJFoEQAAAAAAADwP6AiRkQtQxzr4jYaP2QEQCAAIAMrA7ACIAMrA8gCoSBGnyJDIEOgIkOjOQMgIAAgAysDwAIgAysDkAKhIEOjOQMoIAAgAysDiAIgAysDoAKhIEOjOQMwIENEAAAAAAAA0D+iDAELIEMgRGRFIEMgRWRFckUEQCAAIENEAAAAAAAA8D+gIEShIEWhnyJDIEOgIkNEAAAAAAAA0D+iOQMgIAAgAysDiAIgAysDoAKgIEOjOQMoIAAgAysDwAIgAysDkAKgIEOjOQMwIAMrA7ACIAMrA8gCoSBDowwBCyBEIEVkBEAgAysDoAIhRiADKwOIAiFHIAAgREQAAAAAAADwP6AgQ6EgRaGfIkMgQ6AiQ0QAAAAAAADQP6I5AyggACBHIEagIEOjOQMgIAAgAysDsAIgAysDyAKgIEOjOQMwIAMrA8ACIAMrA5ACoSBDowwBCyAAIAMrA8ACIAMrA5ACoCBFRAAAAAAAAPA/oCBDoSBEoZ8iQyBDoCJDozkDICADKwPIAiFEIAMrA7ACIUUgACBDRAAAAAAAANA/ojkDMCAAIEUgRKAgQ6M5AyggAysDiAIgAysDoAKhIEOjCzkDOCAAIAMrA5gCOQMAIAAgAysDuAI5AwggACADKwPYAjkDECAAQSBqEOUGAkAgBARAIAIgACsDIDkDCCACIAArAyg5AxAgAiAAKwMwOQMYIAIgACsDODkDICACIAArAwA5AyggAiAAKwMIOQMwIAIgACsDEDkDOAwBC0QAAAAAAADwPyACKwMAIkOhIkchRiBDIUQgACsDOCJKIAIrAyAiTKIgACsDMCJIIAIrAxgiTaIgACsDICJJIAIrAwgiTqIgACsDKCJLIAIrAxAiT6KgoKAiRUQAAAAAAAAAAGMEQCAAIEqaIko5AzggACBImiJIOQMwIAAgS5oiSzkDKCAAIEmaIkk5AyAgRZohRQsgRUSWQ4ts5/vvP2RFBEAgQwJ8IEW9IlBCIIinQf////8HcSIEQYCAwP8DTwRARAAAAAAAAAAARBgtRFT7IQlAIFBCAFkbIFCnIARBgIDA/wNrckUNARpEAAAAAAAAAAAgRSBFoaMMAQsCfCAEQf////4DTQRARBgtRFT7Ifk/IARBgYCA4wNJDQEaRAdcFDMmppE8IEUgRSBFohDeA6KhIEWhRBgtRFT7Ifk/oAwCCyBQQgBTBEBEGC1EVPsh+T8gRUQAAAAAAADwP6BEAAAAAAAA4D+iIkSfIkUgRSBEEN4DokQHXBQzJqaRvKCgoSJEIESgDAILRAAAAAAAAPA/IEWhRAAAAAAAAOA/oiJEnyJFIEQQ3gOiIEQgRb1CgICAgHCDvyJEIESioSBFIESgo6AgRKAiRCBEoAsLIkWiEIMDIEUQgwMiRqMhRCBHIEWiEIMDIEajIUYLIAIgSiBEoiBMIEaioDkDICACIEggRKIgTSBGoqA5AxggAiBLIESiIE8gRqKgOQMQIAIgSSBEoiBOIEaioDkDCCACQQhqEOUGIAIgACsDACBDoiBHIAIrAyiioDkDKCACIAArAwggQ6IgRyACKwMwoqA5AzAgAiAAKwMQIEOiIEcgAisDOKKgOQM4CyADIAIrAwgiQyACKwMQIkQgRKAiRqIiSCACKwMgIkcgAisDGCJKIEqgIkWiIkmhOQOgAiADIEMgRaIiSyBGIEeiIkygOQPAAiADIEggSaA5A4gCIAMgRCBFoiJIIEcgQyBDoCJHoiJJoTkDyAIgAyBLIEyhOQOQAiADIEggSaA5A7ACIANEAAAAAAAA8D8gQyBHoiJDIEQgRqIiRKChOQPQAiADRAAAAAAAAPA/IEMgSiBFoiJDoKE5A6gCIANEAAAAAAAA8D8gRCBDoKE5A4ACIAMgAisDKDkDmAIgAyACKwMwOQO4AiADIAIrAzg5A9gCQQAFQX8LIQIgAEFAayQAIAJBAEgEQCADQZABakHRlQIQSyECIwBBEGsiACQAIAAgAhA/NgIAIAAgATYCDCAAQfzkAygCADYCBCAAQYDlAygCADYCCEGZ9wNBktcBIAAQCBogAEEQaiQAIAIQORoLIANBgAJqIQIgA0GgAWohBEEAIQADQAJAQQAhCSAAQQNGDQADQCAJQQRGBEAgAEEBaiEADAMFIAlBA3QiBiAEIABBBXQiBWpqIgsgCysDACJDIAIgBWogBmorAwAgQ6FEAAAAYGZm7j+joDkDACAJQQFqIQkMAQsACwALCyAKQQBODQEgA0GQAWpB14ICEEsiACAKEMcBIAAQORpBfiEAIB5BfjYCgAIMAwUDQCAAQQRHBEAgA0GAAmogLkEFdGogAEEDdGogA0HgAmogLkEEdGogAEECdGoqAgC7OQMAIABBAWohAAwBCwsgLkEBaiEuDAILAAsLIB4gHigCgAJBAnRqKAKIAiEAIAMgHigChAJBAWs2AoQBIAMgADYCgAFBAEEBQaiYAiADQYABahA9IB4oAoACIQALAkAgACABRgRAIAMgAysDoAE5AxAgAyADKwOoATkDGCADIAMrA7ABOQMgIAMgAysDuAE5AyggAyADKwPAATkDMCADIAMrA+ABOQNQIAMgAysDyAE5AzggA0FAayADKwPQATkDACADIAMrA9gBOQNIIAMgAysD6AE5A1ggAyADKwPwATkDYCADIAMrA/gBOQNoIAMgATYCACADIAMqApwBuzkDCEGegARBg5kCIAMQCBoMAQsgAyABNgJwQeCFBEGSmQIgA0HwAGoQCBoLQQALIQAgA0GgA2okACAADwtBAEEDQaQOQQAQPUEBEAMACzQBAX9ByI0EKAIAIQBBwI0EEDUaA0AgAARAIAAoAgAhASAAEDQgASEADAELC0HAjQQQsgILPwECf0G0jQQoAgAhAEGsjQQQNSEBA0AgAARAIAAoAgAhAiABIABBCGoQyQUgABA0IAIhAAwBCwtBrI0EELICCxEAIAAoAgBBhAFqQQEQ9wQACxQAIABBDGpBACABKAIEQazWAUYbCwwAIABBDGooAgAQNAsUACAAQQxqQQAgASgCBEGE1QFGGwsLACAAQQxqKAIAGgsqAQF8QX8gACsDACABKwMAoSICRAAAAAAAAAAAZCACRAAAAAAAAAAAYxsLFAAgAEEMakEAIAEoAgRB8M4BRhsLEQAgAEEMaiIAIAAoAgAQkAYLagEBf0GcjQQQ5AJBnI0EKAIABEBBnI0EKAIAIQFBoI0EKAIAIQADQCAAIAFHBEBBnI0EEDUaIABBCGsiABDRAQwBCwtBoI0EIAE2AgBBnI0EEDUaQZyNBCgCACEAQZyNBBDUARogABA0CwsJACAAQQRqED8LCQAgABC4BhA0CwkAIAAQjQQQNAsJACAAEI4EEDQLcwEEfyAAIAAoAgBBDGsoAgBqQQoQtwchAiMAQRBrIgEkAAJAIAFBCGogABD6AiIDLQAARQ0AIAEgABDEAyIEIAIQygMgBBDxAkUNACAAIAAoAgBBDGsoAgBqQQEQxAILIAMQxQIgAUEQaiQAIAAQ+wIgAAsHACAAKAIICwcAIAAoAgQLJQAgASACIAMgBCAFIAatIAetQiCGhCAIrSAJrUIghoQgABEeAAsjACABIAIgAyAEIAWtIAatQiCGhCAHrSAIrUIghoQgABEfAAsZACABIAIgAyAEIAWtIAatQiCGhCAAERYACxkAIAEgAiADrSAErUIghoQgBSAGIAARLQALIgEBfiABIAKtIAOtQiCGhCAEIAAREwAiBUIgiKcQAiAFpwsGACAAJAALBAAjAAsMACAAEK0EGiAAEDQLCQAgABCtBBA0CwYAQZjsAQsbACAAIAEoAgggBRB/BEAgASACIAMgBBCwBAsLOAAgACABKAIIIAUQfwRAIAEgAiADIAQQsAQPCyAAKAIIIgAgASACIAMgBCAFIAAoAgAoAhQRCwALlgIBBn8gACABKAIIIAUQfwRAIAEgAiADIAQQsAQPCyABLQA1IQcgACgCDCEGIAFBADoANSABLQA0IQggAUEAOgA0IABBEGoiCSABIAIgAyAEIAUQrgQgByABLQA1IgpyIQcgCCABLQA0IgtyIQgCQCAGQQJIDQAgCSAGQQN0aiEJIABBGGohBgNAIAEtADYNAQJAIAsEQCABKAIYQQFGDQMgAC0ACEECcQ0BDAMLIApFDQAgAC0ACEEBcUUNAgsgAUEAOwE0IAYgASACIAMgBCAFEK4EIAEtADUiCiAHciEHIAEtADQiCyAIciEIIAZBCGoiBiAJSQ0ACwsgASAHQf8BcUEARzoANSABIAhB/wFxQQBHOgA0C5IBACAAIAEoAgggBBB/BEAgASACIAMQrwQPCwJAIAAgASgCACAEEH9FDQACQCACIAEoAhBHBEAgASgCFCACRw0BCyADQQFHDQEgAUEBNgIgDwsgASACNgIUIAEgAzYCICABIAEoAihBAWo2AigCQCABKAIkQQFHDQAgASgCGEECRw0AIAFBAToANgsgAUEENgIsCwvzAQAgACABKAIIIAQQfwRAIAEgAiADEK8EDwsCQCAAIAEoAgAgBBB/BEACQCACIAEoAhBHBEAgASgCFCACRw0BCyADQQFHDQIgAUEBNgIgDwsgASADNgIgAkAgASgCLEEERg0AIAFBADsBNCAAKAIIIgAgASACIAJBASAEIAAoAgAoAhQRCwAgAS0ANQRAIAFBAzYCLCABLQA0RQ0BDAMLIAFBBDYCLAsgASACNgIUIAEgASgCKEEBajYCKCABKAIkQQFHDQEgASgCGEECRw0BIAFBAToANg8LIAAoAggiACABIAIgAyAEIAAoAgAoAhgRBgALC50EAQN/IAAgASgCCCAEEH8EQCABIAIgAxCvBA8LAkAgACABKAIAIAQQfwRAAkAgAiABKAIQRwRAIAEoAhQgAkcNAQsgA0EBRw0CIAFBATYCIA8LIAEgAzYCICABKAIsQQRHBEAgAEEQaiIFIAAoAgxBA3RqIQdBACEDIAECfwJAA0ACQCAFIAdPDQAgAUEAOwE0IAUgASACIAJBASAEEK4EIAEtADYNAAJAIAEtADVFDQAgAS0ANARAQQEhAyABKAIYQQFGDQRBASEGIAAtAAhBAnENAQwEC0EBIQYgAC0ACEEBcUUNAwsgBUEIaiEFDAELC0EEIAZFDQEaC0EDCzYCLCADQQFxDQILIAEgAjYCFCABIAEoAihBAWo2AiggASgCJEEBRw0BIAEoAhhBAkcNASABQQE6ADYPCyAAKAIMIQUgAEEQaiIGIAEgAiADIAQQtAMgBUECSA0AIAYgBUEDdGohBiAAQRhqIQUCQCAAKAIIIgBBAnFFBEAgASgCJEEBRw0BCwNAIAEtADYNAiAFIAEgAiADIAQQtAMgBUEIaiIFIAZJDQALDAELIABBAXFFBEADQCABLQA2DQIgASgCJEEBRg0CIAUgASACIAMgBBC0AyAFQQhqIgUgBkkNAAwCCwALA0AgAS0ANg0BIAEoAiRBAUYEQCABKAIYQQFGDQILIAUgASACIAMgBBC0AyAFQQhqIgUgBkkNAAsLC9sFAQR/IwBBQGoiBSQAAkAgAUGc4ANBABB/BEAgAkEANgIAQQEhAwwBCwJAIAAgASAALQAIQRhxBH9BAQUgAUUNASABQbDdA0GQ3gMQsgEiBkUNASAGLQAIQRhxQQBHCxB/IQQLIAQEQEEBIQMgAigCACIARQ0BIAIgACgCADYCAAwBCwJAIAFFDQAgAUGw3QNBwN4DELIBIgRFDQEgAigCACIBBEAgAiABKAIANgIACyAEKAIIIgEgACgCCCIGQX9zcUEHcSABQX9zIAZxQeAAcXINAUEBIQMgACgCDCAEKAIMQQAQfw0BIAAoAgxBkOADQQAQfwRAIAQoAgwiAEUNAiAAQbDdA0H03gMQsgFFIQMMAgsgACgCDCIBRQ0AQQAhAyABQbDdA0HA3gMQsgEiAQRAIAAtAAhBAXFFDQICfyABIQAgBCgCDCECAkADQEEAIAJFDQIaIAJBsN0DQcDeAxCyASICRQ0BIAIoAgggACgCCEF/c3ENAUEBIAAoAgwgAigCDEEAEH8NAhogAC0ACEEBcUUNASAAKAIMIgFFDQEgAUGw3QNBwN4DELIBIgEEQCACKAIMIQIgASEADAELCyAAKAIMIgBFDQAgAEGw3QNBsN8DELIBIgBFDQAgACACKAIMEPcGIQMLIAMLIQMMAgsgACgCDCIBRQ0BIAFBsN0DQbDfAxCyASIBBEAgAC0ACEEBcUUNAiABIAQoAgwQ9wYhAwwCCyAAKAIMIgBFDQEgAEGw3QNB4N0DELIBIgFFDQEgBCgCDCIARQ0BIABBsN0DQeDdAxCyASIARQ0BIAVBCGoiA0EEckEAQTQQOhogBUEBNgI4IAVBfzYCFCAFIAE2AhAgBSAANgIIIAAgAyACKAIAQQEgACgCACgCHBEHAAJAIAUoAiAiAEEBRw0AIAIoAgBFDQAgAiAFKAIYNgIACyAAQQFGIQMMAQtBACEDCyAFQUBrJAAgAwtvAQJ/IAAgASgCCEEAEH8EQCABIAIgAxCyBA8LIAAoAgwhBCAAQRBqIgUgASACIAMQ+AYCQCAEQQJIDQAgBSAEQQN0aiEEIABBGGohAANAIAAgASACIAMQ+AYgAS0ANg0BIABBCGoiACAESQ0ACwsLMgAgACABKAIIQQAQfwRAIAEgAiADELIEDwsgACgCCCIAIAEgAiADIAAoAgAoAhwRBwALGQAgACABKAIIQQAQfwRAIAEgAiADELIECwukAQECfyMAQUBqIgMkAAJ/QQEgACABQQAQfw0AGkEAIAFFDQAaQQAgAUGw3QNB4N0DELIBIgFFDQAaIANBCGoiBEEEckEAQTQQOhogA0EBNgI4IANBfzYCFCADIAA2AhAgAyABNgIIIAEgBCACKAIAQQEgASgCACgCHBEHACADKAIgIgBBAUYEQCACIAMoAhg2AgALIABBAUYLIQAgA0FAayQAIAALCgAgACABQQAQfwsJAEHcsAQQORoLJQBB6LAELQAARQRAQdywBEGQtQMQvAJB6LAEQQE6AAALQdywBAsJAEHMsAQQORoLJQBB2LAELQAARQRAQcywBEH76wEQSxpB2LAEQQE6AAALQcywBAsJAEG8sAQQORoLJQBByLAELQAARQRAQbywBEG8tAMQvAJByLAEQQE6AAALQbywBAsJAEGssAQQORoLJQBBuLAELQAARQRAQaywBEGuhAIQSxpBuLAEQQE6AAALQaywBAsJAEGcsAQQORoLJQBBqLAELQAARQRAQZywBEGYtAMQvAJBqLAEQQE6AAALQZywBAsJAEGMsAQQORoLJQBBmLAELQAARQRAQYywBEGnhgIQSxpBmLAEQQE6AAALQYywBAsJAEH8rwQQORoLJQBBiLAELQAARQRAQfyvBEH0swMQvAJBiLAEQQE6AAALQfyvBAsJAEHsrwQQORoLJQBB+K8ELQAARQRAQeyvBEGU2AEQSxpB+K8EQQE6AAALQeyvBAsbAEHouAQhAANAIABBDGsQOSIAQdC4BEcNAAsLbQBB6K8ELQAABEBB5K8EKAIADwtB6LgELQAARQRAQdC4BCEAA0AgABBFQQxqIgBB6LgERw0AC0HouARBAToAAAtB0LgEQaDbAxBUQdy4BEGs2wMQVEHorwRBAToAAEHkrwRB0LgENgIAQdC4BAsbAEHIuAQhAANAIABBDGsQOSIAQbC4BEcNAAsLbQBB4K8ELQAABEBB3K8EKAIADwtByLgELQAARQRAQbC4BCEAA0AgABBFQQxqIgBByLgERw0AC0HIuARBAToAAAtBsLgEQYaIAhBVQby4BEH7hwIQVUHgrwRBAToAAEHcrwRBsLgENgIAQbC4BAsbAEGguAQhAANAIABBDGsQOSIAQYC2BEcNAAsLyQIAQdivBC0AAARAQdSvBCgCAA8LQaC4BC0AAEUEQEGAtgQhAANAIAAQRUEMaiIAQaC4BEcNAAtBoLgEQQE6AAALQYC2BEGY1wMQVEGMtgRBuNcDEFRBmLYEQdzXAxBUQaS2BEH01wMQVEGwtgRBjNgDEFRBvLYEQZzYAxBUQci2BEGw2AMQVEHUtgRBxNgDEFRB4LYEQeDYAxBUQey2BEGI2QMQVEH4tgRBqNkDEFRBhLcEQczZAxBUQZC3BEHw2QMQVEGctwRBgNoDEFRBqLcEQZDaAxBUQbS3BEGg2gMQVEHAtwRBjNgDEFRBzLcEQbDaAxBUQdi3BEHA2gMQVEHktwRB0NoDEFRB8LcEQeDaAxBUQfy3BEHw2gMQVEGIuARBgNsDEFRBlLgEQZDbAxBUQdivBEEBOgAAQdSvBEGAtgQ2AgBBgLYECxsAQfC1BCEAA0AgAEEMaxA5IgBB0LMERw0ACwvJAgBB0K8ELQAABEBBzK8EKAIADwtB8LUELQAARQRAQdCzBCEAA0AgABBFQQxqIgBB8LUERw0AC0HwtQRBAToAAAtB0LMEQcrXARBVQdyzBEHB1wEQVUHoswRB7e8BEFVB9LMEQaLuARBVQYC0BEGQ2AEQVUGMtARB9fEBEFVBmLQEQdLXARBVQaS0BEGE4QEQVUGwtARB5eoBEFVBvLQEQdTqARBVQci0BEHc6gEQVUHUtARB7+oBEFVB4LQEQertARBVQey0BEHogwIQVUH4tARBlusBEFVBhLUEQc/pARBVQZC1BEGQ2AEQVUGctQRBlOwBEFVBqLUEQe7tARBVQbS1BEHz7wEQVUHAtQRB9+sBEFVBzLUEQZbkARBVQdi1BEHX2wEQVUHktQRBnoMCEFVB0K8EQQE6AABBzK8EQdCzBDYCAEHQswQLGwBByLMEIQADQCAAQQxrEDkiAEGgsgRHDQALC+UBAEHIrwQtAAAEQEHErwQoAgAPC0HIswQtAABFBEBBoLIEIQADQCAAEEVBDGoiAEHIswRHDQALQcizBEEBOgAAC0GgsgRBxNQDEFRBrLIEQeDUAxBUQbiyBEH81AMQVEHEsgRBnNUDEFRB0LIEQcTVAxBUQdyyBEHo1QMQVEHosgRBhNYDEFRB9LIEQajWAxBUQYCzBEG41gMQVEGMswRByNYDEFRBmLMEQdjWAxBUQaSzBEHo1gMQVEGwswRB+NYDEFRBvLMEQYjXAxBUQcivBEEBOgAAQcSvBEGgsgQ2AgBBoLIECxsAQZiyBCEAA0AgAEEMaxA5IgBB8LAERw0ACwvlAQBBwK8ELQAABEBBvK8EKAIADwtBmLIELQAARQRAQfCwBCEAA0AgABBFQQxqIgBBmLIERw0AC0GYsgRBAToAAAtB8LAEQfvXARBVQfywBEGC2AEQVUGIsQRB4NcBEFVBlLEEQejXARBVQaCxBEHX1wEQVUGssQRBidgBEFVBuLEEQfLXARBVQcSxBEGQ7AEQVUHQsQRBke0BEFVB3LEEQc/xARBVQeixBEGH+gEQVUH0sQRB29sBEFVBgLIEQdruARBVQYyyBEGg5AEQVUHArwRBAToAAEG8rwRB8LAENgIAQfCwBAsLACAAQdyzAxC8AgsLACAAQdPxARBLGgsLACAAQcizAxC8AgsLACAAQcrxARBLGgsMACAAIAFBEGoQ3QILDAAgACABQQxqEN0CCwcAIAAsAAkLBwAgACwACAsJACAAEIcHEDQLCQAgABCIBxA0C+0DAQV/AkAgAyACIgBrQQNIDQALA0ACQCAEIAhNIAAgA09yDQAgACwAACIGQf8BcSEBAkAgBkEATgRAQQEhBiABQf//wwBNDQEMAgsgBkFCSQ0BIAZBX00EQCADIABrQQJIDQIgAC0AASIFQcABcUGAAUcNAkECIQYgBUE/cSABQQZ0QcAPcXJB///DAE0NAQwCCwJAAkAgBkFvTQRAIAMgAGtBA0gNBCAALQACIQcgAC0AASEFIAFB7QFGDQEgAUHgAUYEQCAFQeABcUGgAUYNAwwFCyAFQcABcUGAAUcNBAwCCyADIABrQQRIIAZBdEtyDQMgAC0AAyEHIAAtAAIhCSAALQABIQUCQAJAAkACQCABQfABaw4FAAICAgECCyAFQfAAakH/AXFBMEkNAgwGCyAFQfABcUGAAUYNAQwFCyAFQcABcUGAAUcNBAsgCUHAAXFBgAFHIAdBwAFxQYABR3INA0EEIQYgB0E/cSAJQQZ0QcAfcSABQRJ0QYCA8ABxIAVBP3FBDHRycnJB///DAEsNAwwCCyAFQeABcUGAAUcNAgsgB0HAAXFBgAFHDQFBAyEGIAdBP3EgAUEMdEGA4ANxIAVBP3FBBnRyckH//8MASw0BCyAIQQFqIQggACAGaiEADAELCyAAIAJrC94EAQV/IwBBEGsiACQAIAAgAjYCDCAAIAU2AggCfyAAIAI2AgwgACAFNgIIAkACQANAAkAgACgCDCIBIANPDQAgACgCCCIMIAZPDQAgASwAACIFQf8BcSECAkAgBUEATgRAIAJB///DAE0EQEEBIQUMAgtBAgwGC0ECIQogBUFCSQ0DIAVBX00EQCADIAFrQQJIDQUgAS0AASIIQcABcUGAAUcNBEECIQUgCEE/cSACQQZ0QcAPcXIiAkH//8MATQ0BDAQLIAVBb00EQCADIAFrQQNIDQUgAS0AAiEJIAEtAAEhCAJAAkAgAkHtAUcEQCACQeABRw0BIAhB4AFxQaABRg0CDAcLIAhB4AFxQYABRg0BDAYLIAhBwAFxQYABRw0FCyAJQcABcUGAAUcNBEEDIQUgCUE/cSACQQx0QYDgA3EgCEE/cUEGdHJyIgJB///DAE0NAQwECyAFQXRLDQMgAyABa0EESA0EIAEtAAMhCSABLQACIQsgAS0AASEIAkACQAJAAkAgAkHwAWsOBQACAgIBAgsgCEHwAGpB/wFxQTBJDQIMBgsgCEHwAXFBgAFGDQEMBQsgCEHAAXFBgAFHDQQLIAtBwAFxQYABRyAJQcABcUGAAUdyDQNBBCEFIAlBP3EgC0EGdEHAH3EgAkESdEGAgPAAcSAIQT9xQQx0cnJyIgJB///DAEsNAwsgDCACNgIAIAAgASAFajYCDCAAIAAoAghBBGo2AggMAQsLIAEgA0khCgsgCgwBC0EBCyEBIAQgACgCDDYCACAHIAAoAgg2AgAgAEEQaiQAIAELjgQAIwBBEGsiACQAIAAgAjYCDCAAIAU2AggCfyAAIAI2AgwgACAFNgIIIAAoAgwhAQJAA0AgASADTwRAQQAhAgwCC0ECIQIgASgCACIBQf//wwBLIAFBgHBxQYCwA0ZyDQECQAJAIAFB/wBNBEBBASECIAYgACgCCCIFa0EATA0EIAAgBUEBajYCCCAFIAE6AAAMAQsgAUH/D00EQCAGIAAoAggiAmtBAkgNAiAAIAJBAWo2AgggAiABQQZ2QcABcjoAACAAIAAoAggiAkEBajYCCCACIAFBP3FBgAFyOgAADAELIAYgACgCCCICayEFIAFB//8DTQRAIAVBA0gNAiAAIAJBAWo2AgggAiABQQx2QeABcjoAACAAIAAoAggiAkEBajYCCCACIAFBBnZBP3FBgAFyOgAAIAAgACgCCCICQQFqNgIIIAIgAUE/cUGAAXI6AAAMAQsgBUEESA0BIAAgAkEBajYCCCACIAFBEnZB8AFyOgAAIAAgACgCCCICQQFqNgIIIAIgAUEMdkE/cUGAAXI6AAAgACAAKAIIIgJBAWo2AgggAiABQQZ2QT9xQYABcjoAACAAIAAoAggiAkEBajYCCCACIAFBP3FBgAFyOgAACyAAIAAoAgxBBGoiATYCDAwBCwtBAQwBCyACCyEBIAQgACgCDDYCACAHIAAoAgg2AgAgAEEQaiQAIAEL+QMBBH8CQCADIAIiAGtBA0gNAAsDQAJAIAQgBk0gACADT3INACAALQAAIgFB///DAEsNAAJ/IABBAWogAUEYdEEYdUEATg0AGiABQcIBSQ0BIAFB3wFNBEAgAyAAa0ECSA0CIAAtAAEiBUHAAXFBgAFHIAVBP3EgAUEGdEHAD3FyQf//wwBLcg0CIABBAmoMAQsCQAJAIAFB7wFNBEAgAyAAa0EDSA0EIAAtAAIhByAALQABIQUgAUHtAUYNASABQeABRgRAIAVB4AFxQaABRg0DDAULIAVBwAFxQYABRw0EDAILIAMgAGtBBEggAUH0AUtyIAQgBmtBAklyDQMgAC0AAyEHIAAtAAIhCCAALQABIQUCQAJAAkACQCABQfABaw4FAAICAgECCyAFQfAAakH/AXFBMEkNAgwGCyAFQfABcUGAAUYNAQwFCyAFQcABcUGAAUcNBAsgCEHAAXFBgAFHIAdBwAFxQYABR3IgB0E/cSAIQQZ0QcAfcSABQRJ0QYCA8ABxIAVBP3FBDHRycnJB///DAEtyDQMgBkEBaiEGIABBBGoMAgsgBUHgAXFBgAFHDQILIAdBwAFxQYABRyAHQT9xIAFBDHRBgOADcSAFQT9xQQZ0cnJB///DAEtyDQEgAEEDagshACAGQQFqIQYMAQsLIAAgAmsL0wUBBH8jAEEQayIAJAAgACACNgIMIAAgBTYCCAJ/IAAgAjYCDCAAIAU2AggCQAJAAkADQAJAIAAoAgwiASADTw0AIAAoAggiBSAGTw0AQQIhCiABLQAAIgJB///DAEsNBCAAAn8gAkEYdEEYdUEATgRAIAUgAjsBACABQQFqDAELIAJBwgFJDQUgAkHfAU0EQCADIAFrQQJIDQUgAS0AASIIQcABcUGAAUcNBCAIQT9xIAJBBnRBwA9xciICQf//wwBLDQQgBSACOwEAIAFBAmoMAQsgAkHvAU0EQCADIAFrQQNIDQUgAS0AAiEJIAEtAAEhCAJAAkAgAkHtAUcEQCACQeABRw0BIAhB4AFxQaABRg0CDAcLIAhB4AFxQYABRg0BDAYLIAhBwAFxQYABRw0FCyAJQcABcUGAAUcNBCAJQT9xIAhBP3FBBnQgAkEMdHJyIgJB//8DcUH//8MASw0EIAUgAjsBACABQQNqDAELIAJB9AFLDQVBASEKIAMgAWtBBEgNAyABLQADIQkgAS0AAiEIIAEtAAEhAQJAAkACQAJAIAJB8AFrDgUAAgICAQILIAFB8ABqQf8BcUEwTw0IDAILIAFB8AFxQYABRw0HDAELIAFBwAFxQYABRw0GCyAIQcABcUGAAUcgCUHAAXFBgAFHcg0FIAYgBWtBBEgNA0ECIQogCUE/cSIJIAhBBnQiC0HAH3EgAUEMdEGA4A9xIAJBB3EiAkESdHJyckH//8MASw0DIAUgCEEEdkEDcSABQQJ0IgFBwAFxIAJBCHRyIAFBPHFyckHA/wBqQYCwA3I7AQAgACAFQQJqNgIIIAUgC0HAB3EgCXJBgLgDcjsBAiAAKAIMQQRqCzYCDCAAIAAoAghBAmo2AggMAQsLIAEgA0khCgsgCgwCC0EBDAELQQILIQEgBCAAKAIMNgIAIAcgACgCCDYCACAAQRBqJAAgAQv6BQEBfyMAQRBrIgAkACAAIAI2AgwgACAFNgIIAn8gACACNgIMIAAgBTYCCCAAKAIMIQICQAJAA0AgAiADTwRAQQAhBQwDC0ECIQUgAi8BACIBQf//wwBLDQICQAJAIAFB/wBNBEBBASEFIAYgACgCCCICa0EATA0FIAAgAkEBajYCCCACIAE6AAAMAQsgAUH/D00EQCAGIAAoAggiAmtBAkgNBCAAIAJBAWo2AgggAiABQQZ2QcABcjoAACAAIAAoAggiAkEBajYCCCACIAFBP3FBgAFyOgAADAELIAFB/68DTQRAIAYgACgCCCICa0EDSA0EIAAgAkEBajYCCCACIAFBDHZB4AFyOgAAIAAgACgCCCICQQFqNgIIIAIgAUEGdkE/cUGAAXI6AAAgACAAKAIIIgJBAWo2AgggAiABQT9xQYABcjoAAAwBCyABQf+3A00EQEEBIQUgAyACa0EESA0FIAIvAQIiCEGA+ANxQYC4A0cNAiAGIAAoAghrQQRIDQUgCEH/B3EgAUEKdEGA+ANxIAFBwAdxIgVBCnRyckGAgARqQf//wwBLDQIgACACQQJqNgIMIAAgACgCCCICQQFqNgIIIAIgBUEGdkEBaiICQQJ2QfABcjoAACAAIAAoAggiBUEBajYCCCAFIAJBBHRBMHEgAUECdkEPcXJBgAFyOgAAIAAgACgCCCICQQFqNgIIIAIgCEEGdkEPcSABQQR0QTBxckGAAXI6AAAgACAAKAIIIgFBAWo2AgggASAIQT9xQYABcjoAAAwBCyABQYDAA0kNBCAGIAAoAggiAmtBA0gNAyAAIAJBAWo2AgggAiABQQx2QeABcjoAACAAIAAoAggiAkEBajYCCCACIAFBBnZBP3FBgAFyOgAAIAAgACgCCCICQQFqNgIIIAIgAUE/cUGAAXI6AAALIAAgACgCDEECaiICNgIMDAELC0ECDAILQQEMAQsgBQshASAEIAAoAgw2AgAgByAAKAIINgIAIABBEGokACABCxUAIAAoAggiAEUEQEEBDwsgABCKBwuSAQEGfwNAAkAgAiADRiAEIAhNcg0AQQEhByAAKAIIIQUjAEEQayIGJAAgBiAFNgIMIAZBCGogBkEMahDKASEKQQAgAiADIAJrIAFBtK0EIAEbEIADIQUgChDJASAGQRBqJAACQAJAIAVBAmoOAwICAQALIAUhBwsgCEEBaiEIIAcgCWohCSACIAdqIQIMAQsLIAkLXAEDfyAAKAIIIQIjAEEQayIBJAAgASACNgIMIAFBCGogAUEMahDKASECIwBBEGsiAyQAIANBEGokACACEMkBIAFBEGokACAAKAIIIgBFBEBBAQ8LIAAQigdBAUYLkgEBAX8jAEEQayIFJAAgBCACNgIAAn9BAiAFQQxqQQAgACgCCBC3BCIAQQFqQQJJDQAaQQEgAEEBayIBIAMgBCgCAGtLDQAaIAVBDGohAgN/IAEEfyACLQAAIQAgBCAEKAIAIgNBAWo2AgAgAyAAOgAAIAFBAWshASACQQFqIQIMAQVBAAsLCyECIAVBEGokACACC/AGAQ1/IwBBEGsiEiQAIAIhCQNAAkAgAyAJRgRAIAMhCQwBCyAJLQAARQ0AIAlBAWohCQwBCwsgByAFNgIAIAQgAjYCAANAAkACfwJAIAIgA0YgBSAGRnINACASIAEpAgA3AwggACgCCCEIIwBBEGsiESQAIBEgCDYCDCARQQhqIBFBDGoQygEhFCAJIAJrIQ0jAEGQCGsiCyQAIAsgBCgCACIONgIMIAUgC0EQaiAFGyEPQQAhCgJAAkACQCAORSAGIAVrQQJ1QYACIAUbIghFckUEQANAIA1BgwFLIA1BAnYiDCAIT3JFBEAgCCEMDAQLIA8gC0EMaiAMIAggCCAMSxsgARDIBCIQQX9GBEBBfyEKQQAhDCALKAIMIQ4MAwsgCEEAIBAgDyALQRBqRhsiE2shDCAPIBNBAnRqIQ8gDSAOaiALKAIMIg5rQQAgDhshDSAKIBBqIQogDkUNAiAIIBNHIRAgDCEIIBANAAwCCwALIAghDAsgDkUNAQsgDEUgDUVyDQAgCiEIA0ACQAJAIA8gDiANIAEQgAMiCkECakECTQRAAkACQCAKQQFqDgIGAAELIAtBADYCDAwCCyABQQA2AgAMAQsgCyALKAIMIApqIg42AgwgCEEBaiEIIAxBAWsiDA0BCyAIIQoMAgsgD0EEaiEPIAogDUchECANIAprIQ0gCCEKIBANAAsLIAUEQCAEIAsoAgw2AgALIAtBkAhqJAAgCiEIIBQQyQEgEUEQaiQAAkACQAJAAkAgCEF/RgRAA0ACQCAHIAU2AgAgAiAEKAIARg0AQQEhBgJAAkACQCAFIAIgCSACayASQQhqIAAoAggQiwciAUECag4DCAACAQsgBCACNgIADAULIAEhBgsgAiAGaiECIAcoAgBBBGohBQwBCwsgBCACNgIADAULIAcgBygCACAIQQJ0aiIFNgIAIAUgBkYNAyAEKAIAIQIgAyAJRgRAIAMhCQwICyAFIAJBASABIAAoAggQiwdFDQELQQIMBAsgByAHKAIAQQRqNgIAIAQgBCgCAEEBaiICNgIAIAIhCQNAIAMgCUYEQCADIQkMBgsgCS0AAEUNBSAJQQFqIQkMAAsACyAEIAI2AgBBAQwCCyAEKAIAIQILIAIgA0cLIQAgEkEQaiQAIAAPCyAHKAIAIQUMAAsAC7UFAQx/IwBBEGsiDSQAIAIhCANAAkAgAyAIRgRAIAMhCAwBCyAIKAIARQ0AIAhBBGohCAwBCwsgByAFNgIAIAQgAjYCAANAAkACQCACIANGIAUgBkZyBH8gAgUgDSABKQIANwMIQQEhECAAKAIIIQkjAEEQayIOJAAgDiAJNgIMIA5BCGogDkEMahDKASETIAYgBSIJayEKQQAhDyMAQRBrIhEkAAJAIAQoAgAiC0UgCCACa0ECdSISRXINACAKQQAgCRshCgNAIBFBDGogCSAKQQRJGyALKAIAENcDIgxBf0YEQEF/IQ8MAgsgCQR/IApBA00EQCAKIAxJDQMgCSARQQxqIAwQQBoLIAogDGshCiAJIAxqBUEACyEJIAsoAgBFBEBBACELDAILIAwgD2ohDyALQQRqIQsgEkEBayISDQALCyAJBEAgBCALNgIACyARQRBqJAAgDyEJIBMQyQEgDkEQaiQAAkACQAJAAkACQCAJQQFqDgIABgELIAcgBTYCAANAAkAgAiAEKAIARg0AIAUgAigCACAAKAIIELcEIgFBf0YNACAHIAcoAgAgAWoiBTYCACACQQRqIQIMAQsLIAQgAjYCAAwBCyAHIAcoAgAgCWoiBTYCACAFIAZGDQIgAyAIRgRAIAQoAgAhAiADIQgMBwsgDUEEakEAIAAoAggQtwQiCEF/Rw0BC0ECIRAMAwsgDUEEaiECIAYgBygCAGsgCEkNAgNAIAgEQCACLQAAIQUgByAHKAIAIglBAWo2AgAgCSAFOgAAIAhBAWshCCACQQFqIQIMAQsLIAQgBCgCAEEEaiICNgIAIAIhCANAIAMgCEYEQCADIQgMBQsgCCgCAEUNBCAIQQRqIQgMAAsACyAEKAIACyADRyEQCyANQRBqJAAgEA8LIAcoAgAhBQwACwALCQAgABCTBxA0CzcAIwBBEGsiACQAIAAgBDYCDCAAIAMgAms2AgggAEEMaiAAQQhqEPkBKAIAIQEgAEEQaiQAIAELNAADQCABIAJGRQRAIAQgASwAACIAIAMgAEEAThs6AAAgBEEBaiEEIAFBAWohAQwBCwsgAgsMACABIAIgAUEAThsLKgADQCABIAJGRQRAIAMgAS0AADoAACADQQFqIQMgAUEBaiEBDAELCyACCw8AIAAgASACQYCkAxDsBgsnACABQQBOBH9BgKQDKAIAIAFB/wFxQQJ0aigCAAUgAQtBGHRBGHULDwAgACABIAJB8JcDEOwGCycAIAFBAE4Ef0HwlwMoAgAgAUH/AXFBAnRqKAIABSABC0EYdEEYdQsJACAAEI4HEDQLNQADQCABIAJGRQRAIAQgASgCACIAIAMgAEGAAUkbOgAAIARBAWohBCABQQRqIQEMAQsLIAILEwAgASACIAFBgAFJG0EYdEEYdQsqAANAIAEgAkZFBEAgAyABLAAANgIAIANBBGohAyABQQFqIQEMAQsLIAILDwAgACABIAJBgKQDEO0GCx4AIAFB/wBNBH9BgKQDKAIAIAFBAnRqKAIABSABCwsPACAAIAEgAkHwlwMQ7QYLHgAgAUH/AE0Ef0HwlwMoAgAgAUECdGooAgAFIAELC0UAAkADQCACIANGDQECQCACKAIAQf8ASw0AQeiRAygCACACKAIAQQF0ai8BACABcUUNACACQQRqIQIMAQsLIAIhAwsgAwtEAANAAkAgAiADRwR/IAIoAgBB/wBLDQFB6JEDKAIAIAIoAgBBAXRqLwEAIAFxRQ0BIAIFIAMLDwsgAkEEaiECDAALAAtGAANAIAEgAkcEQCADIAEoAgBB/wBNBH9B6JEDKAIAIAEoAgBBAXRqLwEABUEACzsBACADQQJqIQMgAUEEaiEBDAELCyACCyQAIAJB/wBNBH9B6JEDKAIAIAJBAXRqLwEAIAFxQQBHBUEACwtAAQJ/IAAoAgAoAgAiACgCACAAKAIIIgJBAXVqIQEgACgCBCEAIAEgAkEBcQR/IAEoAgAgAGooAgAFIAALEQEACw8AIAAgACgCACgCBBEBAAsfACAAAn9B+K4EQfiuBCgCAEEBaiIANgIAIAALNgIECwkAIAAQkAcQNAucAQAjAEEQayIDJAACQCAFEIgBRQRAIAAgBSgCCDYCCCAAIAUpAgA3AgAMAQsgBSgCACEEAkACQAJAIAUoAgQiAkEBTQRAIAAiASACEJIBDAELIAJB7////wNLDQEgACAAIAIQuwJBAWoiBRCJAiIBEJABIAAgBRCzASAAIAIQiwELIAEgBCACQQFqEMwBDAELEFYACwsgA0EQaiQACwkAIAAgBRDdAguLAwEIfyMAQfADayIAJAAgAEHoA2oiBiADEFAgBhCYASEKIAUQOARAIAVBABC+AygCACAKQS0QoAFGIQsLIAIgCyAAQegDaiAAQeADaiAAQdwDaiAAQdgDaiAAQcgDahBFIgwgAEG4A2oQRSIGIABBqANqEEUiByAAQaQDahCWByAAQc4CNgIQIABBCGpBACAAQRBqIgIQaCEIAkACfyAFEDggACgCpANKBEAgBRA4IQkgACgCpAMhDSAHEDggCSANa0EBdGogBhA4aiAAKAKkA2pBAWoMAQsgBxA4IAYQOGogACgCpANqQQJqCyIJQeUASQ0AIAggCUECdBA7EIABIAgoAgAiAg0AEFYACyACIABBBGogACADKAIEIAUQPyAFED8gBRA4QQJ0aiAKIAsgAEHgA2ogACgC3AMgACgC2AMgDCAGIAcgACgCpAMQlQcgASACIAAoAgQgACgCACADIAQQmgIhASAIEGcgBxA5GiAGEDkaIAwQORogAEHoA2oQRyAAQfADaiQAIAELzQQBC38jAEGwCGsiACQAIAAgBTcDECAAIAY3AxggACAAQcAHaiIHNgK8ByAHQeQAQfXwASAAQRBqENoDIQcgAEHOAjYCoAQgAEGYBGpBACAAQaAEaiIJEGghDiAAQc4CNgKgBCAAQZAEakEAIAkQaCEKAkAgB0HkAE8EQBBdIQcgACAFNwMAIAAgBjcDCCAAQbwHaiAHQfXwASAAENgBIgdBf0YNASAOIAAoArwHEIABIAogB0ECdBA7EIABIAoQ8QINASAKKAIAIQkLIABBiARqIgggAxBQIAgQmAEiESAAKAK8ByIIIAcgCGogCRDnASAHQQBKBEAgACgCvActAABBLUYhDwsgAiAPIABBiARqIABBgARqIABB/ANqIABB+ANqIABB6ANqEEUiECAAQdgDahBFIgggAEHIA2oQRSILIABBxANqEJYHIABBzgI2AjAgAEEoakEAIABBMGoiAhBoIQwCfyAAKALEAyINIAdIBEAgCxA4IAcgDWtBAXRqIAgQ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IABB2AFqEL8EIABBuAFqEEUiASABEFIQQiAAIAFBABBBIgI2ArQBIAAgAEEQajYCDCAAQQA2AgggAEEBOgAHIABBxQA6AAYDQAJAIABB6AJqIABB4AJqEJMBRQ0AIAAoArQBIAEQOCACakYEQCABEDghAyABIAEQOEEBdBBCIAEgARBSEEIgACADIAFBABBBIgJqNgK0AQsgAEHoAmoQaSAAQQdqIABBBmogAiAAQbQBaiAAKALcASAAKALYASAAQcgBaiAAQRBqIABBDGogAEEIaiAAQeABahC+BA0AIABB6AJqEHYaDAELCwJAIABByAFqEDhFDQAgAC0AB0UNACAAKAIMIgMgAEEQamtBnwFKDQAgACADQQRqNgIMIAMgACgCCDYCAAsgBSACIAAoArQBIAQQvQc5AwAgAEHIAWogAEEQaiAAKAIMIAQQkQEgAEHoAmogAEHgAmoQfARAIAQgBCgCAEECcjYCAAsgACgC6AIhAiABEDkaIABByAFqEDkaIABB8AJqJAAgAgu9AwAjAEHwAmsiACQAIAAgAjYC4AIgACABNgLoAiAAQcgBaiADIABB4AFqIABB3AFqIABB2AFqEL8EIABBuAFqEEUiASABEFIQQiAAIAFBABBBIgI2ArQBIAAgAEEQajYCDCAAQQA2AgggAEEBOgAHIABBxQA6AAYDQAJAIABB6AJqIABB4AJqEJMBRQ0AIAAoArQBIAEQOCACakYEQCABEDghAyABIAEQOEEBdBBCIAEgARBSEEIgACADIAFBABBBIgJqNgK0AQsgAEHoAmoQaSAAQQdqIABBBmogAiAAQbQBaiAAKALcASAAKALYASAAQcgBaiAAQRBqIABBDGogAEEIaiAAQeABahC+BA0AIABB6AJqEHYaDAELCwJAIABByAFqEDhFDQAgAC0AB0UNACAAKAIMIgMgAEEQamtBnwFKDQAgACADQQRqNgIMIAMgACgCCDYCAAsgBSACIAAoArQBIAQQvgc4AgAgAEHIAWogAEEQaiAAKAIMIAQQkQEgAEHoAmogAEHgAmoQfARAIAQgBCgCAEECcjYCAAsgACgC6AIhAiABEDkaIABByAFqEDkaIABB8AJqJAAgAgugAwECfyMAQeACayIAJAAgACACNgLQAiAAIAE2AtgCIAMQ2gEhBiADIABB4AFqEO8CIQcgAEHQ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IgMgAiAGIAMgASAEQQEQvwMgBkY6AAAgBigCGCEBA0AgA0EMaxA5IgMgBkcNAAsLIAZBIGokACABC/UCAQF/IwBBkAJrIgAkACAAIAI2AoACIAAgATYCiAIgAEHQAWoQRSEGIABBEGoiAiADEFAgAhCdAUGQsANBqrADIABB4AFqEIICIAIQRyAAQcABahBFIgMgAxBSEEIgACADQQAQQSIBNgK8ASAAIAI2AgwgAEEANgIIA0ACQCAAQYgCaiAAQYACahCUAUUNACAAKAK8ASADEDggAWpGBEAgAxA4IQIgAyADEDhBAXQQQiADIAMQUhBCIAAgAiADQQAQQSIBajYCvAELIABBiAJqEGpBECABIABBvAFqIABBCGpBACAGIABBEGogAEEMaiAAQeABahDDAg0AIABBiAJqEHcaDAELCyADIAAoArwBIAFrEEIgAxA/IQIQXSEBIAAgBTYCACACIAEgABC7B0EBRwRAIARBBDYCAAsgAEGIAmogAEGAAmoQfQRAIAQgBCgCAEECcjYCAAsgACgCiAIhASADEDkaIAYQORogAEGQAmokACABC9QDAQF+IwBBoAJrIgAkACAAIAI2ApACIAAgATYCmAIgAEHgAWogAyAAQfABaiAAQe8BaiAAQe4BahDCBCAAQdABahBFIgEgARBSEEIgACABQQAQQSICNgLMASAAIABBIGo2AhwgAEEANgIYIABBAToAFyAAQcUAOgAWA0ACQCAAQZgCaiAAQZACahCUAUUNACAAKALMASABEDggAmpGBEAgARA4IQMgASABEDhBAXQQQiABIAEQUhBCIAAgAyABQQAQQSICajYCzAELIABBmAJqEGogAEEXaiAAQRZqIAIgAEHMAWogACwA7wEgACwA7gEgAEHgAWogAEEgaiAAQRxqIABBGGogAEHwAWoQwQQNACAAQZgCahB3GgwBCwsCQCAAQeABahA4RQ0AIAAtABdFDQAgACgCHCIDIABBIGprQZ8BSg0AIAAgA0EEajYCHCADIAAoAhg2AgALIAAgAiAAKALMASAEELwHIAApAwAhBiAFIAApAwg3AwggBSAGNwMAIABB4AFqIABBIGogACgCHCAEEJEBIABBmAJqIABBkAJqEH0EQCAEIAQoAgBBAnI2AgALIAAoApgCIQIgARA5GiAAQeABahA5GiAAQaACaiQAIAILvQMAIwBBkAJrIgAkACAAIAI2AoACIAAgATYCiAIgAEHQAWogAyAAQeABaiAAQd8BaiAAQd4BahDCBCAAQcABahBFIgEgARBSEEIgACABQQAQQSICNgK8ASAAIABBEGo2AgwgAEEANgIIIABBAToAByAAQcUAOgAGA0ACQCAAQYgCaiAAQYACahCUAUUNACAAKAK8ASABEDggAmpGBEAgARA4IQMgASABEDhBAXQQQiABIAEQUhBCIAAgAyABQQAQQSICajYCvAELIABBiAJqEGogAEEHaiAAQQZqIAIgAEG8AWogACwA3wEgACwA3gEgAEHQAWogAEEQaiAAQQxqIABBCGogAEHgAWoQwQQNACAAQYgCahB3GgwBCwsCQCAAQdABahA4RQ0AIAAtAAdFDQAgACgCDCIDIABBEGprQZ8BSg0AIAAgA0EEajYCDCADIAAoAgg2AgALIAUgAiAAKAK8ASAEEL0HOQMAIABB0AFqIABBEGogACgCDCAEEJEBIABBiAJqIABBgAJqEH0EQCAEIAQoAgBBAnI2AgALIAAoAogCIQIgARA5GiAAQdABahA5GiAAQZACaiQAIAILvQMAIwBBkAJrIgAkACAAIAI2AoACIAAgATYCiAIgAEHQAWogAyAAQeABaiAAQd8BaiAAQd4BahDCBCAAQcABahBFIgEgARBSEEIgACABQQAQQSICNgK8ASAAIABBEGo2AgwgAEEANgIIIABBAToAByAAQcUAOgAGA0ACQCAAQYgCaiAAQYACahCUAUUNACAAKAK8ASABEDggAmpGBEAgARA4IQMgASABEDhBAXQQQiABIAEQUhBCIAAgAyABQQAQQSICajYCvAELIABBiAJqEGogAEEHaiAAQQZqIAIgAEG8AWogACwA3wEgACwA3gEgAEHQAWogAEEQaiAAQQxqIABBCGogAEHgAWoQwQQNACAAQYgCahB3GgwBCwsCQCAAQdABahA4RQ0AIAAtAAdFDQAgACgCDCIDIABBEGprQZ8BSg0AIAAgA0EEajYCDCADIAAoAgg2AgALIAUgAiAAKAK8ASAEEL4HOAIAIABB0AFqIABBEGogACgCDCAEEJEBIABBiAJqIABBgAJqEH0EQCAEIAQoAgBBAnI2AgALIAAoAogCIQIgARA5GiAAQdABahA5GiAAQZACaiQAIAILlQMB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dGlvbiBgeCA+PSBtTWluWGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHdpZHRoID49IDVgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3aWR0aCA+PSAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgd2lkdGggPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgcHlyYW1pZC0+c2l6ZSgpID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1TdGFydFRpbWUgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYChzcmNfd2lkdGglMikgPT0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGltLndpZHRoKCkgPT0gaW0uc3RlcCgpL3NpemVvZihmbG9hdClgIGZhaWxlZCBpbiAAIAkKDQBFcnJvcjogbWFsbG9jCgBFcnJvciAxOiBpY3BHZXRJbml0WHcyWGMKACA9PT0gbWF0cml4ICglZCwlZCkgPT09CgAgPT09IHZlY3RvciAoJWQpID09PQoAPz8/IDEKAEVycm9yOiBsYWJlbGluZyB3b3JrIG92ZXJmbG93LgoAIyMjIEZlYXR1cmUgY2FuZGlkYXRlcyBmb3IgdHJhY2tpbmcgYXJlIG92ZXJmbG93LgoAYXJnbENhbWVyYUZydXN0dW1SSCgpOiBhclBhcmFtRGVjb21wTWF0KCkgaW5kaWNhdGVkIHBhcmFtZXRlciBlcnJvci4KAGtwbURlbGV0ZVJlZkRhdGFTZXQoKTogTlVMTCByZWZEYXRhU2V0UHRyL3JlZkltYWdlLgoAU3RhcnQgdHJhY2tpbmdfdGhyZWFkICMlZC4KAE91dCBvZiBtZW1vcnkhIQoARGF0YSBudW0gZXJyb3IhIQoAY29sb3I6ICM2NjQ0MDA7IGJhY2tncm91bmQtY29sb3I6ICNmZmZmOTk7IGJvcmRlci1yYWRpdXM6IDRweDsgcGFkZGluZzogMnB4AHcASUQgYWxyZWFkeSBleGlzdHMAJXMlcwAlcy4lcwByAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL29yaWVudGF0aW9uX2Fzc2lnbm1lbnQuY3BwAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZnJhbWV3b3JrL3RpbWVycy5jcHAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvaGFycmlzLmNwcAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2RldGVjdG9ycy9Eb0dfc2NhbGVfaW52YXJpYW50X2RldGVjdG9yLmNwcAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2hvdWdoX3NpbWlsYXJpdHlfdm90aW5nLmNwcAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2ZyYW1ld29yay9pbWFnZS5jcHAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5jcHAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvcHlyYW1pZC5jcHAAaW5mbwBFcnJvcjogaWNwR2V0Sl9VX1hjAHdiAHJiAEFSX1BJWEVMX0ZPUk1BVF9SR0IAUGF0dGVybiBleHRyYWN0aW9uIGZhaWxlZC4AQXNzZXJ0aW9uIGBweXJhbWlkYCBmYWlsZWQgaW4gAFRyYWNraW5nIHRocmVhZCA9ICVkCgBTSVpFID0gJWQsICVkCgBFcnJvciAyOiBpY3BHZXRJbml0WHcyWGMKAD8/PyAyCgBFcnJvcjogdW5zdXBwb3J0ZWQgcGl4ZWwgZm9ybWF0LgoAVW5rbm93biBvciB1bnN1cHBvcnRlZCBsYWJlbGluZyB0aHJlc2hvbGQgbW9kZSByZXF1ZXN0ZWQuIFNldCB0byBtYW51YWwuCgBrcG1EZWxldGVSZWZEYXRhU2V0KCk6IDAgeHNpemUveXNpemUvZHBpLgoARXJyb3IgKCVkKTogdW5hYmxlIHRvIG9wZW4gY2FtZXJhIHBhcmFtZXRlcnMgZmlsZSAiJXMiIGZvciB3cml0aW5nLgoARXJyb3I6IE5VTEwgcGF0dEhhbmRsZS4KAEVuZCB0cmFja2luZ190aHJlYWQgIyVkLgoAT3V0IG9mIG1lbW9yeSEhCgByAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvbWF0Y2hlcnMvZnJlYWsuaAB3YXJuaW5nACAlMTBnAEJ1aWxkIFB5cmFtaWQAJTRkAHdiAHJiACVj8J+aqVt3ZWJhcmtpdC1lcnJvcjpdAEFSX1BJWEVMX0ZPUk1BVF9CR1IATUFOVUFMAEdlbmVyaWMgZXJyb3IgZHVyaW5nIG1hdGNoaW5nIHBoYXNlLgAgbGluZSAAJXMlcwoARmlsZSBvcGVuIGVycm9yLiAlcwoARGlzdG9ydGlvbiBmYWN0b3I6IGsxPSUxLjEwZiwgazI9JTEuMTBmLCBwMT0lMS4xMGYsIHAyPSUxLjEwZgoARXJyb3I6IG1hbGxvYwoARXJyb3IgMzogaWNwR2V0SW5pdFh3MlhjCgBFcnJvciBpY3BHZXRKX1VfUwoAPT09PT09ICVzID09PT09PT09CgA/Pz8gMwoARXJyb3I6IGNhbid0IGxvYWQgcGF0dGVybiBmcm9tIE5VTEwgYnVmZmVyLgoAa3BtU2V0UmVmRGF0YVNldCgpOiBOVUxMIGtwbUhhbmRsZS9maWxlbmFtZS4KAEVycm9yIHNhdmluZyBmZWF0dXJlIG1hcDogZXJyb3Igd3JpdGluZyBkYXRhLgoAT3V0IG9mIG1lbW9yeSEhCgBjb2xvcjogI2ZmZmZmZjsgYmFja2dyb3VuZC1jb2xvcjogI2ZmMDEwMTsgYm9yZGVyLXJhZGl1czogNHB4OyBwYWRkaW5nOiAycHgARXh0cmFjdCBGZWF0dXJlcwBlcnJvcgBGcmVhayBmZWF0dXJlcyAtICVkAHJiAEFVVE9fTUVESUFOAEFSX1BJWEVMX0ZPUk1BVF9SR0JBAEluc3VmZmljaWVudCBjb250cmFzdCBkdXJpbmcgbWF0Y2hpbmcuACU3LjVmIAAgbGluZSAARXJyb3Igb3BlbmluZyBmaWxlICclcyc6IAAgICAgICAgICAgICAgICAgICBmeD0lZiwgZnk9JWYsIHgwPSVmLCB5MD0lZiwgcz0lZgoARXJyb3IgNDogaWNwR2V0SW5pdFh3MlhjCgBFcnJvciBpY3BHZXRVX2Zyb21fWF9ieV9NYXRYMlUKAEVycm9yIGFsbG9jYXRpbmcgbWVtb3J5LgoARXJyb3I6IG91dCBvZiBtZW1vcnkuCgBFcnJvcjogVW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMnIGZvciB3cml0aW5nLgoARXJyb3I6IHVuYWJsZSB0byBvcGVuIGZpbGUgJyVzJXMnIGZvciByZWFkaW5nLgoAT3V0IG9mIG1lbW9yeSEhCgBTdGVwIHNpemUgbXVzdCBiZSBlcXVhbCB0byB3aWR0aCBmb3Igbm93AFslc10gWyVzXSBbJXNdIDogRm91bmQgJWQgZmVhdHVyZXMAJXMAV2lkdGggY2Fubm90IGJlIHplcm8AU291cmNlIHdpZHRoIG11c3QgYmUgZXZlbgBJbWFnZSBpcyB0b28gc21hbGwAeCBvdXQgb2YgcmFuZ2UAQ2xvY2sgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQAUHlyYW1pZCBpcyBub3QgYWxsb2NhdGVkAHJiACVj4pqg77iPW3dlYmFya2l0LXdhcm46XQBBVVRPX09UU1UAQVJfUElYRUxfRk9STUFUX0JHUkEAd3AgbXVzdCBiZSBhdCBsZWFzdCAxAEJhcmNvZGUgbWF0Y2hpbmcgY291bGQgbm90IGZpbmQgY29ycmVjdCBiYXJjb2RlIGxvY2F0b3IgcGF0dGVybi4AWyVzXSAAOiAAJXMlcwoARGlzdG9ydGlvbiBmYWN0b3IgPSAlZiAlZiAlZiAlZiAlZiAlZgoARXJyb3IgNTogaWNwR2V0SW5pdFh3MlhjCgBFcnJvciBpY3BHZXRYY19mcm9tX1h3X2J5X01hdFh3MlhjCgBFcnJvciByZWFkaW5nIGltYWdlU2V0LgoARXJyb3Igd2hpbGUgYWRkaW5nIHJlZmVyZW5jZSBkYXRhIHNldDoga3BtR2VuUmVmRGF0YVNldCgpIGZhaWxlZC4KAEVycm9yIG9wZW5pbmcgJyVzJy4KAENhbid0IG9wZW4gSlBFRyBmaWxlICclcycKAE91dCBvZiBtZW1vcnkhIQoAUGF0dGVybiBEYXRhIHJlYWQgZXJyb3IhIQoAUmVhZCBlcnJvciEhCgBjb2xvcjogIzc3NDQwMDsgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmY5OTsgYm9yZGVyLXJhZGl1czogNHB4OyBwYWRkaW5nOiAycHgAJWYAd2IAQVJfUElYRUxfRk9STUFUX0FCR1IAUHlyYW1pZCBpcyBOVUxMAEFVVE9fQURBUFRJVkUAQmFyY29kZSBtYXRjaGluZyBlcnJvciBkZXRlY3Rpb24vY29ycmVjdGlvbiBmb3VuZCB1bnJlY292ZXJhYmxlIGVycm9yLgBFcnJvciBjcmVhdGluZyBmdWxsIGZpbGUgcGF0aCBmcm9tICclcycgYW5kICclcycAQXNzZXJ0aW9uIGB4IDwgbU1heFhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBoZWlnaHQgPj0gNWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGhlaWdodCA+PSAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaGVpZ2h0ID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1JbWFnZXMuc2l6ZSgpID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHggPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1TdG9wVGltZSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZHN0ICE9IDBgIGZhaWxlZCBpbiAAIElORk8gIAAlcyVzCgBEaXN0b3J0aW9uIGZhY3RvciA9ICVmICVmICVmICVmICVmCgBFcnJvciA9ICVmCgBFcnJvciA2OiBpY3BHZXRJbml0WHcyWGMKACAgICAgICAgIEltYWdlU2l6ZSA9ICU3ZFtwaXhlbF0KAD09PT09PT09PSAlZCA9PT09PT09PT09PQoASW1hZ2VzZXQgY29udGFpbnMgJWQgaW1hZ2VzLgoARXJyb3I6IFVuYWJsZSB0byBvcGVuIGZpbGUgJyVzJyBmb3IgcmVhZGluZy4KAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIGNhbWVyYSBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3IgcmVhZGluZy4KAEVycm9yIHJlYWRpbmcgcGF0dGVybiBmaWxlICclcycuCgBCdWlsZCBJbmRleABIZWlnaHQgY2Fubm90IGJlIHplcm8AJWYgJWYgJWYgJWYAeCBtdXN0IGJlIHBvc2l0aXZlAExhcGxhY2lhbiBweXJhbWlkIGhhcyBub3QgYmVlbiBhbGxvY2F0ZWQAQ2xvY2sgaGFzIG5vdCBiZWVuIHN0b3BwZWQAQVJfUElYRUxfRk9STUFUX01PTk8ARGVzdGluYXRpb24gaXMgTlVMTABBVVRPX0JSQUNLRVRJTkcAaHAgbXVzdCBiZSBhdCBsZWFzdCAxAEVycm9yICglZCk6IHVuYWJsZSB0byBkZXRlcm1pbmUgZmlsZSBsZW5ndGguAE1hdGNoaW5nIGNvbmZpZGVuY2UgY3V0b2ZmIHZhbHVlIG5vdCByZWFjaGVkLgBBc3NlcnRpb24gYHkgPj0gbU1pbllgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbWFnZS50eXBlKCkgPT0gSU1BR0VfVUlOVDhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzdG9yZS5zaXplKCkgPT0gcG9pbnRzLnNpemUoKWAgZmFpbGVkIGluIAAlcyVzCgBEaXN0b3J0aW9uIGZhY3RvciA9ICVmICVmICVmICVmCgBFcnJvciA3OiBpY3BHZXRJbml0WHcyWGMKAEV4dHJhY3RlZCBmZWF0dXJlcyA9ICU3ZFtwaXhlbF0KAEVycm9yIGljcDJHZXRUUwoARmFsbGluZyBiYWNrIHRvIHJlYWRpbmcgJyVzJXMnIGluIEFSVG9vbEtpdCB2NC54IGZvcm1hdC4KAEVycm9yIGluIG9wZW5pbmcgJyVzJyBpbiB6aXBmaWxlLgoARXJyb3IgcmVhZGluZyBKUEVHIGZpbGUuCgBFcnJvciB3aGlsZSBhZGRpbmcgcmVmZXJlbmNlIGRhdGEgc2V0OiBrcG1NZXJnZVJlZkRhdGFTZXQoKSBmYWlsZWQuCgBFcnJvciBzYXZpbmcgZmVhdHVyZSBzZXQ6IGVycm9yIHdyaXRpbmcgZGF0YS4KAE91dCBvZiBtZW1vcnkhIQoAQeAyC4govQwAALYOAAAkEQAASxMAANwWAABbJXNdIFslc10gWyVzXSA6ICVzOiAlZiBtcwBJbWFnZSBtdXN0IGJlIGdyYXlzY2FsZQB5IG91dCBvZiByYW5nZQBGZWF0dXJlIHN0b3JlIGhhcyBub3QgYmVlbiBhbGxvY2F0ZWQAJWQAd2IAQVJfUElYRUxfRk9STUFUX0FSR0IATWF4aW11bSBhbGxvd2FibGUgcG9zZSBlcnJvciBleGNlZWRlZC4AQXNzZXJ0aW9uIGBzdGVwID49IHdpZHRoYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaSsxK2NodW5rX3NpemUgPCB3aWR0aGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHB5cmFtaWRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBweXJhbWlkLT5udW1PY3RhdmVzKCkgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc3JjICE9IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB4IDwgbUdyYWRpZW50c1tvY3RhdmUqbU51bVNjYWxlc1Blck9jdGF2ZStzY2FsZV0ud2lkdGgoKWAgZmFpbGVkIGluIABFcnJvciBpbiBvcGVuaW5nICclcycgZm9yIHJlYWRpbmcKACBGaWx0ZXJlZCBmZWF0dXJlcyA9ICU3ZFtwaXhlbF0KAExhYmVsaW5nIHRocmVzaG9sZCBtb2RlIHNldCB0byAlcy4KAEVycm9yIHJlYWRpbmcgSlBFRyBmaWxlIGhlYWRlci4KAEVycm9yOiBzdXBwbGllZCBmaWxlIGRvZXMgbm90IGFwcGVhciB0byBiZSBhbiBBUlRvb2xLaXQgY2FtZXJhIHBhcmFtZXRlciBmaWxlLgoAa3BtRGVsZXRlUmVmRGF0YVNldCgpOiBOVUxMIHJlZkRhdGFTZXRQdHIxL3JlZkRhdGFTZXRQdHIyLgoAQ2FuJ3QgcmVhZCBKUEVHIGZpbGUgJyVzJwoAQVJfUElYRUxfRk9STUFUXzJ2dXkAUHlyYW1pZCBkb2VzIG5vdCBjb250YWluIGFueSBsZXZlbHMAU3RlcCBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0aGUgd2lkdGgAeCBtdXN0IGJlIGxlc3MgdGhhbiB0aGUgaW1hZ2Ugd2lkdGgAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9tYXRjaGVycy92aXN1YWxfZGF0YWJhc2UuaABFeHRlbmRpbmcgYmV5b25kIHRoZSB3aWR0aCBvZiB0aGUgaW1hZ2UAU291cmNlIGlzIE5VTEwARXJyb3IgKCVkKTogdW5hYmxlIHRvIHJlYWQgZnJvbSBmaWxlLgBNdWx0aS1tYXJrZXIgcG9zZSBlcnJvciB2YWx1ZSBleGNlZWRlZC4ADSU0ZC8lNGQuAEFzc2VydGlvbiBgeSA8IG1NYXhZYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaW1hZ2UuY2hhbm5lbHMoKSA9PSAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbnVtX3BvaW50cyA9PSBwb2ludHMuc2l6ZSgpYCBmYWlsZWQgaW4gACU3LjVmIAAgSU5GTyAgAGtwbVNldFJlZkRhdGFTZXQoKTogTlVMTCBrcG1IYW5kbGUvcmVmRGF0YVNldC4KAGtwbURlbGV0ZVJlZkRhdGFTZXQoKTogTlVMTCByZWZEYXRhU2V0UHRyLgoARXJyb3I6IHVuYWJsZSB0byBvcGVuIGZpbGUgJyVzJyBmb3Igd3JpdGluZy4KAEVycm9yOiBVbnN1cHBvcnRlZCBwaXhlbCBmb3JtYXQgKCVkKSByZXF1ZXN0ZWQuCgBFcnJvciBpbiByZWFkaW5nICclcycuCgAKIyMjIFN1cmZhY2UgTm8uJWQgIyMjCgBBUl9QSVhFTF9GT1JNQVRfeXV2cwAlcwBJbWFnZSBtdXN0IGhhdmUgMSBjaGFubmVsAFNob3VsZCBiZSBzYW1lIHNpemUAUmVqZWN0ZWQgZnJlcXVlbnRseSBtaXNyZWNvZ25pc2VkIG1hdHJpeCBtYXJrZXIuAEFzc2VydGlvbiBgYnVja2V0WzBdLmZpcnN0ID49IGJ1Y2tldFtuXS5maXJzdGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGFuZ2xlID4gLVBJYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgY2hhbm5lbHMgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc3JjX3dpZHRoID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHkgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGR5bmFtaWNfY2FzdDxjb25zdCBCaW5vbWlhbFB5cmFtaWQzMmYqPihweXJhbWlkKWAgZmFpbGVkIGluIAAgbGluZSAAa3BtU2F2ZVJlZkRhdGFTZXQoKTogTlVMTCBmaWxlbmFtZS9yZWZEYXRhU2V0LgoAa3BtU2V0UmVmRGF0YVNldCgpOiByZWZEYXRhU2V0LgoARXJyb3I6IHN1cHBsaWVkIGJ1ZmZlciBkb2VzIG5vdCBhcHBlYXIgdG8gYmUgQVJUb29sS2l0IGNhbWVyYSBwYXJhbWV0ZXJzLgoARXJyb3IgaW4gd3JpdGluZyAnJXMnIGluIHRoZSB6aXBmaWxlLgoARXJyb3Igc2F2aW5nIGltYWdlIHNldDogZXJyb3Igd3JpdGluZyBkYXRhLgoATnVtYmVyIG9mIGNoYW5uZWxzIGNhbm5vdCBiZSB6ZXJvAHkgbXVzdCBiZSBwb3NpdGl2ZQBXaWR0aCBtdXN0IGJlIHBvc2l0aXZlAGFuZ2xlIG91dCBvZiByYW5nZQBPbmx5IGJpbm9taWFsIHB5cmFtaWQgaXMgc3VwcG9ydGVkAG50aF9lbGVtZW50IGZhaWxlZABBUl9QSVhFTF9GT1JNQVRfUkdCXzU2NQBBc3NlcnRpb24gYG1QeXJhbWlkLnNpemUoKSA9PSBtTnVtT2N0YXZlcyptTnVtU2NhbGVzUGVyT2N0YXZlYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgb2N0YXZlID49IDBgIGZhaWxlZCBpbiAAOiAARmllbGQtb2YtdmlldyB2ZXJ0aWNhbCA9ICUuMWYsIGhvcml6b250YWwgPSAlLjFmIGRlZ3JlZXMsIGFzcGVjdCByYXRpbyA9ICUuM2YKAE1heCBmZWF0dXJlID0gJWQKACAgUmVhZCBJbWFnZVNldC4KAEVycm9yIHNhdmluZyBLUE0gZGF0YTogdW5hYmxlIHRvIG9wZW4gZmlsZSAnJXMlcyVzJyBmb3Igd3JpdGluZy4KAEVycm9yICglZCk6IHVuYWJsZSB0byBvcGVuIGV4dGVybmFsIHBhcmFtZXRlcnMgZmlsZSAiJXMiIGZvciB3cml0aW5nLgoARXJyb3IgaW4gY2xvc2luZyAlcyBpbiB0aGUgemlwZmlsZS4KAEF1dG8gdGhyZXNob2xkIChicmFja2V0KSBtYXJrZXIgY291bnRzIC1bJTNkOiAlM2RdIFslM2Q6ICUzZF0gWyUzZDogJTNkXSsuCgBPdXQgb2YgbWVtb3J5ISEKAFB5cmFtaWQgaGFzIG5vdCBiZWVuIGFsbG9jYXRlZCB5ZXQAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5oAFB5cmFtaWQgaXMgTlVMTABBUl9QSVhFTF9GT1JNQVRfUkdCQV81NTUxAC4AQXNzZXJ0aW9uIGBwWzBdID4gcG0xWy0xXWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGFuZ2xlIDw9IFBJYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZC50eXBlKCkgPT0gSU1BR0VfRjMyYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgc3JjX2hlaWdodCA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB5IDwgbUdyYWRpZW50c1tvY3RhdmUqbU51bVNjYWxlc1Blck9jdGF2ZStzY2FsZV0uaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBtRGF0YS5nZXQoKWAgZmFpbGVkIGluIAAlM2Q6ICglM2QsJTNkKSA6ICVmIG1pbj0lZiBtYXg9JWYsIHNkPSVmCgBwYWdlICVkLCBpbWFnZSBudW0gJWQsIHBvaW50cyAtICVkCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBleHRlcm5hbCBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3IgcmVhZGluZy4KAEF1dG8gdGhyZXNob2xkIChicmFja2V0KSBhZGp1c3RlZCB0aHJlc2hvbGQgdG8gJWQuCgBFcnJvciBvcGVuaW5nIGZpbGUgJyVzLmlzZXQnLgoARXJyb3IgaW4gY2xvc2luZyAnJXMnLgoAeSBtdXN0IGJlIGxlc3MgdGhhbiB0aGUgaW1hZ2UgaGVpZ2h0AEhlaWdodCBtdXN0IGJlIHBvc2l0aXZlAE9jdGF2ZSBtdXN0IGJlIHBvc2l0aXZlAE9ubHkgRjMyIGltYWdlcyBzdXBwb3J0ZWQAU2hvdWxkIGJlIG1heGltYQBEYXRhIHBvaW50ZXIgaXMgTlVMTABBUl9QSVhFTF9GT1JNQVRfUkdCQV80NDQ0AEFzc2VydGlvbiBgZGV0ZWN0b3JgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzY2FsZSA+PSBtTWluU2NhbGVgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbWFnZS53aWR0aCgpID09IG1QeXJhbWlkWzBdLndpZHRoKClgIGZhaWxlZCBpbiAAWyUgLjNmICUgLjNmICUgLjNmXSBbJSA2LjFmXQoARXJyb3IgKCVkKTogdW5hYmxlIHRvIG9wZW4gb3B0aWNhbCBwYXJhbWV0ZXJzIGZpbGUgIiVzIiBmb3Igd3JpdGluZy4KAGtwbVNldFJlZkRhdGFTZXRGaWxlKCk6IE5VTEwga3BtSGFuZGxlL2ZpbGVuYW1lLgoAICAgIGVuZC4KAEF1dG8gdGhyZXNob2xkICglcykgYWRqdXN0ZWQgdGhyZXNob2xkIHRvICVkLgoALS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgBBUl9QSVhFTF9GT1JNQVRfNDIwdgBtZWRpYW4Ac2NhbGUgb3V0IG9mIHJhbmdlAEltYWdlIG9mIHdyb25nIHNpemUgZm9yIHB5cmFtaWQAVW5hYmxlIHRvIGFsbG9jYXRlIGltYWdlIGRhdGEARGV0ZWN0b3IgaXMgTlVMTABBc3NlcnRpb24gYG9jdGF2ZSA8IG1OdW1PY3RhdmVzYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgcFswXSA+IHBtMVswXWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGltMS50eXBlKCkgPT0gSU1BR0VfRjMyYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZy5jaGFubmVscygpID09IDJgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzcmNfc3RlcCA+IDBgIGZhaWxlZCBpbiAAJTNkLCAlM2Q6IG1heF9zaW0gPSAlZgoAICBSZWFkIEZlYXR1cmVTZXQuCgBDYW5ub3QgZmluZCB0aGUgcGFnZSBmb3Igc2tpcHBpbmcuCgBFcnJvciAoJWQpOiB1bmFibGUgdG8gb3BlbiBvcHRpY2FsIHBhcmFtZXRlcnMgZmlsZSAiJXMiIGZvciByZWFkaW5nLgoARXJyb3Igc2F2aW5nIEtQ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dCBiZSBwb3NpdGl2ZQBTY2FsZSBtdXN0IGJlIHBvc2l0aXZlAE1heGltdW0gYmluIHNob3VsZCBiZSBwb3NpdGl2ZQBPbmx5IHNpbmdsZSBjaGFubmVsIGltYWdlcyBzdXBwb3J0ZWQAQXNzZXJ0aW9uIGBwWzBdID4gcFsxXWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGRzdF9zdGVwID4gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYHB5cmFtaWQtPmltYWdlcygpWzBdLndpZHRoKCkgPT0gZGV0ZWN0b3ItPndpZHRoKClgIGZhaWxlZCBpbiAASlBFRyBmaWxlIGhhcyB1bnN1cHBvcnRlZCAlZC1jb21wb25lbnQgcGl4ZWxzCgBFcnJvciBsb2FkaW5nIEtQTSBkYXRhOiBlcnJvciByZWFkaW5nIGRhdGEuCgBhclV0aWxHZXRQaXhlbEZvcm1hdE5hbWU6IEVycm9yLCB1bnJlY29nbmlzZWQgcGl4ZWwgZm9ybWF0ICglZCkuCgBQeXJhbWlkIGFuZCBkZXRlY3RvciBzaXplIG1pc21hdGNoAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAVW5rbm93biBpbWFnZSB0eXBlAEFzc2VydGlvbiBgc2NhbGUgPCBtTnVtU2NhbGVzUGVyT2N0YXZlYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgcFswXSA+IHBwMVstMV1gIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBoaXN0ICE9IE5VTExgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAoc3JjX3dpZHRoJTIpID09IDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbTEuY2hhbm5lbHMoKSA9PSAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbVJlZkltYWdlV2lkdGggPiAwYCBmYWlsZWQgaW4gAE91dCBvZiBtZW1vcnkuCgBrcG1DaGFuZ2VQYWdlTm9PZlJlZkRhdGFTZXQoKTogTlVMTCByZWZEYXRhU2V0LgoARXJyb3Igb3BlbmluZyBmaWxlICclcy5tcmsnLgoAJSUlMDJ4AC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL29yaWVudGF0aW9uX2Fzc2lnbm1lbnQuaAAlZiAlZiAlZiAlZgB3aWR0aCBtdXN0IGJlIHBvc2l0aXZlAFNjYWxlIG11c3QgYmUgbGVzcyB0aGFuIG51bWJlciBvZiBzY2FsZSBwZXIgb2N0YXZlAFVuc3VwcG9ydGVkIGltYWdlIHR5cGUAU291cmNlIHdpZHRoIG11c3QgYmUgb2RkAEFzc2VydGlvbiBgcFswXSA+IHBwMVswXWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGltMi5jaGFubmVscygpID09IDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBweXJhbWlkLT5pbWFnZXMoKVswXS5oZWlnaHQoKSA9PSBkZXRlY3Rvci0+aGVpZ2h0KClgIGZhaWxlZCBpbiAAYWxsb2NhdG9yPFQ+OjphbGxvY2F0ZShzaXplX3QgbikgJ24nIGV4Y2VlZHMgbWF4aW11bSBzdXBwb3J0ZWQgc2l6ZQAvcHJvYy9zZWxmL2V4ZQBPY3RhdmUgb3V0IG9mIHJhbmdlAEhpc3RvZ3JhbSBwb2ludGVyIGlzIE5VTEwAQXNzZXJ0aW9uIGBhc3NpZ25tZW50LnNpemUoKSA9PSBudW1faW5kaWNlc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHBbMF0gPiBwcDFbMV1gIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAoY2h1bmtfc2l6ZSUyKT09MGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1SZWZJbWFnZUhlaWdodCA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkLndpZHRoKCkgPT0gaW0yLndpZHRoKClgIGZhaWxlZCBpbiAAVHJhbnNmb3JtYXRpb24gbWF0cml4IHJlYWQgZXJyb3IhIQoASW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSB3aWR0aAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2JpbmFyeV9oaWVyYXJjaGljYWxfY2x1c3RlcmluZy5oAGpwZwBVbnRlc3RlZCBiZWhhdmlvciBmb3Igb2RkIGNodW5rIHNpemUAaGVpZ2h0IG11c3QgYmUgcG9zaXRpdmUAU2NhbGUgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgKGZiaW4rMC41ZikgPiAwICYmIChmYmluLTAuNWYpIDwgbnVtX2JpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAhaXNpbmYodVswXSlgIGZhaWxlZCBpbiAAJXMlcwoAV2lkdGggaXMgemVybwAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL21hdGNoZXJzL2hvdWdoX3NpbWlsYXJpdHlfdm90aW5nLmgAQXNzaWdubWVudCBzaXplIHdyb25nAERlY2ltYWwgYmluIHBvc2l0aW9uIGluZGV4IG91dCBvZiByYW5nZQBJTkYAQXNzZXJ0aW9uIGAoaW50KXN0ZDo6Zmxvb3IoeCkgPT0gKGludCl4YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZC5oZWlnaHQoKSA9PSBpbTIuaGVpZ2h0KClgIGZhaWxlZCBpbiAASW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBoZWlnaHQALy4uL3NoYXJlLyVzAEhlaWdodCBpcyB6ZXJvAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2ludGVycG9sYXRlLmgAQXNzZXJ0aW9uIGBhc3NpZ25tZW50W2ldICE9IC0xYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaW5kZXggPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1hZ25pdHVkZSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgIWlzaW5mKHVbMV0pYCBmYWlsZWQgaW4gAFN0ZXAgaXMgemVybwBNYWduaXR1ZGUgY2Fubm90IGJlIG5lZ2F0aXZlAGZsb29yKCkgYW5kIGNhc3Qgbm90IHRoZSBzYW1lAGluZGV4IG91dCBvZiByYW5nZQBBc3NpZ25tZW50IGlzIGludmFsaWQASE9NRQBBc3NlcnRpb24gYGltMS53aWR0aCgpID09IGltMi53aWR0aCgpYCBmYWlsZWQgaW4gAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2hhcnJpcy1pbmxpbmUuaABhbGxvY2F0b3I8VD46OmFsbG9jYXRlKHNpemVfdCBuKSAnbicgZXhjZWVkcyBtYXhpbXVtIHN1cHBvcnRlZCBzaXplAC9wcm9jL3NlbGYvY21kbGluZQBBc3NlcnRpb24gYChpbnQpc3RkOjpmbG9vcih5KSA9PSAoaW50KXlgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBhc3NpZ25tZW50W2ldIDwgbnVtX2luZGljZXNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBudW1fYmlucyA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGk+PjEpIDwgc3RkOjpjZWlsKChzcmNfaGVpZ2h0LTEpLzIuZilgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbTEuaGVpZ2h0KCkgPT0gaW0yLmhlaWdodCgpYCBmYWlsZWQgaW4gAEluZGV4IGlzIG91dCBvZiBib3VuZHMATnVtYmVyIGJpbnMgbXVzdCBiZSBwb3NpdGl2ZQBBc3NpZ25tZW50IG91dCBvZiByYW5nZQBPdXQgb2YgcmFuZ2UARG9HIFB5cmFtaWQAcmIAQXNzZXJ0aW9uIGB5cCA+PSAwICYmIHlwIDwgaGVpZ2h0YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluWCA+PSAwYCBmYWlsZWQgaW4gAHlwIG91dCBvZiBib3VuZHMATm9uLW1heCBzdXBwcmVzc2lvbgBiaW5YIG91dCBvZiByYW5nZQBBc3NlcnRpb24gYGluZGljZXNbYXNzaWdubWVudFtpXV0gPCBudW1fZmVhdHVyZXNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbWFnZS50eXBlKCkgPT0gSU1BR0VfVUlOVDhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MSA+PSAwYCBmYWlsZWQgaW4gACVzOiAlcwoAU3VicGl4ZWwAdzEgbXVzdCBiZSBwb3NpdGl2ZQBVbmFibGUgdG8gZGV0ZXJtaW5lIHByb2Nlc3MgbmFtZQBPbmx5IGdyYXkgc2NhbGUgaW1hZ2VzIGFyZSBzdXBwb3J0ZWQAQXNzZXJ0aW9uIGB5cF9wbHVzXzEgPj0gMCAmJiB5cF9wbHVzXzEgPCBoZWlnaHRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5YIDwgbU51bVhCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaXQtPnNlY29uZC5zaXplKCkgIT0gMGAgZmFpbGVkIGluIABwcnVuZUZlYXR1cmVzAHlwX3BsdXNfMSBvdXQgb2YgYm91bmRzACVzJXMAQ2x1c3RlciBtdXN0IGhhdmUgYXRsZWFzZXQgMSBmZWF0dXJlAEFzc2VydGlvbiBgb2N0YXZlIDwgbU51bU9jdGF2ZXNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5ZID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MiA+PSAwYCBmYWlsZWQgaW4gAEZpbmQgT3JpZW50YXRpb25zAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvZGV0ZWN0b3JzL2dhdXNzaWFuX3NjYWxlX3NwYWNlX3B5cmFtaWQuaAB3MiBtdXN0IGJlIHBvc2l0aXZlAC92YXIvY2FjaGUAYmluWSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGB4cCA+PSAwICYmIHhwIDwgd2lkdGhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkc3RbaV0gPj0gLTI1ODA2NGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1LID09IG1DZW50ZXJzLnNpemUoKWAgZmFpbGVkIGluIAB4cCBvdXQgb2YgYm91bmRzAC9zcmMvZW1zY3JpcHRlbi9XZWJBUktpdExpYi9saWIvU1JDL0tQTS9GcmVha01hdGNoZXIvbWF0Y2hlcnMva21lZG9pZHMuaAAvLmNhY2hlAE9jdGF2ZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBiMSA+PSAwICYmIGIxIDwgbnVtX2JpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5ZIDwgbU51bVlCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZHN0W2ldIDw9IDI1ODA2NGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGltMC5oZWlnaHQoKSA9PSBpbTEuaGVpZ2h0KClgIGZhaWxlZCBpbiAASGVpZ2h0IGlzIGluY29uc2lzdGVudABrIHNob3VsZCBtYXRjaCB0aGUgbnVtYmVyIG9mIGNsdXN0ZXIgY2VudGVycwAlcy8lcwBiMSBiaW4gaW5kZXggb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgeHBfcGx1c18xID49IDAgJiYgeHBfcGx1c18xIDwgd2lkdGhgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBzY2FsZSA8IG1OdW1TY2FsZXNQZXJPY3RhdmVgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBkc3RbaV0gPD0gNDEyOTAyNGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGJpbkFuZ2xlID49IDBgIGZhaWxlZCBpbiAAeHBfcGx1c18xIG91dCBvZiBib3VuZHMAYmluQW5nbGUgb3V0IG9mIHJhbmdlAFNjYWxlIG91dCBvZiByYW5nZQAvdmFyL2xpYgBBc3NlcnRpb24gYGIyID49IDAgJiYgYjIgPCBudW1fYmluc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYGRzdFtpXSA+PSAtNDEyOTAyNGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG51bV9mZWF0dXJlcyA+IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBpbTAuaGVpZ2h0KCkgPT0gaW0yLmhlaWdodCgpYCBmYWlsZWQgaW4gAC8uY29uZmlnAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUATnVtYmVyIG9mIGZlYXR1cmVzIG11c3QgYmUgcG9zaXRpdmUAYjIgYmluIGluZGV4IG91dCBvZiByYW5nZQBBc3NlcnRpb24gYGJpbkFuZ2xlIDwgbU51bUFuZ2xlQmluc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHcwID49IDAgJiYgdzAgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGltMS5oZWlnaHQoKT4+MSkgPT0gaW0yLmhlaWdodCgpYCBmYWlsZWQgaW4gAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAT3V0IG9mIHJhbmdlAFRNUERJUgBBc3NlcnRpb24gYG51bV9pbmRpY2VzIDw9IG51bV9mZWF0dXJlc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYGd4eCA8PSA0MTI5MDI0YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluU2NhbGUgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYChpbTAuaGVpZ2h0KCk+PjEpID09IGltMS5oZWlnaHQoKWAgZmFpbGVkIGluIABNb3JlIGluZGljZXMgdGhhbiBmZWF0dXJlcwAvdG1wAGJpblNjYWxlIG91dCBvZiByYW5nZQBBc3NlcnRpb24gYHJvdyA8IG1IZWlnaHRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MSA+PSAwICYmIHcxIDw9IDEuMDAwMWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGd4eCA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGltMC5oZWlnaHQoKT4+MSkgPT0gaW0yLmhlaWdodCgpYCBmYWlsZWQgaW4gAEVycm9yIGxvb2tpbmcgZm9yIHJlc291cmNlcyBkaXJlY3RvcnkgcGF0aAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2ZyYW1ld29yay9pbWFnZS5oAEFzc2VydGlvbiBgYmluU2NhbGUgPCBtTnVtU2NhbGVCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbUJ1Y2tldHMuc2l6ZSgpID09IG1OdW1CdWNrZXRzWGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG51bV9pbmRpY2VzID49IG1LYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZ3l5IDw9IDQxMjkwMjRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MiA+PSAwICYmIHcyIDw9IDEuMDAwMWAgZmFpbGVkIGluIABOb3QgZW5vdWdoIGZlYXR1cmVzAHJvdyBvdXQgb2YgYm91bmRzAEVycm9yIGNyZWF0aW5nIHJlc291cmNlcyBkaXJlY3RvcnkgcGF0aABCdWNrZXRzIGFyZSBub3QgYWxsb2NhdGVkAEFzc2VydGlvbiBgdzMgPj0gMCAmJiB3MyA8PSAxLjAwMDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBneXkgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYGluZGV4IDw9IChiaW5YICsgYmluWSptTnVtWEJpbnMgKyBiaW5BbmdsZSptTnVtWEJpbnMqbU51bVlCaW5zICsgYmluU2NhbGUqbU51bVhCaW5zKm1OdW1ZQmlucyptTnVtQW5nbGVCaW5zKWAgZmFpbGVkIGluIABBc3NpZ25tZW50IHNpemUgaXMgaW5jb3JyZWN0AEFzc2VydGlvbiBgbUJ1Y2tldHNbMF0uc2l6ZSgpID09IG1OdW1CdWNrZXRzWWAgZmFpbGVkIGluIABBc3NlcnRpb24gYGd4eSA8PSA0MTI5MDI0YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKHcwK3cxK3cyK3czKSA8PSAxLjAwMDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBuID4gMGAgZmFpbGVkIGluIABFcnJvcjogVW5hYmxlIHRvIGNoYW5nZSB3b3JraW5nIGRpcmVjdG9yeSB0byAnJXMnLgoAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci91dGlscy9wYXJ0aWFsX3NvcnQuaABBc3NlcnRpb24gYG1GZWF0dXJlUG9pbnRzLnNpemUoKSA8PSBtTWF4TnVtRmVhdHVyZVBvaW50c2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHBvcyA9PSA2NjZgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBneHkgPj0gLTQxMjkwMjRgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBudW1fY2VudGVycyA+IDBgIGZhaWxlZCBpbiAAWyUgLjNmICUgLjNmICUgLjNmXSBbJSA2LjFmXQoAAAADAAAAAwAAAAQAAAAEAAAABAAAAAEAAAAEAAAAAgAAAAIAAAACAAAAAgAAAAIAAAABAAAAAQAAAAEAAAAEAAAAiAAAAAUAAACQAAAABgAAAJgAAAAJAAAAsAAAABEEAABQCgAAawwAAJkOAAAuaXNldAByYgBONnZpc2lvbjI1R2F1c3NpYW5TY2FsZVNwYWNlUHlyYW1pZEUAAADU8AAA6VEAAFRvbyBtYW55IGZlYXR1cmUgcG9pbnRzAFRoZXJlIG11c3QgYmUgYXQgbGVhc3QgMSBjZW50ZXIAbiBtdXN0IGJlIHBvc2l0aXZlAFBvc2l0aW9uIGlzIG5vdCB3aXRoaW4gcmFuZ2UAWyVzXSBbJXNdIFslc10gOiBGb3VuZCAlZCBmZWF0dXJlcyBpbiBxdWVyeQBBc3NlcnRpb24gYGsgPiAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBga3Auc2NhbGUgPCBtTGFwbGFjaWFuUHlyYW1pZC5udW1TY2FsZVBlck9jdGF2ZSgpYCBmYWlsZWQgaW4gAEZlYXR1cmUgcG9pbnQgc2NhbGUgaXMgb3V0IG9mIGJvdW5kcwBrIG11c3QgYmUgcG9zaXRpdmUARmluZCBNYXRjaGVzICgxKQBIb3VnaCBWb3RpbmcgKDEpAEFzc2VydGlvbiBga3Auc2NvcmUgPT0gbGFwMS5nZXQ8ZmxvYXQ+KHkpW3hdYCBmYWlsZWQgaW4gAFNjb3JlIGlzIG5vdCBjb25zaXN0ZW50IHdpdGggdGhlIERvRyBpbWFnZQBGaW5kIEhvdWdoIE1hdGNoZXMgKDEpAEVzdGltYXRlIEhvbW9ncmFwaHkgKDEpAEFzc2VydGlvbiBgYnVja2V0WzBdLmZpcnN0ID49IGJ1Y2tldFtuXS5maXJzdGAgZmFpbGVkIGluIABudGhfZWxlbWVudCBmYWlsZWQARmluZCBJbmxpZXJzICgxKQBGaW5kIE1hdGNoZXMgKDIpAEFzc2VydGlvbiBgb2N0YXZlIDwgbU51bU9jdGF2ZXNgIGZhaWxlZCBpbiAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvZ2F1c3NpYW5fc2NhbGVfc3BhY2VfcHlyYW1pZC5oAEhvdWdoIFZvdGluZyAoMikAT2N0YXZlIG91dCBvZiByYW5nZQBGaW5kIEhvdWdoIE1hdGNoZXMgKDIpAEVzdGltYXRlIEhvbW9ncmFwaHkgKDIpAEFzc2VydGlvbiBgc2NhbGUgPCBtTnVtU2NhbGVzUGVyT2N0YXZlYCBmYWlsZWQgaW4gAFNjYWxlIG91dCBvZiByYW5nZQBGaW5kIElubGllcnMgKDIpAEFzc2VydGlvbiBgYmVzdF9pbmRleCAhPSBzdGQ6Om51bWVyaWNfbGltaXRzPHNpemVfdD46Om1heCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgaW5kZXggPCBtSW1hZ2VzLnNpemUoKWAgZmFpbGVkIGluIAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2RldGVjdG9ycy9Eb0dfc2NhbGVfaW52YXJpYW50X2RldGVjdG9yLmgAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9tYXRjaGVycy9mZWF0dXJlX21hdGNoZXItaW5saW5lLmgAU29tZXRoaW5nIHN0cmFuZ2UASW5kZXggaXMgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgc2NhbGUgPj0gMGAgZmFpbGVkIGluIABBc3NlcnRpb24gYG1NYXRjaGVzLnNpemUoKSA8PSBmZWF0dXJlczEtPnNpemUoKWAgZmFpbGVkIGluIABOdW1iZXIgb2YgbWF0Y2hlcyBzaG91bGQgYmUgbG93ZXIAU2NhbGUgbXVzdCBiZSBwb3NpdGl2ZQBTY2FsZSBtdXN0IGJlIGxlc3MgdGhhbiBudW1iZXIgb2Ygc2NhbGUgcGVyIG9jdGF2ZQBBc3NlcnRpb24gYG1Sb290LmdldCgpYCBmYWlsZWQgaW4gAFJvb3QgY2Fubm90IGJlIE5VTEwAQXNzZXJ0aW9uIGBsYXAwLmhlaWdodCgpID09IGxhcDEuaGVpZ2h0KCkgPT0gbGFwMi5oZWlnaHQoKWAgZmFpbGVkIGluIABXaWR0aC9oZWlnaHQgYXJlIG5vdCBjb25zaXN0ZW50AEFzc2VydGlvbiBgbWluaSAhPSAtMWAgZmFpbGVkIGluIABNaW5pbXVtIGluZGV4IG5vdCBzZXQAQXNzZXJ0aW9uIGAobGFwMC5oZWlnaHQoKSA9PSBsYXAxLmhlaWdodCgpKSAmJiAoKGxhcDEuaGVpZ2h0KCk+PjEpID09IGxhcDIuaGVpZ2h0KCkpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKChsYXAwLndpZHRoKCk+PjEpID09IGxhcDEud2lkdGgoKSkgJiYgKGxhcDEud2lkdGgoKSA9PSBsYXAyLndpZHRoKCkpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbiA8PSBpbl9tYXRjaGVzLnNpemUoKWAgZmFpbGVkIGluIABTaG91bGQgYmUgdGhlIHNhbWUAQXNzZXJ0aW9uIGAwYCBmYWlsZWQgaW4gAEltYWdlIHNpemVzIGFyZSBpbmNvbnNpc3RlbnQAQXNzZXJ0aW9uIGBiaW5YID49IDBgIGZhaWxlZCBpbiAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9tYXRjaGVycy9ob3VnaF9zaW1pbGFyaXR5X3ZvdGluZy5oAEFzc2VydGlvbiBgKHgtMSkgPj0gMCAmJiAoeCsxKSA8IGxhcDEud2lkdGgoKWAgZmFpbGVkIGluIAB4IG91dCBvZiBib3VuZHMAYmluWCBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBiaW5YIDwgbU51bVhCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKHktMSkgPj0gMCAmJiAoeSsxKSA8IGxhcDEuaGVpZ2h0KClgIGZhaWxlZCBpbiAAeSBvdXQgb2YgYm91bmRzAEFzc2VydGlvbiBgYmluWSA+PSAwYCBmYWlsZWQgaW4gAGJpblkgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgbGFwMC53aWR0aCgpID09IGxhcDEud2lkdGgoKWAgZmFpbGVkIGluIABJbWFnZSBkaW1lbnNpb25zIGluY29uc2lzdGVudABBc3NlcnRpb24gYGJpblkgPCBtTnVtWUJpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5BbmdsZSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgbGFwMC53aWR0aCgpID09IGxhcDIud2lkdGgoKWAgZmFpbGVkIGluIABiaW5BbmdsZSBvdXQgb2YgcmFuZ2UAQXNzZXJ0aW9uIGBsYXAwLmhlaWdodCgpID09IGxhcDEuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5BbmdsZSA8IG1OdW1BbmdsZUJpbnNgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBsYXAwLmhlaWdodCgpID09IGxhcDIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBiaW5TY2FsZSA+PSAwYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKHgtMSkgPj0gMCAmJiAoeCsxKSA8IGltLndpZHRoKClgIGZhaWxlZCBpbiAAYmluU2NhbGUgb3V0IG9mIHJhbmdlAEFzc2VydGlvbiBgKHktMSkgPj0gMCAmJiAoeSsxKSA8IGltLmhlaWdodCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgYmluU2NhbGUgPCBtTnVtU2NhbGVCaW5zYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgKGxhcDAud2lkdGgoKT4+MSkgPT0gbGFwMi53aWR0aCgpYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgZGlzdEJpbkFuZ2xlID49IDBgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGAobGFwMC5oZWlnaHQoKT4+MSkgPT0gbGFwMi5oZWlnaHQoKWAgZmFpbGVkIGluIABkaXN0QmluQW5nbGUgbXVzdCBub3QgYmUgbmVnYXRpdmUAQXNzZXJ0aW9uIGB4X2Rpdl8yLTAuNWYgPj0gMGAgZmFpbGVkIGluIAB4X2Rpdl8yIG91dCBvZiBib3VuZHMgb3V0IG9mIGJvdW5kcyBmb3IgaW50ZXJwb2xhdGlvbgBBc3NlcnRpb24gYGh5cC5zaXplKCkgPj0gOSptYXhfbnVtX2h5cG90aGVzZXNgIGZhaWxlZCBpbiAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9ob21vZ3JhcGh5X2VzdGltYXRpb24vcm9idXN0X2hvbW9ncmFwaHkuaABBc3NlcnRpb24gYHlfZGl2XzItMC41ZiA+PSAwYCBmYWlsZWQgaW4gAGh5cCB2ZWN0b3Igc2hvdWxkIGJlIG9mIHNpemUgOSptYXhfbnVtX2h5cG90aGVzZXMAeV9kaXZfMiBvdXQgb2YgYm91bmRzIG91dCBvZiBib3VuZHMgZm9yIGludGVycG9sYXRpb24AQXNzZXJ0aW9uIGB0bXBfaS5zaXplKCkgPj0gbnVtX3BvaW50c2AgZmFpbGVkIGluIABBc3NlcnRpb24gYHhfZGl2XzIrMC41ZiA8IGxhcDIud2lkdGgoKWAgZmFpbGVkIGluIAB0bXBfaSB2ZWN0b3Igc2hvdWxkIGJlIG9mIHNpemUgbnVtX3BvaW50cwBBc3NlcnRpb24gYHlfZGl2XzIrMC41ZiA8IGxhcDIuaGVpZ2h0KClgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGBoeXBfY29zdHMuc2l6ZSgpID49IG1heF9udW1faHlwb3RoZXNlc2AgZmFpbGVkIGluIABBc3NlcnRpb24gYChsYXAwLndpZHRoKCk+PjEpID09IGxhcDEud2lkdGgoKWAgZmFpbGVkIGluIABoeXBfY29zdHMgdmVjdG9yIHNob3VsZCBiZSBvZiBzaXplIG1heF9udW1faHlwb3RoZXNlcwBBc3NlcnRpb24gYChsYXAwLmhlaWdodCgpPj4xKSA9PSBsYXAxLmhlaWdodCgpYCBmYWlsZWQgaW4gAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAQXNzZXJ0aW9uIGBuID4gMGAgZmFpbGVkIGluIAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL3V0aWxzL3BhcnRpYWxfc29ydC5oAEFzc2VydGlvbiBgcm93IDwgbUhlaWdodGAgZmFpbGVkIGluIAAvc3JjL2Vtc2NyaXB0ZW4vV2ViQVJLaXRMaWIvbGliL1NSQy9LUE0vRnJlYWtNYXRjaGVyL2ZyYW1ld29yay9pbWFnZS5oAG4gbXVzdCBiZSBwb3NpdGl2ZQByb3cgb3V0IG9mIGJvdW5kcwBBc3NlcnRpb24gYGsgPiAwYCBmYWlsZWQgaW4gAGsgbXVzdCBiZSBwb3NpdGl2ZQBBc3NlcnRpb24gYChpbnQpc3RkOjpmbG9vcih4KSA9PSAoaW50KXhgIGZhaWxlZCBpbiAAL3NyYy9lbXNjcmlwdGVuL1dlYkFSS2l0TGliL2xpYi9TUkMvS1BNL0ZyZWFrTWF0Y2hlci9kZXRlY3RvcnMvaW50ZXJwb2xhdGUuaABBc3NlcnRpb24gYDBgIGZhaWxlZCBpbiAARmFpbGVkIHRvIGNvbXB1dGUgbWF0cml4IGludmVyc2UAZmxvb3IoKSBhbmQgY2FzdCBub3QgdGhlIHNhbWUAQXNzZXJ0aW9uIGAoaW50KXN0ZDo6Zmxvb3IoeSkgPT0gKGludCl5YCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgeXAgPj0gMCAmJiB5cCA8IGhlaWdodGAgZmFpbGVkIGluIAB5cCBvdXQgb2YgYm91bmRzAEFzc2VydGlvbiBgeXBfcGx1c18xID49IDAgJiYgeXBfcGx1c18xIDwgaGVpZ2h0YCBmYWlsZWQgaW4gAHlwX3BsdXNfMSBvdXQgb2YgYm91bmRzAEFzc2VydGlvbiBgeHAgPj0gMCAmJiB4cCA8IHdpZHRoYCBmYWlsZWQgaW4gAHhwIG91dCBvZiBib3VuZHMAQXNzZXJ0aW9uIGB4cF9wbHVzXzEgPj0gMCAmJiB4cF9wbHVzXzEgPCB3aWR0aGAgZmFpbGVkIGluIAB4cF9wbHVzXzEgb3V0IG9mIGJvdW5kcwBBc3NlcnRpb24gYHcwID49IDAgJiYgdzAgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAE91dCBvZiByYW5nZQBBc3NlcnRpb24gYHcxID49IDAgJiYgdzEgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAEFzc2VydGlvbiBgdzIgPj0gMCAmJiB3MiA8PSAxLjAwMDFgIGZhaWxlZCBpbiAAQXNzZXJ0aW9uIGB3MyA+PSAwICYmIHczIDw9IDEuMDAwMWAgZmFpbGVkIGluIABBc3NlcnRpb24gYCh3MCt3MSt3Mit3MykgPD0gMS4wMDAxYCBmYWlsZWQgaW4gAAAAAAAAABBSAAAQAAAAEQAAAAAAAACQZgAAEgAAABMAAABONnZpc2lvbjlFeGNlcHRpb25FAPzwAABQZgAA7PEAAE42dmlzaW9uMThCaW5vbWlhbFB5cmFtaWQzMmZFAAAA/PAAAHBmAAAQUgAAAAAAAGRmAAAOAAAAFAAAABUAAAC5Uow+jlrnPrlSjD4AAAAAAAAAAGRnAAAWAAAAFwAAABgAAAAZAAAAGgAAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVBONnZpc2lvbjhLZXlmcmFtZUlMaTk2RUVFTlNfMTBzaGFyZWRfcHRySVMzX0UyN19fc2hhcmVkX3B0cl9kZWZhdWx0X2RlbGV0ZUlTM19TM19FRU5TXzlhbGxvY2F0b3JJUzNfRUVFRQD88AAA3GYAAHTuAABOU3QzX18yMTBzaGFyZWRfcHRySU42dmlzaW9uOEtleWZyYW1lSUxpOTZFRUVFMjdfX3NoYXJlZF9wdHJfZGVmYXVsdF9kZWxldGVJUzNfUzNfRUUAYm9vbCB2aXNpb246OlZpc3VhbERhdGFiYXNlPHZpc2lvbjo6RlJFQUtFeHRyYWN0b3IsIHZpc2lvbjo6QmluYXJ5RmVhdHVyZVN0b3JlLCB2aXNpb246OkJpbmFyeUZlYXR1cmVNYXRjaGVyPDk2Pj46OnF1ZXJ5KGNvbnN0IHZpc2lvbjo6R2F1c3NpYW5TY2FsZVNwYWNlUHlyYW1pZCAqKSBbRkVBVFVSRV9FWFRSQUNUT1IgPSB2aXNpb246OkZSRUFLRXh0cmFjdG9yLCBTVE9SRSA9IHZpc2lvbjo6QmluYXJ5RmVhdHVyZVN0b3JlLCBNQVRDSEVSID0gdmlzaW9uOjpCaW5hcnlGZWF0dXJlTWF0Y2hlcjw5Nj5dAEH00QELsEyyvrk+EtygvpC+OT4S3KC+kL45vgAAAICyvrm+EtygPpC+Ob4S3KA+kL45PtJyGL8AAAAA0nKYvjoGBL/Scpg+OgYEv9JyGD8AAACA0nKYPjoGBD/Scpi+OgYEPwAAAIBWuD2/Zk0kP1a4vb5mTSQ/Vri9PgAAAABWuD0/Zk0kv1a4vT5mTSS/Vri9vgzpWD8AAACADOnYPpnZOz8M6di+mdk7PwzpWL8AAAAADOnYvpnZO78M6dg+mdk7vwAAAAD8U24/8WVOvw1U7j7xZU6/DVTuvgAAAID8U26/8WVOPw1U7r7xZU4/DVTuPgAAgL8AAAAAAAAAv9CzXb8AAAA/0LNdvwAAgD8AAACAAAAAP9CzXT8AAAC/0LNdPwAAAAB4agAAFgAAABsAAAAcAAAAHQAAAB4AAABOU3QzX18yMjBfX3NoYXJlZF9wdHJfcG9pbnRlcklQaDE2TnVsbEFycmF5RGVsZXRlckloRU5TXzlhbGxvY2F0b3JJaEVFRUUAAAAA/PAAACxqAAB07gAAMTZOdWxsQXJyYXlEZWxldGVySWhFAAAAAAAAACBrAAAWAAAAHwAAACAAAAAhAAAAIgAAAE5TdDNfXzIyMF9fc2hhcmVkX3B0cl9wb2ludGVySVBoTlNfMTBzaGFyZWRfcHRySWhFMjdfX3NoYXJlZF9wdHJfZGVmYXVsdF9kZWxldGVJaGhFRU5TXzlhbGxvY2F0b3JJaEVFRUUA/PAAALhqAAB07gAATlN0M19fMjEwc2hhcmVkX3B0ckloRTI3X19zaGFyZWRfcHRyX2RlZmF1bHRfZGVsZXRlSWhoRUUAdmlzaW9uOjpTY29wZWRUaW1lcjo6flNjb3BlZFRpbWVyKCkAaWlpAGlpaWkAaWlpaQBpbmZpbml0eQBNaXNzaW5nIEh1ZmZtYW4gY29kZSB0YWJsZSBlbnRyeQBGZWJydWFyeQBKYW51YXJ5AEp1bHkAVGh1cnNkYXkAVHVlc2RheQBXZWRuZXNkYXkAU2F0dXJkYXkAU3VuZGF5AE1vbmRheQBGcmlkYXkATWF5ACVtLyVkLyV5AE1BWF9BTExPQ19DSFVOSyBpcyB3cm9uZywgcGxlYXNlIGZpeABBTElHTl9UWVBFIGlzIHdyb25nLCBwbGVhc2UgZml4AE5vdCBhIEpQRUcgZmlsZTogc3RhcnRzIHdpdGggMHglMDJ4IDB4JTAyeABDb3JydXB0IEpQRUcgZGF0YTogJXUgZXh0cmFuZW91cyBieXRlcyBiZWZvcmUgbWFya2VyIDB4JTAyeABVbmV4cGVjdGVkIG1hcmtlciAweCUwMngAVW5zdXBwb3J0ZWQgbWFya2VyIHR5cGUgMHglMDJ4AFVuc3VwcG9ydGVkIEpQRUcgcHJvY2VzczogU09GIHR5cGUgMHglMDJ4AERlZmluZSBIdWZmbWFuIFRhYmxlIDB4JTAyeABEZWZpbmUgQXJpdGhtZXRpYyBUYWJsZSAweCUwMng6IDB4JTAyeAAtKyAgIDBYMHgALTBYKzBYIDBYLTB4KzB4IDB4AEJvZ3VzIERBQyB2YWx1ZSAweCV4AF9fbmV4dF9wcmltZSBvdmVyZmxvdwBIdWZmbWFuIGNvZGUgc2l6ZSB0YWJsZSBvdmVyZmxvdwBOb3YAVGh1ACAgICAgICAgJTR1ICU0dSAlNHUgJTR1ICU0dSAlNHUgJTR1ICU0dQBKUEVHIHBhcmFtZXRlciBzdHJ1Y3QgbWlzbWF0Y2g6IGxpYnJhcnkgdGhpbmtzIHNpemUgaXMgJXUsIGNhbGxlciBleHBlY3RzICV1AERlZmluZSBSZXN0YXJ0IEludGVydmFsICV1AFdhcm5pbmc6IHRodW1ibmFpbCBpbWFnZSBzaXplIGRvZXMgbm90IG1hdGNoIGRhdGEgbGVuZ3RoICV1AE1pc2NlbGxhbmVvdXMgbWFya2VyIDB4JTAyeCwgbGVuZ3RoICV1AEpGSUYgZXh0ZW5zaW9uIG1hcmtlcjogdHlwZSAweCUwMngsIGxlbmd0aCAldQBKRklGIGV4dGVuc2lvbiBtYXJrZXI6IHBhbGV0dGUgdGh1bWJuYWlsIGltYWdlLCBsZW5ndGggJXUASkZJRiBleHRlbnNpb24gbWFya2VyOiBKUEVHLWNvbXByZXNzZWQgdGh1bWJuYWlsIGltYWdlLCBsZW5ndGggJXUASkZJRiBleHRlbnNpb24gbWFya2VyOiBSR0IgdGh1bWJuYWlsIGltYWdlLCBsZW5ndGggJXUAVW5rbm93biBBUFAxNCBtYXJrZXIgKG5vdCBBZG9iZSksIGxlbmd0aCAldQBVbmtub3duIEFQUDAgbWFya2VyIChub3QgSkZJRiksIGxlbmd0aCAldQBPYnRhaW5lZCBYTVMgaGFuZGxlICV1AEZyZWVkIFhNUyBoYW5kbGUgJXUAT2J0YWluZWQgRU1TIGhhbmRsZSAldQBGcmVlZCBFTVMgaGFuZGxlICV1AHVuc3VwcG9ydGVkIGxvY2FsZSBmb3Igc3RhbmRhcmQgaW5wdXQAQXVndXN0AEludExpc3QAU3RyaW5nTGlzdABJbnZhbGlkIGNyb3AgcmVxdWVzdABVbnN1cHBvcnRlZCBjb2xvciBjb252ZXJzaW9uIHJlcXVlc3QAdW5zaWduZWQgc2hvcnQAdW5zaWduZWQgaW50AENvcnJ1cHQgSlBFRyBkYXRhOiBwcmVtYXR1cmUgZW5kIG9mIGRhdGEgc2VnbWVudABoZWlnaHQARnJhY3Rpb25hbCBzYW1wbGluZyBub3QgaW1wbGVtZW50ZWQgeWV0AENDSVI2MDEgc2FtcGxpbmcgbm90IGltcGxlbWVudGVkIHlldABOb3QgaW1wbGVtZW50ZWQgeWV0AEVycm9yIHJlYWRpbmcgZGF0YSBmcm9tICVzLmZzZXQAUmVhZGluZyAlcy5mc2V0AGdldABFcnJvcjoga3BtU2V0UmVmRGF0YVNldABFcnJvcjoga3BtQ2hhbmdlUGFnZU5vT2ZSZWZEYXRhU2V0AEVycm9yOiBrcG1NZXJnZVJlZkRhdGFTZXQAT2N0AGZsb2F0AFNhdAB1aW50NjRfdABDYW5ub3QgcXVhbnRpemUgbW9yZSB0aGFuICVkIGNvbG9yIGNvbXBvbmVudHMAU3RhcnQgT2YgU2NhbjogJWQgY29tcG9uZW50cwBCb2d1cyB2aXJ0dWFsIGFycmF5IGFjY2VzcwBCb2d1cyBzYW1wbGluZyBmYWN0b3JzAFF1YW50aXppbmcgdG8gJWQgPSAlZColZColZCBjb2xvcnMAUXVhbnRpemluZyB0byAlZCBjb2xvcnMAQ2Fubm90IHF1YW50aXplIHRvIGZld2VyIHRoYW4gJWQgY29sb3JzAENhbm5vdCBxdWFudGl6ZSB0byBtb3JlIHRoYW4gJWQgY29sb3JzAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogdHdvIFNPSSBtYXJrZXJzAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogdHdvIFNPRiBtYXJrZXJzAG5mdE1hcmtlcnMAX2FkZE5GVE1hcmtlcnMAU21vb3RoaW5nIG5vdCBzdXBwb3J0ZWQgd2l0aCBub25zdGFuZGFyZCBzYW1wbGluZyByYXRpb3MATWF4aW11bSBzdXBwb3J0ZWQgaW1hZ2UgZGltZW5zaW9uIGlzICV1IHBpeGVscwBBcHBsaWNhdGlvbiB0cmFuc2ZlcnJlZCB0b28gbWFueSBzY2FubGluZXMAQXBwbGljYXRpb24gdHJhbnNmZXJyZWQgdG9vIGZldyBzY2FubGluZXMARGVidWcgbW9kZSBzZXQgdG8gJXMARmFpbGVkIHRvIGNyZWF0ZSB0ZW1wb3JhcnkgZmlsZSAlcwBDbG9zZWQgdGVtcG9yYXJ5IGZpbGUgJXMAT3BlbmVkIHRlbXBvcmFyeSBmaWxlICVzAEFwcgB2ZWN0b3IASW5wdXQgZmlsZSByZWFkIGVycm9yAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogbWlzc2luZyBTT1MgbWFya2VyAG5mdE1hcmtlcgBkZXRlY3RNYXJrZXIAZ2V0TkZUTWFya2VyAGRldGVjdE5GVE1hcmtlcgBPY3RvYmVyAE5vdmVtYmVyAFNlcHRlbWJlcgBEZWNlbWJlcgB1bnNpZ25lZCBjaGFyAGlvc19iYXNlOjpjbGVhcgBNYXIAVW5yZWNvZ25pemVkIGNvbXBvbmVudCBJRHMgJWQgJWQgJWQsIGFzc3VtaW5nIFlDYkNyAHNldHVwAFZpcnR1YWwgYXJyYXkgY29udHJvbGxlciBtZXNzZWQgdXAAU2VwACVJOiVNOiVTICVwAHRlYXJkb3duAFN1bgBKdW4Ac3RkOjpleGNlcHRpb24AQm9ndXMgSHVmZm1hbiB0YWJsZSBkZWZpbml0aW9uAFNlbGVjdGVkICVkIGNvbG9ycyBmb3IgcXVhbnRpemF0aW9uAEltYWdlIHRvbyB3aWRlIGZvciB0aGlzIGltcGxlbWVudGF0aW9uAE1vbgBuYW4ARGlkbid0IGV4cGVjdCBtb3JlIHRoYW4gb25lIHNjYW4AU2FtcGxpbmcgZmFjdG9ycyB0b28gbGFyZ2UgZm9yIGludGVybGVhdmVkIHNjYW4ASmFuAEp1bABib29sAEJ1ZmZlciBwYXNzZWQgdG8gSlBFRyBsaWJyYXJ5IGlzIHRvbyBzbWFsbABBcHJpbABzZXRMb2dMZXZlbABnZXRMb2dMZXZlbABlbXNjcmlwdGVuOjp2YWwAcHVzaF9iYWNrAEZyaQBkcGkATkZUIG1hcmtlciBoZWlnaHQ6ICVpAE5GVCBudW0uIG9mIEltYWdlU2V0OiAlaQBORlQgbWFya2VyIGRwaTogJWkATkZUIG1hcmtlciB3aWR0aDogJWkAZGF0YXNldFBhdGhuYW1lcyBzaXplOiAlaQBCb2d1cyBtYXJrZXIgbGVuZ3RoAHdpZHRoAE1hcmNoAEF1ZwB1bnNpZ25lZCBsb25nAHN0ZDo6d3N0cmluZwBzdGQ6OnN0cmluZwBzdGQ6OnUxNnN0cmluZwBzdGQ6OnUzMnN0cmluZwBDb3B5cmlnaHQgKEMpIDIwMTgsIFRob21hcyBHLiBMYW5lLCBHdWlkbyBWb2xsYmVkaW5nAGluZgAlLjBMZgAlTGYAcmVzaXplAGFsbG9jYXRvcjxUPjo6YWxsb2NhdGUoc2l6ZV90IG4pICduJyBleGNlZWRzIG1heGltdW0gc3VwcG9ydGVkIHNpemUAdHJ1ZQBUdWUAZmFsc2UAU3VzcGVuc2lvbiBub3QgYWxsb3dlZCBoZXJlAEp1bmUAc2V0UHJvamVjdGlvbk5lYXJQbGFuZQBnZXRQcm9qZWN0aW9uTmVhclBsYW5lAHNldFByb2plY3Rpb25GYXJQbGFuZQBnZXRQcm9qZWN0aW9uRmFyUGxhbmUAUmVxdWVzdGVkIGZlYXR1cmUgd2FzIG9taXR0ZWQgYXQgY29tcGlsZSB0aW1lAFNlZWsgZmFpbGVkIG9uIHRlbXBvcmFyeSBmaWxlAFJlYWQgZmFpbGVkIG9uIHRlbXBvcmFyeSBmaWxlAEVtcHR5IGlucHV0IGZpbGUAUHJlbWF0dXJlIGVuZCBvZiBpbnB1dCBmaWxlAFByZW1hdHVyZSBlbmQgb2YgSlBFRyBmaWxlAHNldENhbWVyYSgpOiBFcnJvciBjcmVhdGluZyAzRCBoYW5kbGUAZG91YmxlAERDVCBjb2VmZmljaWVudCBvdXQgb2YgcmFuZ2UASW52YWxpZCBjb2xvciBxdWFudGl6YXRpb24gbW9kZSBjaGFuZ2UASlBFRyBkYXRhc3RyZWFtIGNvbnRhaW5zIG5vIGltYWdlACAgICB3aXRoICVkIHggJWQgdGh1bWJuYWlsIGltYWdlAGdldFByb2Nlc3NpbmdJbWFnZQBTdGFydCBvZiBJbWFnZQBFbmQgT2YgSW1hZ2UAQm9ndXMgYnVmZmVyIGNvbnRyb2wgbW9kZQBDb3JydXB0IEpQRUcgZGF0YTogYmFkIEh1ZmZtYW4gY29kZQBDb3JydXB0IEpQRUcgZGF0YTogYmFkIGFyaXRobWV0aWMgY29kZQBzZXREZWJ1Z01vZGUAZ2V0RGVidWdNb2RlAHNldFRocmVzaG9sZE1vZGUAZ2V0VGhyZXNob2xkTW9kZQBzZXRJbWFnZVByb2NNb2RlAGdldEltYWdlUHJvY01vZGUAQm9ndXMgaW5wdXQgY29sb3JzcGFjZQBCb2d1cyBKUEVHIGNvbG9yc3BhY2UAc2V0VGhyZXNob2xkAGdldFRocmVzaG9sZAB2b2lkAEJhY2tpbmcgc3RvcmUgbm90IHN1cHBvcnRlZABEQ1Qgc2NhbGVkIGJsb2NrIHNpemUgJWR4JWQgbm90IHN1cHBvcnRlZABRdWFudGl6YXRpb24gdGFibGUgMHglMDJ4IHdhcyBub3QgZGVmaW5lZABIdWZmbWFuIHRhYmxlIDB4JTAyeCB3YXMgbm90IGRlZmluZWQAQXJpdGhtZXRpYyB0YWJsZSAweCUwMnggd2FzIG5vdCBkZWZpbmVkAFdyaXRlIHRvIFhNUyBmYWlsZWQAUmVhZCBmcm9tIFhNUyBmYWlsZWQAV3JpdGUgdG8gRU1TIGZhaWxlZABSZWFkIGZyb20gRU1TIGZhaWxlZABXZWQAICAgICAgICAlM2QgJTNkICUzZCAlM2QgJTNkICUzZCAlM2QgJTNkAFdhcm5pbmc6IHVua25vd24gSkZJRiByZXZpc2lvbiBudW1iZXIgJWQuJTAyZABDb3JydXB0IEpQRUcgZGF0YTogZm91bmQgbWFya2VyIDB4JTAyeCBpbnN0ZWFkIG9mIFJTVCVkAFN0YXJ0IE9mIEZyYW1lIDB4JTAyeDogd2lkdGg9JXUsIGhlaWdodD0ldSwgY29tcG9uZW50cz0lZAAgICAgQ29tcG9uZW50ICVkOiAlZGh4JWR2IHE9JWQASW52YWxpZCBwcm9ncmVzc2l2ZSBwYXJhbWV0ZXJzIFNzPSVkIFNlPSVkIEFoPSVkIEFsPSVkACAgU3M9JWQsIFNlPSVkLCBBaD0lZCwgQWw9JWQAICAgIENvbXBvbmVudCAlZDogZGM9JWQgYWM9JWQASW52YWxpZCBwcm9ncmVzc2l2ZSBwYXJhbWV0ZXJzIGF0IHNjYW4gc2NyaXB0IGVudHJ5ICVkAEludmFsaWQgc2NhbiBzY3JpcHQgYXQgZW50cnkgJWQAQm9ndXMgRFFUIGluZGV4ICVkAEJvZ3VzIERIVCBpbmRleCAlZABCb2d1cyBEQUMgaW5kZXggJWQAVG9vIG1hbnkgY29sb3IgY29tcG9uZW50czogJWQsIG1heCAlZABJbmNvbnNpc3RlbnQgcHJvZ3Jlc3Npb24gc2VxdWVuY2UgZm9yIGNvbXBvbmVudCAlZCBjb2VmZmljaWVudCAlZABXcm9uZyBKUEVHIGxpYnJhcnkgdmVyc2lvbjogbGlicmFyeSBpcyAlZCwgY2FsbGVyIGV4cGVjdHMgJWQAVGhyZXNob2xkIG1vZGUgc2V0IHRvICVkAFRocmVzaG9sZCBzZXQgdG8gJWQAQXQgbWFya2VyIDB4JTAyeCwgcmVjb3ZlcnkgYWN0aW9uICVkAFVuc3VwcG9ydGVkIEpQRUcgZGF0YSBwcmVjaXNpb24gJWQARGVmaW5lIFF1YW50aXphdGlvbiBUYWJsZSAlZCAgcHJlY2lzaW9uICVkAEFkb2JlIEFQUDE0IG1hcmtlcjogdmVyc2lvbiAlZCwgZmxhZ3MgMHglMDR4IDB4JTA0eCwgdHJhbnNmb3JtICVkAEFsbG9jYXRlZCB2aWRlb0ZyYW1lU2l6ZSAlZABJbXByb3BlciBjYWxsIHRvIEpQRUcgbGlicmFyeSBpbiBzdGF0ZSAlZABDYW5ub3QgdHJhbnNjb2RlIGR1ZSB0byBtdWx0aXBsZSB1c2Ugb2YgcXVhbnRpemF0aW9uIHRhYmxlICVkAFVua25vd24gQWRvYmUgY29sb3IgdHJhbnNmb3JtIGNvZGUgJWQASW52YWxpZCBtZW1vcnkgcG9vbCBjb2RlICVkAEJvZ3VzIG1lc3NhZ2UgY29kZSAlZABUcmFja2luZyBsb3N0LiAlZABKRklGIEFQUDAgbWFya2VyOiB2ZXJzaW9uICVkLiUwMmQsIGRlbnNpdHkgJWR4JWQgICVkAERlYwAlbGQlYwBDb21wb25lbnQgaW5kZXggJWQ6IG1pc21hdGNoaW5nIHNhbXBsaW5nIHJhdGlvICVkOiVkLCAlZDolZCwgJWMARmViAHJ3YQBTY2FuIHNjcmlwdCBkb2VzIG5vdCB0cmFuc21pdCBhbGwgZGF0YQBnZXRORlREYXRhAF9sb2FkQ2FtZXJhACVhICViICVkICVIOiVNOiVTICVZAFBPU0lYAEFSX0xBQkVMSU5HX1RIUkVTSF9NT0RFX0FVVE9fT1RTVQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfQ09OVFJBU1QAQVJfTUFYX0xPT1BfQ09VTlQASW52YWxpZCBjb21wb25lbnQgSUQgJWQgaW4gU09TAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9IRVVSSVNUSUNfVFJPVUJMRVNPTUVfTUFUUklYX0NPREVTAEVSUk9SX01BUktFUl9JTkRFWF9PVVRfT0ZfQk9VTkRTACVIOiVNOiVTAEFSX0xPR19MRVZFTF9FUlJPUgBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfUE9TRV9FUlJPUgBBUl9MT0dfTEVWRUxfSU5GTwBBUl9MT0dfTEVWRUxfUkVMX0lORk8AQVJfTE9HX0xFVkVMX1dBUk4AQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX1BBVFRFUk5fRVhUUkFDVElPTgBOQU4AQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19NRURJQU4AUE0ASlBFR01FTQBBTQBMQ19BTEwAQVJfTUFSS0VSX0lORk9fQ1VUT0ZGX1BIQVNFX01BVENIX0JBUkNPREVfRURDX0ZBSUwAQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfTUFOVUFMAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9QT1NFX0VSUk9SX01VTFRJAEFSX0xPT1BfQlJFQUtfVEhSRVNIAEFSX0RFRkFVTFRfTEFCRUxJTkdfVEhSRVNIAEFSX0xPR19MRVZFTF9ERUJVRwBMQU5HAEludmFsaWQgU09TIHBhcmFtZXRlcnMgZm9yIHNlcXVlbnRpYWwgSlBFRwBDYXV0aW9uOiBxdWFudGl6YXRpb24gdGFibGVzIGFyZSB0b28gY29hcnNlIGZvciBiYXNlbGluZSBKUEVHAEludmFsaWQgSlBFRyBmaWxlIHN0cnVjdHVyZTogJXMgYmVmb3JlIFNPRgBJTkYAQVJfTEFCRUxJTkdfVEhSRVNIX01PREVfQVVUT19BREFQVElWRQBBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTk9ORQBBUl9ERUJVR19ESVNBQkxFAEFSX0RFQlVHX0VOQUJMRQBBUl9JTUFHRV9QUk9DX0ZSQU1FX0lNQUdFAEFSX0lNQUdFX1BST0NfRklFTERfSU1BR0UAQVJfREVGQVVMVF9ERUJVR19NT0RFAEFSX0RFRkFVTFRfSU1BR0VfUFJPQ19NT0RFAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9DT05GSURFTkNFAEVSUk9SX0FSQ09OVFJPTExFUl9OT1RfRk9VTkQARVJST1JfTVVMVElNQVJLRVJfTk9UX0ZPVU5EAEFSX01BUktFUl9JTkZPX0NVVE9GRl9QSEFTRV9NQVRDSF9CQVJDT0RFX05PVF9GT1VORABBUl9NQVJLRVJfSU5GT19DVVRPRkZfUEhBU0VfTUFUQ0hfR0VORVJJQwBPdXRwdXQgZmlsZSB3cml0ZSBlcnJvciAtLS0gb3V0IG9mIGRpc2sgc3BhY2U/AFdyaXRlIGZhaWxlZCBvbiB0ZW1wb3JhcnkgZmlsZSAtLS0gb3V0IG9mIGRpc2sgc3BhY2U/AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHNob3J0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBzaG9ydD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1bnNpZ25lZCBpbnQ+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGZsb2F0PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50OF90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQ4X3Q+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzxpbnQxNl90PgBlbXNjcmlwdGVuOjptZW1vcnlfdmlldzx1aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8aW50MzJfdD4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8Y2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8dW5zaWduZWQgY2hhcj4Ac3RkOjpiYXNpY19zdHJpbmc8dW5zaWduZWQgY2hhcj4AZW1zY3JpcHRlbjo6bWVtb3J5X3ZpZXc8c2lnbmVkIGNoYXI+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PHVuc2lnbmVkIGxvbmc+AGVtc2NyaXB0ZW46Om1lbW9yeV92aWV3PGRvdWJsZT4AMDEyMzQ1Njc4OQA5YyAgMTQtSmFuLTIwMTgAQy5VVEYtOABFcnJvciByZWFkaW5nIEtQTSBkYXRhIGZyb20gJXMuZnNldDMAUmVhZGluZyAlcy5mc2V0MwBzZXR1cEFSMgBFcnJvciBleGNlZWQgbWF4aW11bSBwYWdlcy4Ab24uAG9mZi4ATG9hZGluZyBvZiBORlQgZGF0YSBjb21wbGV0ZS4Ac2V0Q2FtZXJhKCk6IEVycm9yOiBhclBhcmFtTFRDcmVhdGUuAERvbmUuAHNldENhbWVyYSgpOiBFcnJvcjogYXJDcmVhdGVIYW5kbGUuAEVycm9yOiBhcjJDcmVhdGVIYW5kbGUuAGFyRmlsdGVyVHJhbnNNYXQgZXJyb3Igd2l0aCBtYXJrZXIgJWQuAEltYWdlIHByb2MuIG1vZGUgc2V0IHRvICVkLgBBc3NpZ25lZCBwYWdlIG5vLiAlZC4AbG9hZENhbWVyYSgpOiBFcnJvciBsb2FkaW5nIHBhcmFtZXRlciBmaWxlICVzIGZvciBjYW1lcmEuAChudWxsKQBFbXB0eSBKUEVHIGltYWdlIChETkwgbm90IHN1cHBvcnRlZCkASW5zdWZmaWNpZW50IG1lbW9yeSAoY2FzZSAlZCkAYWRkIE5GVCBtYXJrZXItPiAnJXMnAFB1cmUgdmlydHVhbCBmdW5jdGlvbiBjYWxsZWQhACVzCgBFcnJvcjogbWFsbG9jCgAjIyMgRmVhdHVyZSBjYW5kaWRhdGVzIGZvciB0cmFja2luZyBhcmUgb3ZlcmZsb3cuCgBUcmFja2VkIHBhZ2UgJWQgKG1heCAlZCkuCgAqKiogQ2FtZXJhIFBhcmFtZXRlciByZXNpemVkIGZyb20gJWQsICVkLiAqKioKAE91dCBvZiBtZW1vcnkhIQoAaWRkZGRkZGRkZGRkZGQAaQBpaWlpaWkAAE5TdDNfXzI2dmVjdG9ySU5TXzEyYmFzaWNfc3RyaW5nSWNOU18xMWNoYXJfdHJhaXRzSWNFRU5TXzlhbGxvY2F0b3JJY0VFRUVOUzRfSVM2X0VFRUUATlN0M19fMjEzX192ZWN0b3JfYmFzZUlOU18xMmJhc2ljX3N0cmluZ0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVOU185YWxsb2NhdG9ySWNFRUVFTlM0X0lTNl9FRUVFAE5TdDNfXzIyMF9fdmVjdG9yX2Jhc2VfY29tbW9uSUxiMUVFRQAAAADU8AAAUI0AAFjxAADyjAAAAAAAAAEAAAB4jQAAAAAAAFjxAACcjAAAAAAAAAEAAACAjQAAAAAAAFBOU3QzX18yNnZlY3RvcklOU18xMmJhc2ljX3N0cmluZ0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVOU185YWxsb2NhdG9ySWNFRUVFTlM0X0lTNl9FRUVFAAC08QAAsI0AAAAAAACYjQAAUEtOU3QzX18yNnZlY3RvcklOU18xMmJhc2ljX3N0cmluZ0ljTlNfMTFjaGFyX3RyYWl0c0ljRUVOU185YWxsb2NhdG9ySWNFRUVFTlM0X0lTNl9FRUVFALTxAAAYjgAAAQAAAJiNAABpaQB2AHZpAAiOAAAQ8AAACI4AAAiPAABOU3QzX18yMTJiYXNpY19zdHJpbmdJY05TXzExY2hhcl90cmFpdHNJY0VFTlNfOWFsbG9jYXRvckljRUVFRQBOU3QzX18yMjFfX2Jhc2ljX3N0cmluZ19jb21tb25JTGIxRUVFAAAAANTwAADXjgAAWPEAAJiOAAAAAAAAAQAAAACPAAAAAAAAdmlpaQBBsJ4CC1AQ8AAACI4AAJTwAAAIjwAAdmlpaWkAAACU8AAAcI4AAGlpaQB0jwAAmI0AAJTwAABOMTBlbXNjcmlwdGVuM3ZhbEUAANTwAABgjwAAaWlpaQBBkJ8CC5YCKPAAAJiNAACU8AAACI8AAGlpaWlpAE5TdDNfXzI2dmVjdG9ySWlOU185YWxsb2NhdG9ySWlFRUVFAE5TdDNfXzIxM19fdmVjdG9yX2Jhc2VJaU5TXzlhbGxvY2F0b3JJaUVFRUUAAABY8QAAyo8AAAAAAAABAAAAeI0AAAAAAABY8QAApo8AAAAAAAABAAAA+I8AAAAAAABQTlN0M19fMjZ2ZWN0b3JJaU5TXzlhbGxvY2F0b3JJaUVFRUUAAAAAtPEAACiQAAAAAAAAEJAAAFBLTlN0M19fMjZ2ZWN0b3JJaU5TXzlhbGxvY2F0b3JJaUVFRUUAAAC08QAAYJAAAAEAAAAQkAAAUJAAABDwAABQkAAAcPAAQbChAgsiEPAAAFCQAACU8AAAcPAAAJTwAACIkAAAdI8AABCQAACU8ABB4KECC/ICKPAAABCQAACU8AAAcPAAAE5TdDNfXzI2dmVjdG9ySTluZnRNYXJrZXJOU185YWxsb2NhdG9ySVMxX0VFRUUATlN0M19fMjEzX192ZWN0b3JfYmFzZUk5bmZ0TWFya2VyTlNfOWFsbG9jYXRvcklTMV9FRUVFAAAAWPEAAB+RAAAAAAAAAQAA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IG1lbW9yeQBSZXNvdXJjZSBidXN5AEludGVycnVwdGVkIHN5c3RlbSBjYWxsAFJlc291cmNlIHRlbXBvcmFyaWx5IHVuYXZhaWxhYmxlAEludmFsaWQgc2VlawBDcm9zcy1kZXZpY2UgbGluawBSZWFkLW9ubHkgZmlsZSBzeXN0ZW0ARGlyZWN0b3J5IG5vdCBlbXB0eQBDb25uZWN0aW9uIHJlc2V0IGJ5IHBlZXIAT3BlcmF0aW9uIHRpbWVkIG91dABDb25uZWN0aW9uIHJlZnVzZWQASG9zdCBpcyBkb3duAEhvc3QgaXMgdW5yZWFjaGFibGUAQWRkcmVzcyBpbiB1c2UAQnJva2VuIHBpcGUASS9PIGVycm9yAE5vIHN1Y2ggZGV2aWNlIG9yIGFkZHJlc3MAQmxvY2sgZGV2aWNlIHJlcXVpcmVkAE5vIHN1Y2ggZGV2aWNlAE5vdCBhIGRpcmVjdG9yeQBJcyBhIGRpcmVjdG9yeQBUZXh0IGZpbGUgYnVzeQBFeGVjIGZvcm1hdCBlcnJvcgBJbnZhbGlkIGFyZ3VtZW50AEFyZ3VtZW50IGxpc3QgdG9vIGxvbmcAU3ltYm9saWMgbGluayBsb29wAEZpbGVuYW1lIHRvbyBsb25nAFRvbyBtYW55IG9wZW4gZmlsZXMgaW4gc3lzdGVtAE5vIGZpbGUgZGVzY3JpcHRvcnMgYXZhaWxhYmxlAEJhZCBmaWxlIGRlc2NyaXB0b3IATm8gY2hpbGQgcHJvY2VzcwBCYWQgYWRkcmVzcwBGaWxlIHRvbyBsYXJnZQBUb28gbWFueSBsaW5rcwBObyBsb2NrcyBhdmFpbGFibGUAUmVzb3VyY2UgZGVhZGxvY2sgd291bGQgb2NjdXIAU3RhdGUgbm90IHJlY292ZXJhYmxlAFByZXZpb3VzIG93bmVyIGRpZWQAT3BlcmF0aW9uIGNhbmNlbGVkAEZ1bmN0aW9uIG5vdCBpbXBsZW1lbnRlZABObyBtZXNzYWdlIG9mIGRlc2lyZWQgdHlwZQBJZGVudGlmaWVyIHJlbW92ZWQARGV2aWNlIG5vdCBhIHN0cmVhbQBObyBkYXRhIGF2YWlsYWJsZQBEZXZpY2UgdGltZW91dABPdXQgb2Ygc3RyZWFtcyByZXNvdXJjZXMATGluayBoYXMgYmVlbiBzZXZlcmVkAFByb3RvY29sIGVycm9yAEJhZCBtZXNzYWdlAEZpbGUgZGVzY3JpcHRvciBpbiBiYWQgc3RhdGUATm90IGEgc29ja2V0AERlc3RpbmF0aW9uIGFkZHJlc3MgcmVxdWlyZWQATWVzc2FnZSB0b28gbGFyZ2UAUHJvdG9jb2wgd3JvbmcgdHlwZSBmb3Igc29ja2V0AFByb3RvY29sIG5vdCBhdmFpbGFibGUAUHJvdG9jb2wgbm90IHN1cHBvcnRlZABTb2NrZXQgdHlwZSBub3Qgc3VwcG9ydGVkAE5vdCBzdXBwb3J0ZWQAUHJvdG9jb2wgZmFtaWx5IG5vdCBzdXBwb3J0ZWQAQWRkcmVzcyBmYW1pbHkgbm90IHN1cHBvcnRlZCBieSBwcm90b2NvbABBZGRyZXNzIG5vdCBhdmFpbGFibGUATmV0d29yayBpcyBkb3duAE5ldHdvcmsgdW5yZWFjaGFibGUAQ29ubmVjdGlvbiByZXNldCBieSBuZXR3b3JrAENvbm5lY3Rpb24gYWJvcnRlZABObyBidWZmZXIgc3BhY2UgYXZhaWxhYmxlAFNvY2tldCBpcyBjb25uZWN0ZWQAU29ja2V0IG5vdCBjb25uZWN0ZWQAQ2Fubm90IHNlbmQgYWZ0ZXIgc29ja2V0IHNodXRkb3duAE9wZXJhdGlvbiBhbHJlYWR5IGluIHByb2dyZXNzAE9wZXJhdGlvbiBpbiBwcm9ncmVzcwBTdGFsZSBmaWxlIGhhbmRsZQBSZW1vdGUgSS9PIGVycm9yAFF1b3RhIGV4Y2VlZGVkAE5vIG1lZGl1bSBmb3VuZABXcm9uZyBtZWRpdW0gdHlwZQBNdWx0aWhvcCBhdHRlbXB0ZWQAQbL3AguWAaUCWwDwAbUFjAUlAYMGHQOUBP8AxwMxAwsGvAGPAX8DygQrANoGrwBCA04D3AEOBBUAoQYNAZQCCwI4BmQCvAL/Al0D5wQLB88CywXvBdsF4QIeBkUChQCCAmwDbwTxAPMDGAXZANoDTAZUAnsBnQO9BAAAUQAVArsAswNtAP8BhQQvBfkEOABlAUYBnwC3BqgBcwJTAQBB+PgCCwwhBAAAAAAAAAAALwIAQZj5AgsGNQRHBFYEAEGu+QILAqAEAEHC+QILX0YFYAVuBWEGAADPAQAAAAAAAAAAyQbpBvkGAAAAABkACgAZGRkAAAAABQAAAAAAAAkAAAAACwAAAAAAAAAAGQARChkZGQMKBwABAAkLGAAACQYLAAALAAYZAAAAGRkZAEGx+gILIQ4AAAAAAAAAABkACg0ZGRkADQAAAgAJDgAAAAkADgAADgBB6/oCCwEMAEH3+gILFRMAAAAAEwAAAAAJDAAAAAAADAAADABBpfsCCwEQAEGx+wILFQ8AAAAEDwAAAAAJEAAAAAAAEAAAEABB3/sCCwESAEHr+wILHhEAAAAAEQAAAAAJEgAAAAAAEgAAEgAAGgAAABoaGgBBovwCCw4aAAAAGhoaAAAAAAAACQBB0/wCCwEUAEHf/AILFRcAAAAAFwAAAAAJFAAAAAAAFAAAFABBjf0CCwEWAEGZ/QILJxUAAAAAFQAAAAAJFgAAAAAAFgAAFgAAMDEyMzQ1Njc4OUFCQ0RFRgBB5P0CCwIFAQBBjP4CCwj//////////wBB0P4CC4MS0XSeAFedvSqAcFIP//8+JwoAAABkAAAA6AMAABAnAACghgEAQEIPAICWmAAA4fUFGAAAADUAAABxAAAAa////877//+Sv///AAAAAAAAAAD/////////////////////////////////////////////////////////////////AAECAwQFBgcICf////////8KCwwNDg8QERITFBUWFxgZGhscHR4fICEiI////////woLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIj/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////wABAgQHAwYFAAAAAAAAAAIAAMADAADABAAAwAUAAMAGAADABwAAwAgAAMAJAADACgAAwAsAAMAMAADADQAAwA4AAMAPAADAEAAAwBEAAMASAADAEwAAwBQAAMAVAADAFgAAwBcAAMAYAADAGQAAwBoAAMAbAADAHAAAwB0AAMAeAADAHwAAwAAAALMBAADDAgAAwwMAAMMEAADDBQAAwwYAAMMHAADDCAAAwwkAAMMKAADDCwAAwwwAAMMN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";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(file){try{if(file==wasmBinaryFile&&wasmBinary){return new Uint8Array(wasmBinary)}var binary=tryParseAsDataURI(file);if(binary){return binary}if(readBinary){return readBinary(file)}else{throw"both async and sync fetching of the wasm failed"}}catch(err){abort(err)}}function getBinaryPromise(){if(!wasmBinary&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)){if(typeof fetch=="function"&&!isFileURI(wasmBinaryFile)){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){if(!response["ok"]){throw"failed to load wasm binary file at '"+wasmBinaryFile+"'"}return response["arrayBuffer"]()}).catch(function(){return getBinary(wasmBinaryFile)})}else{if(readAsync){return new Promise(function(resolve,reject){readAsync(wasmBinaryFile,function(response){resolve(new Uint8Array(response))},reject)})}}}return Promise.resolve().then(function(){return getBinary(wasmBinaryFile)})}function createWasm(){var info={"a":asmLibraryArg};function receiveInstance(instance,module){var exports=instance.exports;Module["asm"]=exports;wasmMemory=Module["asm"]["Z"];updateGlobalBufferAndViews(wasmMemory.buffer);wasmTable=Module["asm"]["ca"];addOnInit(Module["asm"]["_"]);removeRunDependency("wasm-instantiate")}addRunDependency("wasm-instantiate");function receiveInstantiationResult(result){receiveInstance(result["instance"])}function instantiateArrayBuffer(receiver){return getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(function(instance){return instance}).then(receiver,function(reason){err("failed to asynchronously prepare wasm: "+reason);abort(reason)})}function instantiateAsync(){if(!wasmBinary&&typeof WebAssembly.instantiateStreaming=="function"&&!isDataURI(wasmBinaryFile)&&!isFileURI(wasmBinaryFile)&&typeof fetch=="function"){return fetch(wasmBinaryFile,{credentials:"same-origin"}).then(function(response){var result=WebAssembly.instantiateStreaming(response,info);return result.then(receiveInstantiationResult,function(reason){err("wasm streaming compile failed: "+reason);err("falling back to ArrayBuffer instantiation");return instantiateArrayBuffer(receiveInstantiationResult)})})}else{return instantiateArrayBuffer(receiveInstantiationResult)}}if(Module["instantiateWasm"]){try{var exports=Module["instantiateWasm"](info,receiveInstance);return exports}catch(e){err("Module.instantiateWasm callback failed with error: "+e);return false}}instantiateAsync().catch(readyPromiseReject);return{}}var tempDouble;var tempI64;var ASM_CONSTS={62544:function($0,$1,$2){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style)},62683:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},62861:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},63039:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},63217:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.log(infoHead+message,style,format)},63395:function($0,$1,$2,$3){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.log(infoHead+message,style,$3)},63538:function($0,$1,$2){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style)},63681:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},63863:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},64045:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},64227:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.error(errorHead+message,style,format)},64409:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.error(errorHead+message,style,$3)},64556:function($0,$1,$2){var message=UTF8ToString($0);var infoHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(infoHead+message,style)},64696:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},64877:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},65058:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},65239:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);var format=UTF8ToString($3);console.warn(errorHead+message,style,format)},65420:function($0,$1,$2,$3){var message=UTF8ToString($0);var errorHead=UTF8ToString($1);var style=UTF8ToString($2);console.warn(errorHead+message,style,$3)},65566:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=$a[i++];markerInfo["found"]=1;markerInfo["pose"][0]=$a[i++];markerInfo["pose"][1]=$a[i++];markerInfo["pose"][2]=$a[i++];markerInfo["pose"][3]=$a[i++];markerInfo["pose"][4]=$a[i++];markerInfo["pose"][5]=$a[i++];markerInfo["pose"][6]=$a[i++];markerInfo["pose"][7]=$a[i++];markerInfo["pose"][8]=$a[i++];markerInfo["pose"][9]=$a[i++];markerInfo["pose"][10]=$a[i++];markerInfo["pose"][11]=$a[i++]},66272:function(){var $a=arguments;var i=0;if(!artoolkitNFT["NFTMarkerInfo"]){artoolkitNFT["NFTMarkerInfo"]={id:0,error:-1,found:0,pose:[0,0,0,0,0,0,0,0,0,0,0,0]}}var markerInfo=artoolkitNFT["NFTMarkerInfo"];markerInfo["id"]=$a[i++];markerInfo["error"]=-1;markerInfo["found"]=0;markerInfo["pose"][0]=0;markerInfo["pose"][1]=0;markerInfo["pose"][2]=0;markerInfo["pose"][3]=0;markerInfo["pose"][4]=0;markerInfo["pose"][5]=0;markerInfo["pose"][6]=0;markerInfo["pose"][7]=0;markerInfo["pose"][8]=0;markerInfo["pose"][9]=0;markerInfo["pose"][10]=0;markerInfo["pose"][11]=0},66901:function($0,$1,$2,$3,$4,$5){if(!artoolkitNFT["frameMalloc"]){artoolkitNFT["frameMalloc"]={}}var frameMalloc=artoolkitNFT["frameMalloc"];frameMalloc["framepointer"]=$1;frameMalloc["framesize"]=$2;frameMalloc["camera"]=$3;frameMalloc["transform"]=$4;frameMalloc["videoLumaPointer"]=$5}};function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback=="function"){callback(Module);continue}var func=callback.func;if(typeof func=="number"){if(callback.arg===undefined){getWasmTableEntry(func)()}else{getWasmTableEntry(func)(callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}function getWasmTableEntry(funcPtr){return wasmTable.get(funcPtr)}function ___cxa_allocate_exception(size){return _malloc(size+16)+16}function ExceptionInfo(excPtr){this.excPtr=excPtr;this.ptr=excPtr-16;this.set_type=function(type){HEAP32[this.ptr+4>>2]=type};this.get_type=function(){return HEAP32[this.ptr+4>>2]};this.set_destructor=function(destructor){HEAP32[this.ptr+8>>2]=destructor};this.get_destructor=function(){return HEAP32[this.ptr+8>>2]};this.set_refcount=function(refcount){HEAP32[this.ptr>>2]=refcount};this.set_caught=function(caught){caught=caught?1:0;HEAP8[this.ptr+12>>0]=caught};this.get_caught=function(){return HEAP8[this.ptr+12>>0]!=0};this.set_rethrown=function(rethrown){rethrown=rethrown?1:0;HEAP8[this.ptr+13>>0]=rethrown};this.get_rethrown=function(){return HEAP8[this.ptr+13>>0]!=0};this.init=function(type,destructor){this.set_type(type);this.set_destructor(destructor);this.set_refcount(0);this.set_caught(false);this.set_rethrown(false)};this.add_ref=function(){var value=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=value+1};this.release_ref=function(){var prev=HEAP32[this.ptr>>2];HEAP32[this.ptr>>2]=prev-1;return prev===1}}var exceptionLast=0;var uncaughtExceptionCount=0;function ___cxa_throw(ptr,type,destructor){var info=new ExceptionInfo(ptr);info.init(type,destructor);exceptionLast=ptr;uncaughtExceptionCount++;throw ptr}function setErrNo(value){HEAP32[___errno_location()>>2]=value;return value}var PATH={splitPath:function(filename){var splitPathRe=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;return splitPathRe.exec(filename).slice(1)},normalizeArray:function(parts,allowAboveRoot){var up=0;for(var i=parts.length-1;i>=0;i--){var last=parts[i];if(last==="."){parts.splice(i,1)}else if(last===".."){parts.splice(i,1);up++}else if(up){parts.splice(i,1);up--}}if(allowAboveRoot){for(;up;up--){parts.unshift("..")}}return parts},normalize:function(path){var isAbsolute=path.charAt(0)==="/",trailingSlash=path.substr(-1)==="/";path=PATH.normalizeArray(path.split("/").filter(function(p){return!!p}),!isAbsolute).join("/");if(!path&&!isAbsolute){path="."}if(path&&trailingSlash){path+="/"}return(isAbsolute?"/":"")+path},dirname:function(path){var result=PATH.splitPath(path),root=result[0],dir=result[1];if(!root&&!dir){return"."}if(dir){dir=dir.substr(0,dir.length-1)}return root+dir},basename:function(path){if(path==="/")return"/";path=PATH.normalize(path);path=path.replace(/\/$/,"");var lastSlash=path.lastIndexOf("/");if(lastSlash===-1)return path;return path.substr(lastSlash+1)},extname:function(path){return PATH.splitPath(path)[3]},join:function(){var paths=Array.prototype.slice.call(arguments,0);return PATH.normalize(paths.join("/"))},join2:function(l,r){return PATH.normalize(l+"/"+r)}};function getRandomDevice(){if(typeof crypto=="object"&&typeof crypto["getRandomValues"]=="function"){var randomBuffer=new Uint8Array(1);return function(){crypto.getRandomValues(randomBuffer);return randomBuffer[0]}}else if(ENVIRONMENT_IS_NODE){try{var crypto_module=__webpack_require__(/*! crypto */ "?deb7");return function(){return crypto_module["randomBytes"](1)[0]}}catch(e){}}return function(){abort("randomDevice")}}var PATH_FS={resolve:function(){var resolvedPath="",resolvedAbsolute=false;for(var i=arguments.length-1;i>=-1&&!resolvedAbsolute;i--){var path=i>=0?arguments[i]:FS.cwd();if(typeof path!="string"){throw new TypeError("Arguments to path.resolve must be strings")}else if(!path){return""}resolvedPath=path+"/"+resolvedPath;resolvedAbsolute=path.charAt(0)==="/"}resolvedPath=PATH.normalizeArray(resolvedPath.split("/").filter(function(p){return!!p}),!resolvedAbsolute).join("/");return(resolvedAbsolute?"/":"")+resolvedPath||"."},relative:function(from,to){from=PATH_FS.resolve(from).substr(1);to=PATH_FS.resolve(to).substr(1);function trim(arr){var start=0;for(;start<arr.length;start++){if(arr[start]!=="")break}var end=arr.length-1;for(;end>=0;end--){if(arr[end]!=="")break}if(start>end)return[];return arr.slice(start,end-start+1)}var fromParts=trim(from.split("/"));var toParts=trim(to.split("/"));var length=Math.min(fromParts.length,toParts.length);var samePartsLength=length;for(var i=0;i<length;i++){if(fromParts[i]!==toParts[i]){samePartsLength=i;break}}var outputParts=[];for(var i=samePartsLength;i<fromParts.length;i++){outputParts.push("..")}outputParts=outputParts.concat(toParts.slice(samePartsLength));return outputParts.join("/")}};var TTY={ttys:[],init:function(){},shutdown:function(){},register:function(dev,ops){TTY.ttys[dev]={input:[],output:[],ops:ops};FS.registerDevice(dev,TTY.stream_ops)},stream_ops:{open:function(stream){var tty=TTY.ttys[stream.node.rdev];if(!tty){throw new FS.ErrnoError(43)}stream.tty=tty;stream.seekable=false},close:function(stream){stream.tty.ops.flush(stream.tty)},flush:function(stream){stream.tty.ops.flush(stream.tty)},read:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.get_char){throw new FS.ErrnoError(60)}var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=stream.tty.ops.get_char(stream.tty)}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:function(stream,buffer,offset,length,pos){if(!stream.tty||!stream.tty.ops.put_char){throw new FS.ErrnoError(60)}try{for(var i=0;i<length;i++){stream.tty.ops.put_char(stream.tty,buffer[offset+i])}}catch(e){throw new FS.ErrnoError(29)}if(length){stream.node.timestamp=Date.now()}return i}},default_tty_ops:{get_char:function(tty){if(!tty.input.length){var result=null;if(ENVIRONMENT_IS_NODE){var BUFSIZE=256;var buf=Buffer.alloc(BUFSIZE);var bytesRead=0;try{bytesRead=fs.readSync(process.stdin.fd,buf,0,BUFSIZE,-1)}catch(e){if(e.toString().includes("EOF"))bytesRead=0;else throw e}if(bytesRead>0){result=buf.slice(0,bytesRead).toString("utf-8")}else{result=null}}else if(typeof window!="undefined"&&typeof window.prompt=="function"){result=window.prompt("Input: ");if(result!==null){result+="\n"}}else if(typeof readline=="function"){result=readline();if(result!==null){result+="\n"}}if(!result){return null}tty.input=intArrayFromString(result,true)}return tty.input.shift()},put_char:function(tty,val){if(val===null||val===10){out(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){out(UTF8ArrayToString(tty.output,0));tty.output=[]}}},default_tty1_ops:{put_char:function(tty,val){if(val===null||val===10){err(UTF8ArrayToString(tty.output,0));tty.output=[]}else{if(val!=0)tty.output.push(val)}},flush:function(tty){if(tty.output&&tty.output.length>0){err(UTF8ArrayToString(tty.output,0));tty.output=[]}}}};function mmapAlloc(size){abort()}var MEMFS={ops_table:null,mount:function(mount){return MEMFS.createNode(null,"/",16384|511,0)},createNode:function(parent,name,mode,dev){if(FS.isBlkdev(mode)||FS.isFIFO(mode)){throw new FS.ErrnoError(63)}if(!MEMFS.ops_table){MEMFS.ops_table={dir:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,lookup:MEMFS.node_ops.lookup,mknod:MEMFS.node_ops.mknod,rename:MEMFS.node_ops.rename,unlink:MEMFS.node_ops.unlink,rmdir:MEMFS.node_ops.rmdir,readdir:MEMFS.node_ops.readdir,symlink:MEMFS.node_ops.symlink},stream:{llseek:MEMFS.stream_ops.llseek}},file:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:{llseek:MEMFS.stream_ops.llseek,read:MEMFS.stream_ops.read,write:MEMFS.stream_ops.write,allocate:MEMFS.stream_ops.allocate,mmap:MEMFS.stream_ops.mmap,msync:MEMFS.stream_ops.msync}},link:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr,readlink:MEMFS.node_ops.readlink},stream:{}},chrdev:{node:{getattr:MEMFS.node_ops.getattr,setattr:MEMFS.node_ops.setattr},stream:FS.chrdev_stream_ops}}}var node=FS.createNode(parent,name,mode,dev);if(FS.isDir(node.mode)){node.node_ops=MEMFS.ops_table.dir.node;node.stream_ops=MEMFS.ops_table.dir.stream;node.contents={}}else if(FS.isFile(node.mode)){node.node_ops=MEMFS.ops_table.file.node;node.stream_ops=MEMFS.ops_table.file.stream;node.usedBytes=0;node.contents=null}else if(FS.isLink(node.mode)){node.node_ops=MEMFS.ops_table.link.node;node.stream_ops=MEMFS.ops_table.link.stream}else if(FS.isChrdev(node.mode)){node.node_ops=MEMFS.ops_table.chrdev.node;node.stream_ops=MEMFS.ops_table.chrdev.stream}node.timestamp=Date.now();if(parent){parent.contents[name]=node;parent.timestamp=node.timestamp}return node},getFileDataAsTypedArray:function(node){if(!node.contents)return new Uint8Array(0);if(node.contents.subarray)return node.contents.subarray(0,node.usedBytes);return new Uint8Array(node.contents)},expandFileStorage:function(node,newCapacity){var prevCapacity=node.contents?node.contents.length:0;if(prevCapacity>=newCapacity)return;var CAPACITY_DOUBLING_MAX=1024*1024;newCapacity=Math.max(newCapacity,prevCapacity*(prevCapacity<CAPACITY_DOUBLING_MAX?2:1.125)>>>0);if(prevCapacity!=0)newCapacity=Math.max(newCapacity,256);var oldContents=node.contents;node.contents=new Uint8Array(newCapacity);if(node.usedBytes>0)node.contents.set(oldContents.subarray(0,node.usedBytes),0)},resizeFileStorage:function(node,newSize){if(node.usedBytes==newSize)return;if(newSize==0){node.contents=null;node.usedBytes=0}else{var oldContents=node.contents;node.contents=new Uint8Array(newSize);if(oldContents){node.contents.set(oldContents.subarray(0,Math.min(newSize,node.usedBytes)))}node.usedBytes=newSize}},node_ops:{getattr:function(node){var attr={};attr.dev=FS.isChrdev(node.mode)?node.id:1;attr.ino=node.id;attr.mode=node.mode;attr.nlink=1;attr.uid=0;attr.gid=0;attr.rdev=node.rdev;if(FS.isDir(node.mode)){attr.size=4096}else if(FS.isFile(node.mode)){attr.size=node.usedBytes}else if(FS.isLink(node.mode)){attr.size=node.link.length}else{attr.size=0}attr.atime=new Date(node.timestamp);attr.mtime=new Date(node.timestamp);attr.ctime=new Date(node.timestamp);attr.blksize=4096;attr.blocks=Math.ceil(attr.size/attr.blksize);return attr},setattr:function(node,attr){if(attr.mode!==undefined){node.mode=attr.mode}if(attr.timestamp!==undefined){node.timestamp=attr.timestamp}if(attr.size!==undefined){MEMFS.resizeFileStorage(node,attr.size)}},lookup:function(parent,name){throw FS.genericErrors[44]},mknod:function(parent,name,mode,dev){return MEMFS.createNode(parent,name,mode,dev)},rename:function(old_node,new_dir,new_name){if(FS.isDir(old_node.mode)){var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(new_node){for(var i in new_node.contents){throw new FS.ErrnoError(55)}}}delete old_node.parent.contents[old_node.name];old_node.parent.timestamp=Date.now();old_node.name=new_name;new_dir.contents[new_name]=old_node;new_dir.timestamp=old_node.parent.timestamp;old_node.parent=new_dir},unlink:function(parent,name){delete parent.contents[name];parent.timestamp=Date.now()},rmdir:function(parent,name){var node=FS.lookupNode(parent,name);for(var i in node.contents){throw new FS.ErrnoError(55)}delete parent.contents[name];parent.timestamp=Date.now()},readdir:function(node){var entries=[".",".."];for(var key in node.contents){if(!node.contents.hasOwnProperty(key)){continue}entries.push(key)}return entries},symlink:function(parent,newname,oldpath){var node=MEMFS.createNode(parent,newname,511|40960,0);node.link=oldpath;return node},readlink:function(node){if(!FS.isLink(node.mode)){throw new FS.ErrnoError(28)}return node.link}},stream_ops:{read:function(stream,buffer,offset,length,position){var contents=stream.node.contents;if(position>=stream.node.usedBytes)return 0;var size=Math.min(stream.node.usedBytes-position,length);if(size>8&&contents.subarray){buffer.set(contents.subarray(position,position+size),offset)}else{for(var i=0;i<size;i++)buffer[offset+i]=contents[position+i]}return size},write:function(stream,buffer,offset,length,position,canOwn){if(buffer.buffer===HEAP8.buffer){canOwn=false}if(!length)return 0;var node=stream.node;node.timestamp=Date.now();if(buffer.subarray&&(!node.contents||node.contents.subarray)){if(canOwn){node.contents=buffer.subarray(offset,offset+length);node.usedBytes=length;return length}else if(node.usedBytes===0&&position===0){node.contents=buffer.slice(offset,offset+length);node.usedBytes=length;return length}else if(position+length<=node.usedBytes){node.contents.set(buffer.subarray(offset,offset+length),position);return length}}MEMFS.expandFileStorage(node,position+length);if(node.contents.subarray&&buffer.subarray){node.contents.set(buffer.subarray(offset,offset+length),position)}else{for(var i=0;i<length;i++){node.contents[position+i]=buffer[offset+i]}}node.usedBytes=Math.max(node.usedBytes,position+length);return length},llseek:function(stream,offset,whence){var position=offset;if(whence===1){position+=stream.position}else if(whence===2){if(FS.isFile(stream.node.mode)){position+=stream.node.usedBytes}}if(position<0){throw new FS.ErrnoError(28)}return position},allocate:function(stream,offset,length){MEMFS.expandFileStorage(stream.node,offset+length);stream.node.usedBytes=Math.max(stream.node.usedBytes,offset+length)},mmap:function(stream,address,length,position,prot,flags){if(address!==0){throw new FS.ErrnoError(28)}if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}var ptr;var allocated;var contents=stream.node.contents;if(!(flags&2)&&contents.buffer===buffer){allocated=false;ptr=contents.byteOffset}else{if(position>0||position+length<contents.length){if(contents.subarray){contents=contents.subarray(position,position+length)}else{contents=Array.prototype.slice.call(contents,position,position+length)}}allocated=true;ptr=mmapAlloc(length);if(!ptr){throw new FS.ErrnoError(48)}HEAP8.set(contents,ptr)}return{ptr:ptr,allocated:allocated}},msync:function(stream,buffer,offset,length,mmapFlags){if(!FS.isFile(stream.node.mode)){throw new FS.ErrnoError(43)}if(mmapFlags&2){return 0}var bytesWritten=MEMFS.stream_ops.write(stream,buffer,0,length,offset,false);return 0}}};function asyncLoad(url,onload,onerror,noRunDep){var dep=!noRunDep?getUniqueRunDependency("al "+url):"";readAsync(url,function(arrayBuffer){assert(arrayBuffer,'Loading data file "'+url+'" failed (no arrayBuffer).');onload(new Uint8Array(arrayBuffer));if(dep)removeRunDependency(dep)},function(event){if(onerror){onerror()}else{throw'Loading data file "'+url+'" failed.'}});if(dep)addRunDependency(dep)}var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:(path,opts={})=>{path=PATH_FS.resolve(FS.cwd(),path);if(!path)return{path:"",node:null};var defaults={follow_mount:true,recurse_count:0};opts=Object.assign(defaults,opts);if(opts.recurse_count>8){throw new FS.ErrnoError(32)}var parts=PATH.normalizeArray(path.split("/").filter(p=>!!p),false);var current=FS.root;var current_path="/";for(var i=0;i<parts.length;i++){var islast=i===parts.length-1;if(islast&&opts.parent){break}current=FS.lookupNode(current,parts[i]);current_path=PATH.join2(current_path,parts[i]);if(FS.isMountpoint(current)){if(!islast||islast&&opts.follow_mount){current=current.mounted.root}}if(!islast||opts.follow){var count=0;while(FS.isLink(current.mode)){var link=FS.readlink(current_path);current_path=PATH_FS.resolve(PATH.dirname(current_path),link);var lookup=FS.lookupPath(current_path,{recurse_count:opts.recurse_count+1});current=lookup.node;if(count++>40){throw new FS.ErrnoError(32)}}}}return{path:current_path,node:current}},getPath:node=>{var path;while(true){if(FS.isRoot(node)){var mount=node.mount.mountpoint;if(!path)return mount;return mount[mount.length-1]!=="/"?mount+"/"+path:mount+path}path=path?node.name+"/"+path:node.name;node=node.parent}},hashName:(parentid,name)=>{var hash=0;for(var i=0;i<name.length;i++){hash=(hash<<5)-hash+name.charCodeAt(i)|0}return(parentid+hash>>>0)%FS.nameTable.length},hashAddNode:node=>{var hash=FS.hashName(node.parent.id,node.name);node.name_next=FS.nameTable[hash];FS.nameTable[hash]=node},hashRemoveNode:node=>{var hash=FS.hashName(node.parent.id,node.name);if(FS.nameTable[hash]===node){FS.nameTable[hash]=node.name_next}else{var current=FS.nameTable[hash];while(current){if(current.name_next===node){current.name_next=node.name_next;break}current=current.name_next}}},lookupNode:(parent,name)=>{var errCode=FS.mayLookup(parent);if(errCode){throw new FS.ErrnoError(errCode,parent)}var hash=FS.hashName(parent.id,name);for(var node=FS.nameTable[hash];node;node=node.name_next){var nodeName=node.name;if(node.parent.id===parent.id&&nodeName===name){return node}}return FS.lookup(parent,name)},createNode:(parent,name,mode,rdev)=>{var node=new FS.FSNode(parent,name,mode,rdev);FS.hashAddNode(node);return node},destroyNode:node=>{FS.hashRemoveNode(node)},isRoot:node=>{return node===node.parent},isMountpoint:node=>{return!!node.mounted},isFile:mode=>{return(mode&61440)===32768},isDir:mode=>{return(mode&61440)===16384},isLink:mode=>{return(mode&61440)===40960},isChrdev:mode=>{return(mode&61440)===8192},isBlkdev:mode=>{return(mode&61440)===24576},isFIFO:mode=>{return(mode&61440)===4096},isSocket:mode=>{return(mode&49152)===49152},flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:str=>{var flags=FS.flagModes[str];if(typeof flags=="undefined"){throw new Error("Unknown file open mode: "+str)}return flags},flagsToPermissionString:flag=>{var perms=["r","w","rw"][flag&3];if(flag&512){perms+="w"}return perms},nodePermissions:(node,perms)=>{if(FS.ignorePermissions){return 0}if(perms.includes("r")&&!(node.mode&292)){return 2}else if(perms.includes("w")&&!(node.mode&146)){return 2}else if(perms.includes("x")&&!(node.mode&73)){return 2}return 0},mayLookup:dir=>{var errCode=FS.nodePermissions(dir,"x");if(errCode)return errCode;if(!dir.node_ops.lookup)return 2;return 0},mayCreate:(dir,name)=>{try{var node=FS.lookupNode(dir,name);return 20}catch(e){}return FS.nodePermissions(dir,"wx")},mayDelete:(dir,name,isdir)=>{var node;try{node=FS.lookupNode(dir,name)}catch(e){return e.errno}var errCode=FS.nodePermissions(dir,"wx");if(errCode){return errCode}if(isdir){if(!FS.isDir(node.mode)){return 54}if(FS.isRoot(node)||FS.getPath(node)===FS.cwd()){return 10}}else{if(FS.isDir(node.mode)){return 31}}return 0},mayOpen:(node,flags)=>{if(!node){return 44}if(FS.isLink(node.mode)){return 32}else if(FS.isDir(node.mode)){if(FS.flagsToPermissionString(flags)!=="r"||flags&512){return 31}}return FS.nodePermissions(node,FS.flagsToPermissionString(flags))},MAX_OPEN_FDS:4096,nextfd:(fd_start=0,fd_end=FS.MAX_OPEN_FDS)=>{for(var fd=fd_start;fd<=fd_end;fd++){if(!FS.streams[fd]){return fd}}throw new FS.ErrnoError(33)},getStream:fd=>FS.streams[fd],createStream:(stream,fd_start,fd_end)=>{if(!FS.FSStream){FS.FSStream=function(){};FS.FSStream.prototype={object:{get:function(){return this.node},set:function(val){this.node=val}},isRead:{get:function(){return(this.flags&2097155)!==1}},isWrite:{get:function(){return(this.flags&2097155)!==0}},isAppend:{get:function(){return this.flags&1024}}}}stream=Object.assign(new FS.FSStream,stream);var fd=FS.nextfd(fd_start,fd_end);stream.fd=fd;FS.streams[fd]=stream;return stream},closeStream:fd=>{FS.streams[fd]=null},chrdev_stream_ops:{open:stream=>{var device=FS.getDevice(stream.node.rdev);stream.stream_ops=device.stream_ops;if(stream.stream_ops.open){stream.stream_ops.open(stream)}},llseek:()=>{throw new FS.ErrnoError(70)}},major:dev=>dev>>8,minor:dev=>dev&255,makedev:(ma,mi)=>ma<<8|mi,registerDevice:(dev,ops)=>{FS.devices[dev]={stream_ops:ops}},getDevice:dev=>FS.devices[dev],getMounts:mount=>{var mounts=[];var check=[mount];while(check.length){var m=check.pop();mounts.push(m);check.push.apply(check,m.mounts)}return mounts},syncfs:(populate,callback)=>{if(typeof populate=="function"){callback=populate;populate=false}FS.syncFSRequests++;if(FS.syncFSRequests>1){err("warning: "+FS.syncFSRequests+" FS.syncfs operations in flight at once, probably just doing extra work")}var mounts=FS.getMounts(FS.root.mount);var completed=0;function doCallback(errCode){FS.syncFSRequests--;return callback(errCode)}function done(errCode){if(errCode){if(!done.errored){done.errored=true;return doCallback(errCode)}return}if(++completed>=mounts.length){doCallback(null)}}mounts.forEach(mount=>{if(!mount.type.syncfs){return done(null)}mount.type.syncfs(mount,populate,done)})},mount:(type,opts,mountpoint)=>{var root=mountpoint==="/";var pseudo=!mountpoint;var node;if(root&&FS.root){throw new FS.ErrnoError(10)}else if(!root&&!pseudo){var lookup=FS.lookupPath(mountpoint,{follow_mount:false});mountpoint=lookup.path;node=lookup.node;if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}if(!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}}var mount={type:type,opts:opts,mountpoint:mountpoint,mounts:[]};var mountRoot=type.mount(mount);mountRoot.mount=mount;mount.root=mountRoot;if(root){FS.root=mountRoot}else if(node){node.mounted=mount;if(node.mount){node.mount.mounts.push(mount)}}return mountRoot},unmount:mountpoint=>{var lookup=FS.lookupPath(mountpoint,{follow_mount:false});if(!FS.isMountpoint(lookup.node)){throw new FS.ErrnoError(28)}var node=lookup.node;var mount=node.mounted;var mounts=FS.getMounts(mount);Object.keys(FS.nameTable).forEach(hash=>{var current=FS.nameTable[hash];while(current){var next=current.name_next;if(mounts.includes(current.mount)){FS.destroyNode(current)}current=next}});node.mounted=null;var idx=node.mount.mounts.indexOf(mount);node.mount.mounts.splice(idx,1)},lookup:(parent,name)=>{return parent.node_ops.lookup(parent,name)},mknod:(path,mode,dev)=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);if(!name||name==="."||name===".."){throw new FS.ErrnoError(28)}var errCode=FS.mayCreate(parent,name);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.mknod){throw new FS.ErrnoError(63)}return parent.node_ops.mknod(parent,name,mode,dev)},create:(path,mode)=>{mode=mode!==undefined?mode:438;mode&=4095;mode|=32768;return FS.mknod(path,mode,0)},mkdir:(path,mode)=>{mode=mode!==undefined?mode:511;mode&=511|512;mode|=16384;return FS.mknod(path,mode,0)},mkdirTree:(path,mode)=>{var dirs=path.split("/");var d="";for(var i=0;i<dirs.length;++i){if(!dirs[i])continue;d+="/"+dirs[i];try{FS.mkdir(d,mode)}catch(e){if(e.errno!=20)throw e}}},mkdev:(path,mode,dev)=>{if(typeof dev=="undefined"){dev=mode;mode=438}mode|=8192;return FS.mknod(path,mode,dev)},symlink:(oldpath,newpath)=>{if(!PATH_FS.resolve(oldpath)){throw new FS.ErrnoError(44)}var lookup=FS.lookupPath(newpath,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var newname=PATH.basename(newpath);var errCode=FS.mayCreate(parent,newname);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.symlink){throw new FS.ErrnoError(63)}return parent.node_ops.symlink(parent,newname,oldpath)},rename:(old_path,new_path)=>{var old_dirname=PATH.dirname(old_path);var new_dirname=PATH.dirname(new_path);var old_name=PATH.basename(old_path);var new_name=PATH.basename(new_path);var lookup,old_dir,new_dir;lookup=FS.lookupPath(old_path,{parent:true});old_dir=lookup.node;lookup=FS.lookupPath(new_path,{parent:true});new_dir=lookup.node;if(!old_dir||!new_dir)throw new FS.ErrnoError(44);if(old_dir.mount!==new_dir.mount){throw new FS.ErrnoError(75)}var old_node=FS.lookupNode(old_dir,old_name);var relative=PATH_FS.relative(old_path,new_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(28)}relative=PATH_FS.relative(new_path,old_dirname);if(relative.charAt(0)!=="."){throw new FS.ErrnoError(55)}var new_node;try{new_node=FS.lookupNode(new_dir,new_name)}catch(e){}if(old_node===new_node){return}var isdir=FS.isDir(old_node.mode);var errCode=FS.mayDelete(old_dir,old_name,isdir);if(errCode){throw new FS.ErrnoError(errCode)}errCode=new_node?FS.mayDelete(new_dir,new_name,isdir):FS.mayCreate(new_dir,new_name);if(errCode){throw new FS.ErrnoError(errCode)}if(!old_dir.node_ops.rename){throw new FS.ErrnoError(63)}if(FS.isMountpoint(old_node)||new_node&&FS.isMountpoint(new_node)){throw new FS.ErrnoError(10)}if(new_dir!==old_dir){errCode=FS.nodePermissions(old_dir,"w");if(errCode){throw new FS.ErrnoError(errCode)}}FS.hashRemoveNode(old_node);try{old_dir.node_ops.rename(old_node,new_dir,new_name)}catch(e){throw e}finally{FS.hashAddNode(old_node)}},rmdir:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,true);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.rmdir){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.rmdir(parent,name);FS.destroyNode(node)},readdir:path=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node.node_ops.readdir){throw new FS.ErrnoError(54)}return node.node_ops.readdir(node)},unlink:path=>{var lookup=FS.lookupPath(path,{parent:true});var parent=lookup.node;if(!parent){throw new FS.ErrnoError(44)}var name=PATH.basename(path);var node=FS.lookupNode(parent,name);var errCode=FS.mayDelete(parent,name,false);if(errCode){throw new FS.ErrnoError(errCode)}if(!parent.node_ops.unlink){throw new FS.ErrnoError(63)}if(FS.isMountpoint(node)){throw new FS.ErrnoError(10)}parent.node_ops.unlink(parent,name);FS.destroyNode(node)},readlink:path=>{var lookup=FS.lookupPath(path);var link=lookup.node;if(!link){throw new FS.ErrnoError(44)}if(!link.node_ops.readlink){throw new FS.ErrnoError(28)}return PATH_FS.resolve(FS.getPath(link.parent),link.node_ops.readlink(link))},stat:(path,dontFollow)=>{var lookup=FS.lookupPath(path,{follow:!dontFollow});var node=lookup.node;if(!node){throw new FS.ErrnoError(44)}if(!node.node_ops.getattr){throw new FS.ErrnoError(63)}return node.node_ops.getattr(node)},lstat:path=>{return FS.stat(path,true)},chmod:(path,mode,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{mode:mode&4095|node.mode&~4095,timestamp:Date.now()})},lchmod:(path,mode)=>{FS.chmod(path,mode,true)},fchmod:(fd,mode)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chmod(stream.node,mode)},chown:(path,uid,gid,dontFollow)=>{var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:!dontFollow});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}node.node_ops.setattr(node,{timestamp:Date.now()})},lchown:(path,uid,gid)=>{FS.chown(path,uid,gid,true)},fchown:(fd,uid,gid)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}FS.chown(stream.node,uid,gid)},truncate:(path,len)=>{if(len<0){throw new FS.ErrnoError(28)}var node;if(typeof path=="string"){var lookup=FS.lookupPath(path,{follow:true});node=lookup.node}else{node=path}if(!node.node_ops.setattr){throw new FS.ErrnoError(63)}if(FS.isDir(node.mode)){throw new FS.ErrnoError(31)}if(!FS.isFile(node.mode)){throw new FS.ErrnoError(28)}var errCode=FS.nodePermissions(node,"w");if(errCode){throw new FS.ErrnoError(errCode)}node.node_ops.setattr(node,{size:len,timestamp:Date.now()})},ftruncate:(fd,len)=>{var stream=FS.getStream(fd);if(!stream){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(28)}FS.truncate(stream.node,len)},utime:(path,atime,mtime)=>{var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;node.node_ops.setattr(node,{timestamp:Math.max(atime,mtime)})},open:(path,flags,mode,fd_start,fd_end)=>{if(path===""){throw new FS.ErrnoError(44)}flags=typeof flags=="string"?FS.modeStringToFlags(flags):flags;mode=typeof mode=="undefined"?438:mode;if(flags&64){mode=mode&4095|32768}else{mode=0}var node;if(typeof path=="object"){node=path}else{path=PATH.normalize(path);try{var lookup=FS.lookupPath(path,{follow:!(flags&131072)});node=lookup.node}catch(e){}}var created=false;if(flags&64){if(node){if(flags&128){throw new FS.ErrnoError(20)}}else{node=FS.mknod(path,mode,0);created=true}}if(!node){throw new FS.ErrnoError(44)}if(FS.isChrdev(node.mode)){flags&=~512}if(flags&65536&&!FS.isDir(node.mode)){throw new FS.ErrnoError(54)}if(!created){var errCode=FS.mayOpen(node,flags);if(errCode){throw new FS.ErrnoError(errCode)}}if(flags&512){FS.truncate(node,0)}flags&=~(128|512|131072);var stream=FS.createStream({node:node,path:FS.getPath(node),flags:flags,seekable:true,position:0,stream_ops:node.stream_ops,ungotten:[],error:false},fd_start,fd_end);if(stream.stream_ops.open){stream.stream_ops.open(stream)}if(Module["logReadFiles"]&&!(flags&1)){if(!FS.readFiles)FS.readFiles={};if(!(path in FS.readFiles)){FS.readFiles[path]=1}}return stream},close:stream=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(stream.getdents)stream.getdents=null;try{if(stream.stream_ops.close){stream.stream_ops.close(stream)}}catch(e){throw e}finally{FS.closeStream(stream.fd)}stream.fd=null},isClosed:stream=>{return stream.fd===null},llseek:(stream,offset,whence)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(!stream.seekable||!stream.stream_ops.llseek){throw new FS.ErrnoError(70)}if(whence!=0&&whence!=1&&whence!=2){throw new FS.ErrnoError(28)}stream.position=stream.stream_ops.llseek(stream,offset,whence);stream.ungotten=[];return stream.position},read:(stream,buffer,offset,length,position)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.read){throw new FS.ErrnoError(28)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesRead=stream.stream_ops.read(stream,buffer,offset,length,position);if(!seeking)stream.position+=bytesRead;return bytesRead},write:(stream,buffer,offset,length,position,canOwn)=>{if(length<0||position<0){throw new FS.ErrnoError(28)}if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(FS.isDir(stream.node.mode)){throw new FS.ErrnoError(31)}if(!stream.stream_ops.write){throw new FS.ErrnoError(28)}if(stream.seekable&&stream.flags&1024){FS.llseek(stream,0,2)}var seeking=typeof position!="undefined";if(!seeking){position=stream.position}else if(!stream.seekable){throw new FS.ErrnoError(70)}var bytesWritten=stream.stream_ops.write(stream,buffer,offset,length,position,canOwn);if(!seeking)stream.position+=bytesWritten;return bytesWritten},allocate:(stream,offset,length)=>{if(FS.isClosed(stream)){throw new FS.ErrnoError(8)}if(offset<0||length<=0){throw new FS.ErrnoError(28)}if((stream.flags&2097155)===0){throw new FS.ErrnoError(8)}if(!FS.isFile(stream.node.mode)&&!FS.isDir(stream.node.mode)){throw new FS.ErrnoError(43)}if(!stream.stream_ops.allocate){throw new FS.ErrnoError(138)}stream.stream_ops.allocate(stream,offset,length)},mmap:(stream,address,length,position,prot,flags)=>{if((prot&2)!==0&&(flags&2)===0&&(stream.flags&2097155)!==2){throw new FS.ErrnoError(2)}if((stream.flags&2097155)===1){throw new FS.ErrnoError(2)}if(!stream.stream_ops.mmap){throw new FS.ErrnoError(43)}return stream.stream_ops.mmap(stream,address,length,position,prot,flags)},msync:(stream,buffer,offset,length,mmapFlags)=>{if(!stream||!stream.stream_ops.msync){return 0}return stream.stream_ops.msync(stream,buffer,offset,length,mmapFlags)},munmap:stream=>0,ioctl:(stream,cmd,arg)=>{if(!stream.stream_ops.ioctl){throw new FS.ErrnoError(59)}return stream.stream_ops.ioctl(stream,cmd,arg)},readFile:(path,opts={})=>{opts.flags=opts.flags||0;opts.encoding=opts.encoding||"binary";if(opts.encoding!=="utf8"&&opts.encoding!=="binary"){throw new Error('Invalid encoding type "'+opts.encoding+'"')}var ret;var stream=FS.open(path,opts.flags);var stat=FS.stat(path);var length=stat.size;var buf=new Uint8Array(length);FS.read(stream,buf,0,length,0);if(opts.encoding==="utf8"){ret=UTF8ArrayToString(buf,0)}else if(opts.encoding==="binary"){ret=buf}FS.close(stream);return ret},writeFile:(path,data,opts={})=>{opts.flags=opts.flags||577;var stream=FS.open(path,opts.flags,opts.mode);if(typeof data=="string"){var buf=new Uint8Array(lengthBytesUTF8(data)+1);var actualNumBytes=stringToUTF8Array(data,buf,0,buf.length);FS.write(stream,buf,0,actualNumBytes,undefined,opts.canOwn)}else if(ArrayBuffer.isView(data)){FS.write(stream,data,0,data.byteLength,undefined,opts.canOwn)}else{throw new Error("Unsupported data type")}FS.close(stream)},cwd:()=>FS.currentPath,chdir:path=>{var lookup=FS.lookupPath(path,{follow:true});if(lookup.node===null){throw new FS.ErrnoError(44)}if(!FS.isDir(lookup.node.mode)){throw new FS.ErrnoError(54)}var errCode=FS.nodePermissions(lookup.node,"x");if(errCode){throw new FS.ErrnoError(errCode)}FS.currentPath=lookup.path},createDefaultDirectories:()=>{FS.mkdir("/tmp");FS.mkdir("/home");FS.mkdir("/home/web_user")},createDefaultDevices:()=>{FS.mkdir("/dev");FS.registerDevice(FS.makedev(1,3),{read:()=>0,write:(stream,buffer,offset,length,pos)=>length});FS.mkdev("/dev/null",FS.makedev(1,3));TTY.register(FS.makedev(5,0),TTY.default_tty_ops);TTY.register(FS.makedev(6,0),TTY.default_tty1_ops);FS.mkdev("/dev/tty",FS.makedev(5,0));FS.mkdev("/dev/tty1",FS.makedev(6,0));var random_device=getRandomDevice();FS.createDevice("/dev","random",random_device);FS.createDevice("/dev","urandom",random_device);FS.mkdir("/dev/shm");FS.mkdir("/dev/shm/tmp")},createSpecialDirectories:()=>{FS.mkdir("/proc");var proc_self=FS.mkdir("/proc/self");FS.mkdir("/proc/self/fd");FS.mount({mount:()=>{var node=FS.createNode(proc_self,"fd",16384|511,73);node.node_ops={lookup:(parent,name)=>{var fd=+name;var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);var ret={parent:null,mount:{mountpoint:"fake"},node_ops:{readlink:()=>stream.path}};ret.parent=ret;return ret}};return node}},{},"/proc/self/fd")},createStandardStreams:()=>{if(Module["stdin"]){FS.createDevice("/dev","stdin",Module["stdin"])}else{FS.symlink("/dev/tty","/dev/stdin")}if(Module["stdout"]){FS.createDevice("/dev","stdout",null,Module["stdout"])}else{FS.symlink("/dev/tty","/dev/stdout")}if(Module["stderr"]){FS.createDevice("/dev","stderr",null,Module["stderr"])}else{FS.symlink("/dev/tty1","/dev/stderr")}var stdin=FS.open("/dev/stdin",0);var stdout=FS.open("/dev/stdout",1);var stderr=FS.open("/dev/stderr",1)},ensureErrnoError:()=>{if(FS.ErrnoError)return;FS.ErrnoError=function ErrnoError(errno,node){this.node=node;this.setErrno=function(errno){this.errno=errno};this.setErrno(errno);this.message="FS error"};FS.ErrnoError.prototype=new Error;FS.ErrnoError.prototype.constructor=FS.ErrnoError;[44].forEach(code=>{FS.genericErrors[code]=new FS.ErrnoError(code);FS.genericErrors[code].stack="<generic error, no stack>"})},staticInit:()=>{FS.ensureErrnoError();FS.nameTable=new Array(4096);FS.mount(MEMFS,{},"/");FS.createDefaultDirectories();FS.createDefaultDevices();FS.createSpecialDirectories();FS.filesystems={"MEMFS":MEMFS}},init:(input,output,error)=>{FS.init.initialized=true;FS.ensureErrnoError();Module["stdin"]=input||Module["stdin"];Module["stdout"]=output||Module["stdout"];Module["stderr"]=error||Module["stderr"];FS.createStandardStreams()},quit:()=>{FS.init.initialized=false;for(var i=0;i<FS.streams.length;i++){var stream=FS.streams[i];if(!stream){continue}FS.close(stream)}},getMode:(canRead,canWrite)=>{var mode=0;if(canRead)mode|=292|73;if(canWrite)mode|=146;return mode},findObject:(path,dontResolveLastLink)=>{var ret=FS.analyzePath(path,dontResolveLastLink);if(ret.exists){return ret.object}else{return null}},analyzePath:(path,dontResolveLastLink)=>{try{var lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});path=lookup.path}catch(e){}var ret={isRoot:false,exists:false,error:0,name:null,path:null,object:null,parentExists:false,parentPath:null,parentObject:null};try{var lookup=FS.lookupPath(path,{parent:true});ret.parentExists=true;ret.parentPath=lookup.path;ret.parentObject=lookup.node;ret.name=PATH.basename(path);lookup=FS.lookupPath(path,{follow:!dontResolveLastLink});ret.exists=true;ret.path=lookup.path;ret.object=lookup.node;ret.name=lookup.node.name;ret.isRoot=lookup.path==="/"}catch(e){ret.error=e.errno}return ret},createPath:(parent,path,canRead,canWrite)=>{parent=typeof parent=="string"?parent:FS.getPath(parent);var parts=path.split("/").reverse();while(parts.length){var part=parts.pop();if(!part)continue;var current=PATH.join2(parent,part);try{FS.mkdir(current)}catch(e){}parent=current}return current},createFile:(parent,name,properties,canRead,canWrite)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(canRead,canWrite);return FS.create(path,mode)},createDataFile:(parent,name,data,canRead,canWrite,canOwn)=>{var path=name;if(parent){parent=typeof parent=="string"?parent:FS.getPath(parent);path=name?PATH.join2(parent,name):parent}var mode=FS.getMode(canRead,canWrite);var node=FS.create(path,mode);if(data){if(typeof data=="string"){var arr=new Array(data.length);for(var i=0,len=data.length;i<len;++i)arr[i]=data.charCodeAt(i);data=arr}FS.chmod(node,mode|146);var stream=FS.open(node,577);FS.write(stream,data,0,data.length,0,canOwn);FS.close(stream);FS.chmod(node,mode)}return node},createDevice:(parent,name,input,output)=>{var path=PATH.join2(typeof parent=="string"?parent:FS.getPath(parent),name);var mode=FS.getMode(!!input,!!output);if(!FS.createDevice.major)FS.createDevice.major=64;var dev=FS.makedev(FS.createDevice.major++,0);FS.registerDevice(dev,{open:stream=>{stream.seekable=false},close:stream=>{if(output&&output.buffer&&output.buffer.length){output(10)}},read:(stream,buffer,offset,length,pos)=>{var bytesRead=0;for(var i=0;i<length;i++){var result;try{result=input()}catch(e){throw new FS.ErrnoError(29)}if(result===undefined&&bytesRead===0){throw new FS.ErrnoError(6)}if(result===null||result===undefined)break;bytesRead++;buffer[offset+i]=result}if(bytesRead){stream.node.timestamp=Date.now()}return bytesRead},write:(stream,buffer,offset,length,pos)=>{for(var i=0;i<length;i++){try{output(buffer[offset+i])}catch(e){throw new FS.ErrnoError(29)}}if(length){stream.node.timestamp=Date.now()}return i}});return FS.mkdev(path,mode,dev)},forceLoadFile:obj=>{if(obj.isDevice||obj.isFolder||obj.link||obj.contents)return true;if(typeof XMLHttpRequest!="undefined"){throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.")}else if(read_){try{obj.contents=intArrayFromString(read_(obj.url),true);obj.usedBytes=obj.contents.length}catch(e){throw new FS.ErrnoError(29)}}else{throw new Error("Cannot load without read() or XMLHttpRequest.")}},createLazyFile:(parent,name,url,canRead,canWrite)=>{function LazyUint8Array(){this.lengthKnown=false;this.chunks=[]}LazyUint8Array.prototype.get=function LazyUint8Array_get(idx){if(idx>this.length-1||idx<0){return undefined}var chunkOffset=idx%this.chunkSize;var chunkNum=idx/this.chunkSize|0;return this.getter(chunkNum)[chunkOffset]};LazyUint8Array.prototype.setDataGetter=function LazyUint8Array_setDataGetter(getter){this.getter=getter};LazyUint8Array.prototype.cacheLength=function LazyUint8Array_cacheLength(){var xhr=new XMLHttpRequest;xhr.open("HEAD",url,false);xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);var datalength=Number(xhr.getResponseHeader("Content-length"));var header;var hasByteServing=(header=xhr.getResponseHeader("Accept-Ranges"))&&header==="bytes";var usesGzip=(header=xhr.getResponseHeader("Content-Encoding"))&&header==="gzip";var chunkSize=1024*1024;if(!hasByteServing)chunkSize=datalength;var doXHR=(from,to)=>{if(from>to)throw new Error("invalid range ("+from+", "+to+") or no bytes requested!");if(to>datalength-1)throw new Error("only "+datalength+" bytes available! programmer error!");var xhr=new XMLHttpRequest;xhr.open("GET",url,false);if(datalength!==chunkSize)xhr.setRequestHeader("Range","bytes="+from+"-"+to);xhr.responseType="arraybuffer";if(xhr.overrideMimeType){xhr.overrideMimeType("text/plain; charset=x-user-defined")}xhr.send(null);if(!(xhr.status>=200&&xhr.status<300||xhr.status===304))throw new Error("Couldn't load "+url+". Status: "+xhr.status);if(xhr.response!==undefined){return new Uint8Array(xhr.response||[])}else{return intArrayFromString(xhr.responseText||"",true)}};var lazyArray=this;lazyArray.setDataGetter(chunkNum=>{var start=chunkNum*chunkSize;var end=(chunkNum+1)*chunkSize-1;end=Math.min(end,datalength-1);if(typeof lazyArray.chunks[chunkNum]=="undefined"){lazyArray.chunks[chunkNum]=doXHR(start,end)}if(typeof lazyArray.chunks[chunkNum]=="undefined")throw new Error("doXHR failed!");return lazyArray.chunks[chunkNum]});if(usesGzip||!datalength){chunkSize=datalength=1;datalength=this.getter(0).length;chunkSize=datalength;out("LazyFiles on gzip forces download of the whole file when length is accessed")}this._length=datalength;this._chunkSize=chunkSize;this.lengthKnown=true};if(typeof XMLHttpRequest!="undefined"){if(!ENVIRONMENT_IS_WORKER)throw"Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";var lazyArray=new LazyUint8Array;Object.defineProperties(lazyArray,{length:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._length}},chunkSize:{get:function(){if(!this.lengthKnown){this.cacheLength()}return this._chunkSize}}});var properties={isDevice:false,contents:lazyArray}}else{var properties={isDevice:false,url:url}}var node=FS.createFile(parent,name,properties,canRead,canWrite);if(properties.contents){node.contents=properties.contents}else if(properties.url){node.contents=null;node.url=properties.url}Object.defineProperties(node,{usedBytes:{get:function(){return this.contents.length}}});var stream_ops={};var keys=Object.keys(node.stream_ops);keys.forEach(key=>{var fn=node.stream_ops[key];stream_ops[key]=function forceLoadLazyFile(){FS.forceLoadFile(node);return fn.apply(null,arguments)}});stream_ops.read=((stream,buffer,offset,length,position)=>{FS.forceLoadFile(node);var contents=stream.node.contents;if(position>=contents.length)return 0;var size=Math.min(contents.length-position,length);if(contents.slice){for(var i=0;i<size;i++){buffer[offset+i]=contents[position+i]}}else{for(var i=0;i<size;i++){buffer[offset+i]=contents.get(position+i)}}return size});node.stream_ops=stream_ops;return node},createPreloadedFile:(parent,name,url,canRead,canWrite,onload,onerror,dontCreateFile,canOwn,preFinish)=>{var fullname=name?PATH_FS.resolve(PATH.join2(parent,name)):parent;var dep=getUniqueRunDependency("cp "+fullname);function processData(byteArray){function finish(byteArray){if(preFinish)preFinish();if(!dontCreateFile){FS.createDataFile(parent,name,byteArray,canRead,canWrite,canOwn)}if(onload)onload();removeRunDependency(dep)}if(Browser.handledByPreloadPlugin(byteArray,fullname,finish,()=>{if(onerror)onerror();removeRunDependency(dep)})){return}finish(byteArray)}addRunDependency(dep);if(typeof url=="string"){asyncLoad(url,byteArray=>processData(byteArray),onerror)}else{processData(url)}},indexedDB:()=>{return window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB},DB_NAME:()=>{return"EM_FS_"+window.location.pathname},DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=(()=>{out("creating db");var db=openRequest.result;db.createObjectStore(FS.DB_STORE_NAME)});openRequest.onsuccess=(()=>{var db=openRequest.result;var transaction=db.transaction([FS.DB_STORE_NAME],"readwrite");var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var putRequest=files.put(FS.analyzePath(path).object.contents,path);putRequest.onsuccess=(()=>{ok++;if(ok+fail==total)finish()});putRequest.onerror=(()=>{fail++;if(ok+fail==total)finish()})});transaction.onerror=onerror});openRequest.onerror=onerror},loadFilesFromDB:(paths,onload,onerror)=>{onload=onload||(()=>{});onerror=onerror||(()=>{});var indexedDB=FS.indexedDB();try{var openRequest=indexedDB.open(FS.DB_NAME(),FS.DB_VERSION)}catch(e){return onerror(e)}openRequest.onupgradeneeded=onerror;openRequest.onsuccess=(()=>{var db=openRequest.result;try{var transaction=db.transaction([FS.DB_STORE_NAME],"readonly")}catch(e){onerror(e);return}var files=transaction.objectStore(FS.DB_STORE_NAME);var ok=0,fail=0,total=paths.length;function finish(){if(fail==0)onload();else onerror()}paths.forEach(path=>{var getRequest=files.get(path);getRequest.onsuccess=(()=>{if(FS.analyzePath(path).exists){FS.unlink(path)}FS.createDataFile(PATH.dirname(path),PATH.basename(path),getRequest.result,true,true,true);ok++;if(ok+fail==total)finish()});getRequest.onerror=(()=>{fail++;if(ok+fail==total)finish()})});transaction.onerror=onerror});openRequest.onerror=onerror}};var SYSCALLS={DEFAULT_POLLMASK:5,calculateAt:function(dirfd,path,allowEmpty){if(path[0]==="/"){return path}var dir;if(dirfd===-100){dir=FS.cwd()}else{var dirstream=FS.getStream(dirfd);if(!dirstream)throw new FS.ErrnoError(8);dir=dirstream.path}if(path.length==0){if(!allowEmpty){throw new FS.ErrnoError(44)}return dir}return PATH.join2(dir,path)},doStat:function(func,path,buf){try{var stat=func(path)}catch(e){if(e&&e.node&&PATH.normalize(path)!==PATH.normalize(FS.getPath(e.node))){return-54}throw e}HEAP32[buf>>2]=stat.dev;HEAP32[buf+4>>2]=0;HEAP32[buf+8>>2]=stat.ino;HEAP32[buf+12>>2]=stat.mode;HEAP32[buf+16>>2]=stat.nlink;HEAP32[buf+20>>2]=stat.uid;HEAP32[buf+24>>2]=stat.gid;HEAP32[buf+28>>2]=stat.rdev;HEAP32[buf+32>>2]=0;tempI64=[stat.size>>>0,(tempDouble=stat.size,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+40>>2]=tempI64[0],HEAP32[buf+44>>2]=tempI64[1];HEAP32[buf+48>>2]=4096;HEAP32[buf+52>>2]=stat.blocks;HEAP32[buf+56>>2]=stat.atime.getTime()/1e3|0;HEAP32[buf+60>>2]=0;HEAP32[buf+64>>2]=stat.mtime.getTime()/1e3|0;HEAP32[buf+68>>2]=0;HEAP32[buf+72>>2]=stat.ctime.getTime()/1e3|0;HEAP32[buf+76>>2]=0;tempI64=[stat.ino>>>0,(tempDouble=stat.ino,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[buf+80>>2]=tempI64[0],HEAP32[buf+84>>2]=tempI64[1];return 0},doMsync:function(addr,stream,len,flags,offset){var buffer=HEAPU8.slice(addr,addr+len);FS.msync(stream,buffer,offset,len,flags)},doMkdir:function(path,mode){path=PATH.normalize(path);if(path[path.length-1]==="/")path=path.substr(0,path.length-1);FS.mkdir(path,mode,0);return 0},doMknod:function(path,mode,dev){switch(mode&61440){case 32768:case 8192:case 24576:case 4096:case 49152:break;default:return-28}FS.mknod(path,mode,dev);return 0},doReadlink:function(path,buf,bufsize){if(bufsize<=0)return-28;var ret=FS.readlink(path);var len=Math.min(bufsize,lengthBytesUTF8(ret));var endChar=HEAP8[buf+len];stringToUTF8(ret,buf,bufsize+1);HEAP8[buf+len]=endChar;return len},doAccess:function(path,amode){if(amode&~7){return-28}var lookup=FS.lookupPath(path,{follow:true});var node=lookup.node;if(!node){return-44}var perms="";if(amode&4)perms+="r";if(amode&2)perms+="w";if(amode&1)perms+="x";if(perms&&FS.nodePermissions(node,perms)){return-2}return 0},doDup:function(path,flags,suggestFD){var suggest=FS.getStream(suggestFD);if(suggest)FS.close(suggest);return FS.open(path,flags,0,suggestFD,suggestFD).fd},doReadv:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.read(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr;if(curr<len)break}return ret},doWritev:function(stream,iov,iovcnt,offset){var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];var curr=FS.write(stream,HEAP8,ptr,len,offset);if(curr<0)return-1;ret+=curr}return ret},varargs:undefined,get:function(){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(ptr){var ret=UTF8ToString(ptr);return ret},getStreamFromFD:function(fd){var stream=FS.getStream(fd);if(!stream)throw new FS.ErrnoError(8);return stream},get64:function(low,high){return low}};function ___syscall_fcntl64(fd,cmd,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(cmd){case 0:{var arg=SYSCALLS.get();if(arg<0){return-28}var newStream;newStream=FS.open(stream.path,stream.flags,0,arg);return newStream.fd}case 1:case 2:return 0;case 3:return stream.flags;case 4:{var arg=SYSCALLS.get();stream.flags|=arg;return 0}case 5:{var arg=SYSCALLS.get();var offset=0;HEAP16[arg+offset>>1]=2;return 0}case 6:case 7:return 0;case 16:case 8:return-28;case 9:setErrNo(28);return-1;default:{return-28}}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_ioctl(fd,op,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(fd);switch(op){case 21509:case 21505:{if(!stream.tty)return-59;return 0}case 21510:case 21511:case 21512:case 21506:case 21507:case 21508:{if(!stream.tty)return-59;return 0}case 21519:{if(!stream.tty)return-59;var argp=SYSCALLS.get();HEAP32[argp>>2]=0;return 0}case 21520:{if(!stream.tty)return-59;return-28}case 21531:{var argp=SYSCALLS.get();return FS.ioctl(stream,op,argp)}case 21523:{if(!stream.tty)return-59;return 0}case 21524:{if(!stream.tty)return-59;return 0}default:abort("bad ioctl syscall "+op)}}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}function ___syscall_open(path,flags,varargs){SYSCALLS.varargs=varargs;try{var pathname=SYSCALLS.getStr(path);var mode=varargs?SYSCALLS.get():0;var stream=FS.open(pathname,flags,mode);return stream.fd}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return-e.errno}}var structRegistrations={};function runDestructors(destructors){while(destructors.length){var ptr=destructors.pop();var del=destructors.pop();del(ptr)}}function simpleReadValueFromPointer(pointer){return this["fromWireType"](HEAPU32[pointer>>2])}var awaitingDependencies={};var registeredTypes={};var typeDependencies={};var char_0=48;var char_9=57;function makeLegalFunctionName(name){if(undefined===name){return"_unknown"}name=name.replace(/[^a-zA-Z0-9_]/g,"$");var f=name.charCodeAt(0);if(f>=char_0&&f<=char_9){return"_"+name}else{return name}}function createNamedFunction(name,body){name=makeLegalFunctionName(name);return new Function("body","return function "+name+"() {\n"+'    "use strict";'+"    return body.apply(this, arguments);\n"+"};\n")(body)}function extendError(baseErrorType,errorName){var errorClass=createNamedFunction(errorName,function(message){this.name=errorName;this.message=message;var stack=new Error(message).stack;if(stack!==undefined){this.stack=this.toString()+"\n"+stack.replace(/^Error(:[^\n]*)?\n/,"")}});errorClass.prototype=Object.create(baseErrorType.prototype);errorClass.prototype.constructor=errorClass;errorClass.prototype.toString=function(){if(this.message===undefined){return this.name}else{return this.name+": "+this.message}};return errorClass}var InternalError=undefined;function throwInternalError(message){throw new InternalError(message)}function whenDependentTypesAreResolved(myTypes,dependentTypes,getTypeConverters){myTypes.forEach(function(type){typeDependencies[type]=dependentTypes});function onComplete(typeConverters){var myTypeConverters=getTypeConverters(typeConverters);if(myTypeConverters.length!==myTypes.length){throwInternalError("Mismatched type converter count")}for(var i=0;i<myTypes.length;++i){registerType(myTypes[i],myTypeConverters[i])}}var typeConverters=new Array(dependentTypes.length);var unregisteredTypes=[];var registered=0;dependentTypes.forEach(function(dt,i){if(registeredTypes.hasOwnProperty(dt)){typeConverters[i]=registeredTypes[dt]}else{unregisteredTypes.push(dt);if(!awaitingDependencies.hasOwnProperty(dt)){awaitingDependencies[dt]=[]}awaitingDependencies[dt].push(function(){typeConverters[i]=registeredTypes[dt];++registered;if(registered===unregisteredTypes.length){onComplete(typeConverters)}})}});if(0===unregisteredTypes.length){onComplete(typeConverters)}}function __embind_finalize_value_object(structType){var reg=structRegistrations[structType];delete structRegistrations[structType];var rawConstructor=reg.rawConstructor;var rawDestructor=reg.rawDestructor;var fieldRecords=reg.fields;var fieldTypes=fieldRecords.map(function(field){return field.getterReturnType}).concat(fieldRecords.map(function(field){return field.setterArgumentType}));whenDependentTypesAreResolved([structType],fieldTypes,function(fieldTypes){var fields={};fieldRecords.forEach(function(field,i){var fieldName=field.fieldName;var getterReturnType=fieldTypes[i];var getter=field.getter;var getterContext=field.getterContext;var setterArgumentType=fieldTypes[i+fieldRecords.length];var setter=field.setter;var setterContext=field.setterContext;fields[fieldName]={read:function(ptr){return getterReturnType["fromWireType"](getter(getterContext,ptr))},write:function(ptr,o){var destructors=[];setter(setterContext,ptr,setterArgumentType["toWireType"](destructors,o));runDestructors(destructors)}}});return[{name:reg.name,"fromWireType":function(ptr){var rv={};for(var i in fields){rv[i]=fields[i].read(ptr)}rawDestructor(ptr);return rv},"toWireType":function(destructors,o){for(var fieldName in fields){if(!(fieldName in o)){throw new TypeError('Missing field:  "'+fieldName+'"')}}var ptr=rawConstructor();for(fieldName in fields){fields[fieldName].write(ptr,o[fieldName])}if(destructors!==null){destructors.push(rawDestructor,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:rawDestructor}]})}function __embind_register_bigint(primitiveType,name,size,minRange,maxRange){}function getShiftFromSize(size){switch(size){case 1:return 0;case 2:return 1;case 4:return 2;case 8:return 3;default:throw new TypeError("Unknown type size: "+size)}}function embind_init_charCodes(){var codes=new Array(256);for(var i=0;i<256;++i){codes[i]=String.fromCharCode(i)}embind_charCodes=codes}var embind_charCodes=undefined;function readLatin1String(ptr){var ret="";var c=ptr;while(HEAPU8[c]){ret+=embind_charCodes[HEAPU8[c++]]}return ret}var BindingError=undefined;function throwBindingError(message){throw new BindingError(message)}function registerType(rawType,registeredInstance,options={}){if(!("argPackAdvance"in registeredInstance)){throw new TypeError("registerType registeredInstance requires argPackAdvance")}var name=registeredInstance.name;if(!rawType){throwBindingError('type "'+name+'" must have a positive integer typeid pointer')}if(registeredTypes.hasOwnProperty(rawType)){if(options.ignoreDuplicateRegistrations){return}else{throwBindingError("Cannot register type '"+name+"' twice")}}registeredTypes[rawType]=registeredInstance;delete typeDependencies[rawType];if(awaitingDependencies.hasOwnProperty(rawType)){var callbacks=awaitingDependencies[rawType];delete awaitingDependencies[rawType];callbacks.forEach(function(cb){cb()})}}function __embind_register_bool(rawType,name,size,trueValue,falseValue){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(wt){return!!wt},"toWireType":function(destructors,o){return o?trueValue:falseValue},"argPackAdvance":8,"readValueFromPointer":function(pointer){var heap;if(size===1){heap=HEAP8}else if(size===2){heap=HEAP16}else if(size===4){heap=HEAP32}else{throw new TypeError("Unknown boolean type size: "+name)}return this["fromWireType"](heap[pointer>>shift])},destructorFunction:null})}function ClassHandle_isAliasOf(other){if(!(this instanceof ClassHandle)){return false}if(!(other instanceof ClassHandle)){return false}var leftClass=this.$$.ptrType.registeredClass;var left=this.$$.ptr;var rightClass=other.$$.ptrType.registeredClass;var right=other.$$.ptr;while(leftClass.baseClass){left=leftClass.upcast(left);leftClass=leftClass.baseClass}while(rightClass.baseClass){right=rightClass.upcast(right);rightClass=rightClass.baseClass}return leftClass===rightClass&&left===right}function shallowCopyInternalPointer(o){return{count:o.count,deleteScheduled:o.deleteScheduled,preservePointerOnDelete:o.preservePointerOnDelete,ptr:o.ptr,ptrType:o.ptrType,smartPtr:o.smartPtr,smartPtrType:o.smartPtrType}}function throwInstanceAlreadyDeleted(obj){function getInstanceTypeName(handle){return handle.$$.ptrType.registeredClass.name}throwBindingError(getInstanceTypeName(obj)+" instance already deleted")}var finalizationRegistry=false;function detachFinalizer(handle){}function runDestructor($$){if($$.smartPtr){$$.smartPtrType.rawDestructor($$.smartPtr)}else{$$.ptrType.registeredClass.rawDestructor($$.ptr)}}function releaseClassHandle($$){$$.count.value-=1;var toDelete=0===$$.count.value;if(toDelete){runDestructor($$)}}function downcastPointer(ptr,ptrClass,desiredClass){if(ptrClass===desiredClass){return ptr}if(undefined===desiredClass.baseClass){return null}var rv=downcastPointer(ptr,ptrClass,desiredClass.baseClass);if(rv===null){return null}return desiredClass.downcast(rv)}var registeredPointers={};function getInheritedInstanceCount(){return Object.keys(registeredInstances).length}function getLiveInheritedInstances(){var rv=[];for(var k in registeredInstances){if(registeredInstances.hasOwnProperty(k)){rv.push(registeredInstances[k])}}return rv}var deletionQueue=[];function flushPendingDeletes(){while(deletionQueue.length){var obj=deletionQueue.pop();obj.$$.deleteScheduled=false;obj["delete"]()}}var delayFunction=undefined;function setDelayFunction(fn){delayFunction=fn;if(deletionQueue.length&&delayFunction){delayFunction(flushPendingDeletes)}}function init_embind(){Module["getInheritedInstanceCount"]=getInheritedInstanceCount;Module["getLiveInheritedInstances"]=getLiveInheritedInstances;Module["flushPendingDeletes"]=flushPendingDeletes;Module["setDelayFunction"]=setDelayFunction}var registeredInstances={};function getBasestPointer(class_,ptr){if(ptr===undefined){throwBindingError("ptr should not be undefined")}while(class_.baseClass){ptr=class_.upcast(ptr);class_=class_.baseClass}return ptr}function getInheritedInstance(class_,ptr){ptr=getBasestPointer(class_,ptr);return registeredInstances[ptr]}function makeClassHandle(prototype,record){if(!record.ptrType||!record.ptr){throwInternalError("makeClassHandle requires ptr and ptrType")}var hasSmartPtrType=!!record.smartPtrType;var hasSmartPtr=!!record.smartPtr;if(hasSmartPtrType!==hasSmartPtr){throwInternalError("Both smartPtrType and smartPtr must be specified")}record.count={value:1};return attachFinalizer(Object.create(prototype,{$$:{value:record}}))}function RegisteredPointer_fromWireType(ptr){var rawPointer=this.getPointee(ptr);if(!rawPointer){this.destructor(ptr);return null}var registeredInstance=getInheritedInstance(this.registeredClass,rawPointer);if(undefined!==registeredInstance){if(0===registeredInstance.$$.count.value){registeredInstance.$$.ptr=rawPointer;registeredInstance.$$.smartPtr=ptr;return registeredInstance["clone"]()}else{var rv=registeredInstance["clone"]();this.destructor(ptr);return rv}}function makeDefaultHandle(){if(this.isSmartPointer){return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this.pointeeType,ptr:rawPointer,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(this.registeredClass.instancePrototype,{ptrType:this,ptr:ptr})}}var actualType=this.registeredClass.getActualType(rawPointer);var registeredPointerRecord=registeredPointers[actualType];if(!registeredPointerRecord){return makeDefaultHandle.call(this)}var toType;if(this.isConst){toType=registeredPointerRecord.constPointerType}else{toType=registeredPointerRecord.pointerType}var dp=downcastPointer(rawPointer,this.registeredClass,toType.registeredClass);if(dp===null){return makeDefaultHandle.call(this)}if(this.isSmartPointer){return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp,smartPtrType:this,smartPtr:ptr})}else{return makeClassHandle(toType.registeredClass.instancePrototype,{ptrType:toType,ptr:dp})}}function attachFinalizer(handle){if("undefined"===typeof FinalizationRegistry){attachFinalizer=(handle=>handle);return handle}finalizationRegistry=new FinalizationRegistry(info=>{releaseClassHandle(info.$$)});attachFinalizer=(handle=>{var $$=handle.$$;var hasSmartPtr=!!$$.smartPtr;if(hasSmartPtr){var info={$$:$$};finalizationRegistry.register(handle,info,handle)}return handle});detachFinalizer=(handle=>finalizationRegistry.unregister(handle));return attachFinalizer(handle)}function ClassHandle_clone(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.preservePointerOnDelete){this.$$.count.value+=1;return this}else{var clone=attachFinalizer(Object.create(Object.getPrototypeOf(this),{$$:{value:shallowCopyInternalPointer(this.$$)}}));clone.$$.count.value+=1;clone.$$.deleteScheduled=false;return clone}}function ClassHandle_delete(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}detachFinalizer(this);releaseClassHandle(this.$$);if(!this.$$.preservePointerOnDelete){this.$$.smartPtr=undefined;this.$$.ptr=undefined}}function ClassHandle_isDeleted(){return!this.$$.ptr}function ClassHandle_deleteLater(){if(!this.$$.ptr){throwInstanceAlreadyDeleted(this)}if(this.$$.deleteScheduled&&!this.$$.preservePointerOnDelete){throwBindingError("Object already scheduled for deletion")}deletionQueue.push(this);if(deletionQueue.length===1&&delayFunction){delayFunction(flushPendingDeletes)}this.$$.deleteScheduled=true;return this}function init_ClassHandle(){ClassHandle.prototype["isAliasOf"]=ClassHandle_isAliasOf;ClassHandle.prototype["clone"]=ClassHandle_clone;ClassHandle.prototype["delete"]=ClassHandle_delete;ClassHandle.prototype["isDeleted"]=ClassHandle_isDeleted;ClassHandle.prototype["deleteLater"]=ClassHandle_deleteLater}function ClassHandle(){}function ensureOverloadTable(proto,methodName,humanName){if(undefined===proto[methodName].overloadTable){var prevFunc=proto[methodName];proto[methodName]=function(){if(!proto[methodName].overloadTable.hasOwnProperty(arguments.length)){throwBindingError("Function '"+humanName+"' called with an invalid number of arguments ("+arguments.length+") - expects one of ("+proto[methodName].overloadTable+")!")}return proto[methodName].overloadTable[arguments.length].apply(this,arguments)};proto[methodName].overloadTable=[];proto[methodName].overloadTable[prevFunc.argCount]=prevFunc}}function exposePublicSymbol(name,value,numArguments){if(Module.hasOwnProperty(name)){if(undefined===numArguments||undefined!==Module[name].overloadTable&&undefined!==Module[name].overloadTable[numArguments]){throwBindingError("Cannot register public name '"+name+"' twice")}ensureOverloadTable(Module,name,name);if(Module.hasOwnProperty(numArguments)){throwBindingError("Cannot register multiple overloads of a function with the same number of arguments ("+numArguments+")!")}Module[name].overloadTable[numArguments]=value}else{Module[name]=value;if(undefined!==numArguments){Module[name].numArguments=numArguments}}}function RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast){this.name=name;this.constructor=constructor;this.instancePrototype=instancePrototype;this.rawDestructor=rawDestructor;this.baseClass=baseClass;this.getActualType=getActualType;this.upcast=upcast;this.downcast=downcast;this.pureVirtualFunctions=[]}function upcastPointer(ptr,ptrClass,desiredClass){while(ptrClass!==desiredClass){if(!ptrClass.upcast){throwBindingError("Expected null or instance of "+desiredClass.name+", got an instance of "+ptrClass.name)}ptr=ptrClass.upcast(ptr);ptrClass=ptrClass.baseClass}return ptr}function constNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function genericPointerToWireType(destructors,handle){var ptr;if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}if(this.isSmartPointer){ptr=this.rawConstructor();if(destructors!==null){destructors.push(this.rawDestructor,ptr)}return ptr}else{return 0}}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(!this.isConst&&handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);if(this.isSmartPointer){if(undefined===handle.$$.smartPtr){throwBindingError("Passing raw pointer to smart pointer is illegal")}switch(this.sharingPolicy){case 0:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{throwBindingError("Cannot convert argument of type "+(handle.$$.smartPtrType?handle.$$.smartPtrType.name:handle.$$.ptrType.name)+" to parameter type "+this.name)}break;case 1:ptr=handle.$$.smartPtr;break;case 2:if(handle.$$.smartPtrType===this){ptr=handle.$$.smartPtr}else{var clonedHandle=handle["clone"]();ptr=this.rawShare(ptr,Emval.toHandle(function(){clonedHandle["delete"]()}));if(destructors!==null){destructors.push(this.rawDestructor,ptr)}}break;default:throwBindingError("Unsupporting sharing policy")}}return ptr}function nonConstNoSmartPtrRawPointerToWireType(destructors,handle){if(handle===null){if(this.isReference){throwBindingError("null is not a valid "+this.name)}return 0}if(!handle.$$){throwBindingError('Cannot pass "'+_embind_repr(handle)+'" as a '+this.name)}if(!handle.$$.ptr){throwBindingError("Cannot pass deleted object as a pointer of type "+this.name)}if(handle.$$.ptrType.isConst){throwBindingError("Cannot convert argument of type "+handle.$$.ptrType.name+" to parameter type "+this.name)}var handleClass=handle.$$.ptrType.registeredClass;var ptr=upcastPointer(handle.$$.ptr,handleClass,this.registeredClass);return ptr}function RegisteredPointer_getPointee(ptr){if(this.rawGetPointee){ptr=this.rawGetPointee(ptr)}return ptr}function RegisteredPointer_destructor(ptr){if(this.rawDestructor){this.rawDestructor(ptr)}}function RegisteredPointer_deleteObject(handle){if(handle!==null){handle["delete"]()}}function init_RegisteredPointer(){RegisteredPointer.prototype.getPointee=RegisteredPointer_getPointee;RegisteredPointer.prototype.destructor=RegisteredPointer_destructor;RegisteredPointer.prototype["argPackAdvance"]=8;RegisteredPointer.prototype["readValueFromPointer"]=simpleReadValueFromPointer;RegisteredPointer.prototype["deleteObject"]=RegisteredPointer_deleteObject;RegisteredPointer.prototype["fromWireType"]=RegisteredPointer_fromWireType}function RegisteredPointer(name,registeredClass,isReference,isConst,isSmartPointer,pointeeType,sharingPolicy,rawGetPointee,rawConstructor,rawShare,rawDestructor){this.name=name;this.registeredClass=registeredClass;this.isReference=isReference;this.isConst=isConst;this.isSmartPointer=isSmartPointer;this.pointeeType=pointeeType;this.sharingPolicy=sharingPolicy;this.rawGetPointee=rawGetPointee;this.rawConstructor=rawConstructor;this.rawShare=rawShare;this.rawDestructor=rawDestructor;if(!isSmartPointer&&registeredClass.baseClass===undefined){if(isConst){this["toWireType"]=constNoSmartPtrRawPointerToWireType;this.destructorFunction=null}else{this["toWireType"]=nonConstNoSmartPtrRawPointerToWireType;this.destructorFunction=null}}else{this["toWireType"]=genericPointerToWireType}}function replacePublicSymbol(name,value,numArguments){if(!Module.hasOwnProperty(name)){throwInternalError("Replacing nonexistant public symbol")}if(undefined!==Module[name].overloadTable&&undefined!==numArguments){Module[name].overloadTable[numArguments]=value}else{Module[name]=value;Module[name].argCount=numArguments}}function dynCallLegacy(sig,ptr,args){var f=Module["dynCall_"+sig];return args&&args.length?f.apply(null,[ptr].concat(args)):f.call(null,ptr)}function dynCall(sig,ptr,args){if(sig.includes("j")){return dynCallLegacy(sig,ptr,args)}return getWasmTableEntry(ptr).apply(null,args)}function getDynCaller(sig,ptr){var argCache=[];return function(){argCache.length=0;Object.assign(argCache,arguments);return dynCall(sig,ptr,argCache)}}function embind__requireFunction(signature,rawFunction){signature=readLatin1String(signature);function makeDynCaller(){if(signature.includes("j")){return getDynCaller(signature,rawFunction)}return getWasmTableEntry(rawFunction)}var fp=makeDynCaller();if(typeof fp!="function"){throwBindingError("unknown function pointer with signature "+signature+": "+rawFunction)}return fp}var UnboundTypeError=undefined;function getTypeName(type){var ptr=___getTypeName(type);var rv=readLatin1String(ptr);_free(ptr);return rv}function throwUnboundTypeError(message,types){var unboundTypes=[];var seen={};function visit(type){if(seen[type]){return}if(registeredTypes[type]){return}if(typeDependencies[type]){typeDependencies[type].forEach(visit);return}unboundTypes.push(type);seen[type]=true}types.forEach(visit);throw new UnboundTypeError(message+": "+unboundTypes.map(getTypeName).join([", "]))}function __embind_register_class(rawType,rawPointerType,rawConstPointerType,baseClassRawType,getActualTypeSignature,getActualType,upcastSignature,upcast,downcastSignature,downcast,name,destructorSignature,rawDestructor){name=readLatin1String(name);getActualType=embind__requireFunction(getActualTypeSignature,getActualType);if(upcast){upcast=embind__requireFunction(upcastSignature,upcast)}if(downcast){downcast=embind__requireFunction(downcastSignature,downcast)}rawDestructor=embind__requireFunction(destructorSignature,rawDestructor);var legalFunctionName=makeLegalFunctionName(name);exposePublicSymbol(legalFunctionName,function(){throwUnboundTypeError("Cannot construct "+name+" due to unbound types",[baseClassRawType])});whenDependentTypesAreResolved([rawType,rawPointerType,rawConstPointerType],baseClassRawType?[baseClassRawType]:[],function(base){base=base[0];var baseClass;var basePrototype;if(baseClassRawType){baseClass=base.registeredClass;basePrototype=baseClass.instancePrototype}else{basePrototype=ClassHandle.prototype}var constructor=createNamedFunction(legalFunctionName,function(){if(Object.getPrototypeOf(this)!==instancePrototype){throw new BindingError("Use 'new' to construct "+name)}if(undefined===registeredClass.constructor_body){throw new BindingError(name+" has no accessible constructor")}var body=registeredClass.constructor_body[arguments.length];if(undefined===body){throw new BindingError("Tried to invoke ctor of "+name+" with invalid number of parameters ("+arguments.length+") - expected ("+Object.keys(registeredClass.constructor_body).toString()+") parameters instead!")}return body.apply(this,arguments)});var instancePrototype=Object.create(basePrototype,{constructor:{value:constructor}});constructor.prototype=instancePrototype;var registeredClass=new RegisteredClass(name,constructor,instancePrototype,rawDestructor,baseClass,getActualType,upcast,downcast);var referenceConverter=new RegisteredPointer(name,registeredClass,true,false,false);var pointerConverter=new RegisteredPointer(name+"*",registeredClass,false,false,false);var constPointerConverter=new RegisteredPointer(name+" const*",registeredClass,false,true,false);registeredPointers[rawType]={pointerType:pointerConverter,constPointerType:constPointerConverter};replacePublicSymbol(legalFunctionName,constructor);return[referenceConverter,pointerConverter,constPointerConverter]})}function heap32VectorToArray(count,firstElement){var array=[];for(var i=0;i<count;i++){array.push(HEAP32[(firstElement>>2)+i])}return array}function __embind_register_class_constructor(rawClassType,argCount,rawArgTypesAddr,invokerSignature,invoker,rawConstructor){assert(argCount>0);var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);invoker=embind__requireFunction(invokerSignature,invoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName="constructor "+classType.name;if(undefined===classType.registeredClass.constructor_body){classType.registeredClass.constructor_body=[]}if(undefined!==classType.registeredClass.constructor_body[argCount-1]){throw new BindingError("Cannot register multiple constructors with identical number of parameters ("+(argCount-1)+") for class '"+classType.name+"'! Overload resolution is currently only performed using the parameter count, not actual type info!")}classType.registeredClass.constructor_body[argCount-1]=(()=>{throwUnboundTypeError("Cannot construct "+classType.name+" due to unbound types",rawArgTypes)});whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){argTypes.splice(1,0,null);classType.registeredClass.constructor_body[argCount-1]=craftInvokerFunction(humanName,argTypes,null,invoker,rawConstructor);return[]});return[]})}function new_(constructor,argumentList){if(!(constructor instanceof Function)){throw new TypeError("new_ called with constructor type "+typeof constructor+" which is not a function")}var dummy=createNamedFunction(constructor.name||"unknownFunctionName",function(){});dummy.prototype=constructor.prototype;var obj=new dummy;var r=constructor.apply(obj,argumentList);return r instanceof Object?r:obj}function craftInvokerFunction(humanName,argTypes,classType,cppInvokerFunc,cppTargetFunc){var argCount=argTypes.length;if(argCount<2){throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!")}var isClassMethodFunc=argTypes[1]!==null&&classType!==null;var needsDestructorStack=false;for(var i=1;i<argTypes.length;++i){if(argTypes[i]!==null&&argTypes[i].destructorFunction===undefined){needsDestructorStack=true;break}}var returns=argTypes[0].name!=="void";var argsList="";var argsListWired="";for(var i=0;i<argCount-2;++i){argsList+=(i!==0?", ":"")+"arg"+i;argsListWired+=(i!==0?", ":"")+"arg"+i+"Wired"}var invokerFnBody="return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n"+"if (arguments.length !== "+(argCount-2)+") {\n"+"throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount-2)+" args!');\n"+"}\n";if(needsDestructorStack){invokerFnBody+="var destructors = [];\n"}var dtorStack=needsDestructorStack?"destructors":"null";var args1=["throwBindingError","invoker","fn","runDestructors","retType","classParam"];var args2=[throwBindingError,cppInvokerFunc,cppTargetFunc,runDestructors,argTypes[0],argTypes[1]];if(isClassMethodFunc){invokerFnBody+="var thisWired = classParam.toWireType("+dtorStack+", this);\n"}for(var i=0;i<argCount-2;++i){invokerFnBody+="var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";args1.push("argType"+i);args2.push(argTypes[i+2])}if(isClassMethodFunc){argsListWired="thisWired"+(argsListWired.length>0?", ":"")+argsListWired}invokerFnBody+=(returns?"var rv = ":"")+"invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";if(needsDestructorStack){invokerFnBody+="runDestructors(destructors);\n"}else{for(var i=isClassMethodFunc?1:2;i<argTypes.length;++i){var paramName=i===1?"thisWired":"arg"+(i-2)+"Wired";if(argTypes[i].destructorFunction!==null){invokerFnBody+=paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";args1.push(paramName+"_dtor");args2.push(argTypes[i].destructorFunction)}}}if(returns){invokerFnBody+="var ret = retType.fromWireType(rv);\n"+"return ret;\n"}else{}invokerFnBody+="}\n";args1.push(invokerFnBody);var invokerFunction=new_(Function,args1).apply(null,args2);return invokerFunction}function __embind_register_class_function(rawClassType,methodName,argCount,rawArgTypesAddr,invokerSignature,rawInvoker,context,isPureVirtual){var rawArgTypes=heap32VectorToArray(argCount,rawArgTypesAddr);methodName=readLatin1String(methodName);rawInvoker=embind__requireFunction(invokerSignature,rawInvoker);whenDependentTypesAreResolved([],[rawClassType],function(classType){classType=classType[0];var humanName=classType.name+"."+methodName;if(methodName.startsWith("@@")){methodName=Symbol[methodName.substring(2)]}if(isPureVirtual){classType.registeredClass.pureVirtualFunctions.push(methodName)}function unboundTypesHandler(){throwUnboundTypeError("Cannot call "+humanName+" due to unbound types",rawArgTypes)}var proto=classType.registeredClass.instancePrototype;var method=proto[methodName];if(undefined===method||undefined===method.overloadTable&&method.className!==classType.name&&method.argCount===argCount-2){unboundTypesHandler.argCount=argCount-2;unboundTypesHandler.className=classType.name;proto[methodName]=unboundTypesHandler}else{ensureOverloadTable(proto,methodName,humanName);proto[methodName].overloadTable[argCount-2]=unboundTypesHandler}whenDependentTypesAreResolved([],rawArgTypes,function(argTypes){var memberFunction=craftInvokerFunction(humanName,argTypes,classType,rawInvoker,context);if(undefined===proto[methodName].overloadTable){memberFunction.argCount=argCount-2;proto[methodName]=memberFunction}else{proto[methodName].overloadTable[argCount-2]=memberFunction}return[]});return[]})}function __embind_register_constant(name,type,value){name=readLatin1String(name);whenDependentTypesAreResolved([],[type],function(type){type=type[0];Module[name]=type["fromWireType"](value);return[]})}var emval_free_list=[];var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];function __emval_decref(handle){if(handle>4&&0===--emval_handle_array[handle].refcount){emval_handle_array[handle]=undefined;emval_free_list.push(handle)}}function count_emval_handles(){var count=0;for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){++count}}return count}function get_first_emval(){for(var i=5;i<emval_handle_array.length;++i){if(emval_handle_array[i]!==undefined){return emval_handle_array[i]}}return null}function init_emval(){Module["count_emval_handles"]=count_emval_handles;Module["get_first_emval"]=get_first_emval}var Emval={toValue:function(handle){if(!handle){throwBindingError("Cannot use deleted val. handle = "+handle)}return emval_handle_array[handle].value},toHandle:function(value){switch(value){case undefined:{return 1}case null:{return 2}case true:{return 3}case false:{return 4}default:{var handle=emval_free_list.length?emval_free_list.pop():emval_handle_array.length;emval_handle_array[handle]={refcount:1,value:value};return handle}}}};function __embind_register_emval(rawType,name){name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(handle){var rv=Emval.toValue(handle);__emval_decref(handle);return rv},"toWireType":function(destructors,value){return Emval.toHandle(value)},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:null})}function _embind_repr(v){if(v===null){return"null"}var t=typeof v;if(t==="object"||t==="array"||t==="function"){return v.toString()}else{return""+v}}function floatReadValueFromPointer(name,shift){switch(shift){case 2:return function(pointer){return this["fromWireType"](HEAPF32[pointer>>2])};case 3:return function(pointer){return this["fromWireType"](HEAPF64[pointer>>3])};default:throw new TypeError("Unknown float type: "+name)}}function __embind_register_float(rawType,name,size){var shift=getShiftFromSize(size);name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":function(value){return value},"toWireType":function(destructors,value){return value},"argPackAdvance":8,"readValueFromPointer":floatReadValueFromPointer(name,shift),destructorFunction:null})}function __embind_register_function(name,argCount,rawArgTypesAddr,signature,rawInvoker,fn){var argTypes=heap32VectorToArray(argCount,rawArgTypesAddr);name=readLatin1String(name);rawInvoker=embind__requireFunction(signature,rawInvoker);exposePublicSymbol(name,function(){throwUnboundTypeError("Cannot call "+name+" due to unbound types",argTypes)},argCount-1);whenDependentTypesAreResolved([],argTypes,function(argTypes){var invokerArgsArray=[argTypes[0],null].concat(argTypes.slice(1));replacePublicSymbol(name,craftInvokerFunction(name,invokerArgsArray,null,rawInvoker,fn),argCount-1);return[]})}function integerReadValueFromPointer(name,shift,signed){switch(shift){case 0:return signed?function readS8FromPointer(pointer){return HEAP8[pointer]}:function readU8FromPointer(pointer){return HEAPU8[pointer]};case 1:return signed?function readS16FromPointer(pointer){return HEAP16[pointer>>1]}:function readU16FromPointer(pointer){return HEAPU16[pointer>>1]};case 2:return signed?function readS32FromPointer(pointer){return HEAP32[pointer>>2]}:function readU32FromPointer(pointer){return HEAPU32[pointer>>2]};default:throw new TypeError("Unknown integer type: "+name)}}function __embind_register_integer(primitiveType,name,size,minRange,maxRange){name=readLatin1String(name);if(maxRange===-1){maxRange=4294967295}var shift=getShiftFromSize(size);var fromWireType=value=>value;if(minRange===0){var bitshift=32-8*size;fromWireType=(value=>value<<bitshift>>>bitshift)}var isUnsignedType=name.includes("unsigned");var checkAssertions=(value,toTypeName)=>{};var toWireType;if(isUnsignedType){toWireType=function(destructors,value){checkAssertions(value,this.name);return value>>>0}}else{toWireType=function(destructors,value){checkAssertions(value,this.name);return value}}registerType(primitiveType,{name:name,"fromWireType":fromWireType,"toWireType":toWireType,"argPackAdvance":8,"readValueFromPointer":integerReadValueFromPointer(name,shift,minRange!==0),destructorFunction:null})}function __embind_register_memory_view(rawType,dataTypeIndex,name){var typeMapping=[Int8Array,Uint8Array,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array];var TA=typeMapping[dataTypeIndex];function decodeMemoryView(handle){handle=handle>>2;var heap=HEAPU32;var size=heap[handle];var data=heap[handle+1];return new TA(buffer,data,size)}name=readLatin1String(name);registerType(rawType,{name:name,"fromWireType":decodeMemoryView,"argPackAdvance":8,"readValueFromPointer":decodeMemoryView},{ignoreDuplicateRegistrations:true})}function __embind_register_std_string(rawType,name){name=readLatin1String(name);var stdStringIsUTF8=name==="std::string";registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var str;if(stdStringIsUTF8){var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i;if(i==length||HEAPU8[currentBytePtr]==0){var maxRead=currentBytePtr-decodeStartPtr;var stringSegment=UTF8ToString(decodeStartPtr,maxRead);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+1}}}else{var a=new Array(length);for(var i=0;i<length;++i){a[i]=String.fromCharCode(HEAPU8[value+4+i])}str=a.join("")}_free(value);return str},"toWireType":function(destructors,value){if(value instanceof ArrayBuffer){value=new Uint8Array(value)}var getLength;var valueIsOfTypeString=typeof value=="string";if(!(valueIsOfTypeString||value instanceof Uint8Array||value instanceof Uint8ClampedArray||value instanceof Int8Array)){throwBindingError("Cannot pass non-string to std::string")}if(stdStringIsUTF8&&valueIsOfTypeString){getLength=(()=>lengthBytesUTF8(value))}else{getLength=(()=>value.length)}var length=getLength();var ptr=_malloc(4+length+1);HEAPU32[ptr>>2]=length;if(stdStringIsUTF8&&valueIsOfTypeString){stringToUTF8(value,ptr+4,length+1)}else{if(valueIsOfTypeString){for(var i=0;i<length;++i){var charCode=value.charCodeAt(i);if(charCode>255){_free(ptr);throwBindingError("String has UTF-16 code units that do not fit in 8 bits")}HEAPU8[ptr+4+i]=charCode}}else{for(var i=0;i<length;++i){HEAPU8[ptr+4+i]=value[i]}}}if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_std_wstring(rawType,charSize,name){name=readLatin1String(name);var decodeString,encodeString,getHeap,lengthBytesUTF,shift;if(charSize===2){decodeString=UTF16ToString;encodeString=stringToUTF16;lengthBytesUTF=lengthBytesUTF16;getHeap=(()=>HEAPU16);shift=1}else if(charSize===4){decodeString=UTF32ToString;encodeString=stringToUTF32;lengthBytesUTF=lengthBytesUTF32;getHeap=(()=>HEAPU32);shift=2}registerType(rawType,{name:name,"fromWireType":function(value){var length=HEAPU32[value>>2];var HEAP=getHeap();var str;var decodeStartPtr=value+4;for(var i=0;i<=length;++i){var currentBytePtr=value+4+i*charSize;if(i==length||HEAP[currentBytePtr>>shift]==0){var maxReadBytes=currentBytePtr-decodeStartPtr;var stringSegment=decodeString(decodeStartPtr,maxReadBytes);if(str===undefined){str=stringSegment}else{str+=String.fromCharCode(0);str+=stringSegment}decodeStartPtr=currentBytePtr+charSize}}_free(value);return str},"toWireType":function(destructors,value){if(!(typeof value=="string")){throwBindingError("Cannot pass non-string to C++ string type "+name)}var length=lengthBytesUTF(value);var ptr=_malloc(4+length+charSize);HEAPU32[ptr>>2]=length>>shift;encodeString(value,ptr+4,length+charSize);if(destructors!==null){destructors.push(_free,ptr)}return ptr},"argPackAdvance":8,"readValueFromPointer":simpleReadValueFromPointer,destructorFunction:function(ptr){_free(ptr)}})}function __embind_register_value_object(rawType,name,constructorSignature,rawConstructor,destructorSignature,rawDestructor){structRegistrations[rawType]={name:readLatin1String(name),rawConstructor:embind__requireFunction(constructorSignature,rawConstructor),rawDestructor:embind__requireFunction(destructorSignature,rawDestructor),fields:[]}}function __embind_register_value_object_field(structType,fieldName,getterReturnType,getterSignature,getter,getterContext,setterArgumentType,setterSignature,setter,setterContext){structRegistrations[structType].fields.push({fieldName:readLatin1String(fieldName),getterReturnType:getterReturnType,getter:embind__requireFunction(getterSignature,getter),getterContext:getterContext,setterArgumentType:setterArgumentType,setter:embind__requireFunction(setterSignature,setter),setterContext:setterContext})}function __embind_register_void(rawType,name){name=readLatin1String(name);registerType(rawType,{isVoid:true,name:name,"argPackAdvance":0,"fromWireType":function(){return undefined},"toWireType":function(destructors,o){return undefined}})}function __emscripten_throw_longjmp(){throw Infinity}function __emval_incref(handle){if(handle>4){emval_handle_array[handle].refcount+=1}}function requireRegisteredType(rawType,humanName){var impl=registeredTypes[rawType];if(undefined===impl){throwBindingError(humanName+" has unknown type "+getTypeName(rawType))}return impl}function __emval_take_value(type,argv){type=requireRegisteredType(type,"_emval_take_value");var v=type["readValueFromPointer"](argv);return Emval.toHandle(v)}function __localtime_js(time,tmPtr){var date=new Date(HEAP32[time>>2]*1e3);HEAP32[tmPtr>>2]=date.getSeconds();HEAP32[tmPtr+4>>2]=date.getMinutes();HEAP32[tmPtr+8>>2]=date.getHours();HEAP32[tmPtr+12>>2]=date.getDate();HEAP32[tmPtr+16>>2]=date.getMonth();HEAP32[tmPtr+20>>2]=date.getFullYear()-1900;HEAP32[tmPtr+24>>2]=date.getDay();var start=new Date(date.getFullYear(),0,1);var yday=(date.getTime()-start.getTime())/(1e3*60*60*24)|0;HEAP32[tmPtr+28>>2]=yday;HEAP32[tmPtr+36>>2]=-(date.getTimezoneOffset()*60);var summerOffset=new Date(date.getFullYear(),6,1).getTimezoneOffset();var winterOffset=start.getTimezoneOffset();var dst=(summerOffset!=winterOffset&&date.getTimezoneOffset()==Math.min(winterOffset,summerOffset))|0;HEAP32[tmPtr+32>>2]=dst}function _tzset_impl(timezone,daylight,tzname){var currentYear=(new Date).getFullYear();var winter=new Date(currentYear,0,1);var summer=new Date(currentYear,6,1);var winterOffset=winter.getTimezoneOffset();var summerOffset=summer.getTimezoneOffset();var stdTimezoneOffset=Math.max(winterOffset,summerOffset);HEAP32[timezone>>2]=stdTimezoneOffset*60;HEAP32[daylight>>2]=Number(winterOffset!=summerOffset);function extractZone(date){var match=date.toTimeString().match(/\(([A-Za-z ]+)\)$/);return match?match[1]:"GMT"}var winterName=extractZone(winter);var summerName=extractZone(summer);var winterNamePtr=allocateUTF8(winterName);var summerNamePtr=allocateUTF8(summerName);if(summerOffset<winterOffset){HEAP32[tzname>>2]=winterNamePtr;HEAP32[tzname+4>>2]=summerNamePtr}else{HEAP32[tzname>>2]=summerNamePtr;HEAP32[tzname+4>>2]=winterNamePtr}}function __tzset_js(timezone,daylight,tzname){if(__tzset_js.called)return;__tzset_js.called=true;_tzset_impl(timezone,daylight,tzname)}function _abort(){abort("")}var readAsmConstArgsArray=[];function readAsmConstArgs(sigPtr,buf){readAsmConstArgsArray.length=0;var ch;buf>>=2;while(ch=HEAPU8[sigPtr++]){var readAsmConstArgsDouble=ch<105;if(readAsmConstArgsDouble&&buf&1)buf++;readAsmConstArgsArray.push(readAsmConstArgsDouble?HEAPF64[buf++>>1]:HEAP32[buf]);++buf}return readAsmConstArgsArray}function _emscripten_asm_const_int(code,sigPtr,argbuf){var args=readAsmConstArgs(sigPtr,argbuf);return ASM_CONSTS[code].apply(null,args)}function _emscripten_get_heap_max(){return 2147483648}function emscripten_realloc_buffer(size){try{wasmMemory.grow(size-buffer.byteLength+65535>>>16);updateGlobalBufferAndViews(wasmMemory.buffer);return 1}catch(e){}}function _emscripten_resize_heap(requestedSize){var oldSize=HEAPU8.length;requestedSize=requestedSize>>>0;var maxHeapSize=_emscripten_get_heap_max();if(requestedSize>maxHeapSize){return false}let alignUp=(x,multiple)=>x+(multiple-x%multiple)%multiple;for(var cutDown=1;cutDown<=4;cutDown*=2){var overGrownHeapSize=oldSize*(1+.2/cutDown);overGrownHeapSize=Math.min(overGrownHeapSize,requestedSize+100663296);var newSize=Math.min(maxHeapSize,alignUp(Math.max(requestedSize,overGrownHeapSize),65536));var replacement=emscripten_realloc_buffer(newSize);if(replacement){return true}}return false}var ENV={};function getExecutableName(){return thisProgram||"./this.program"}function getEnvStrings(){if(!getEnvStrings.strings){var lang=(typeof navigator=="object"&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8";var env={"USER":"web_user","LOGNAME":"web_user","PATH":"/","PWD":"/","HOME":"/home/web_user","LANG":lang,"_":getExecutableName()};for(var x in ENV){if(ENV[x]===undefined)delete env[x];else env[x]=ENV[x]}var strings=[];for(var x in env){strings.push(x+"="+env[x])}getEnvStrings.strings=strings}return getEnvStrings.strings}function _environ_get(__environ,environ_buf){var bufSize=0;getEnvStrings().forEach(function(string,i){var ptr=environ_buf+bufSize;HEAP32[__environ+i*4>>2]=ptr;writeAsciiToMemory(string,ptr);bufSize+=string.length+1});return 0}function _environ_sizes_get(penviron_count,penviron_buf_size){var strings=getEnvStrings();HEAP32[penviron_count>>2]=strings.length;var bufSize=0;strings.forEach(function(string){bufSize+=string.length+1});HEAP32[penviron_buf_size>>2]=bufSize;return 0}function _exit(status){exit(status)}function _fd_close(fd){try{var stream=SYSCALLS.getStreamFromFD(fd);FS.close(stream);return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_read(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doReadv(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_seek(fd,offset_low,offset_high,whence,newOffset){try{var stream=SYSCALLS.getStreamFromFD(fd);var HIGH_OFFSET=4294967296;var offset=offset_high*HIGH_OFFSET+(offset_low>>>0);var DOUBLE_LIMIT=9007199254740992;if(offset<=-DOUBLE_LIMIT||offset>=DOUBLE_LIMIT){return-61}FS.llseek(stream,offset,whence);tempI64=[stream.position>>>0,(tempDouble=stream.position,+Math.abs(tempDouble)>=1?tempDouble>0?(Math.min(+Math.floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math.ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[newOffset>>2]=tempI64[0],HEAP32[newOffset+4>>2]=tempI64[1];if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _fd_write(fd,iov,iovcnt,pnum){try{var stream=SYSCALLS.getStreamFromFD(fd);var num=SYSCALLS.doWritev(stream,iov,iovcnt);HEAP32[pnum>>2]=num;return 0}catch(e){if(typeof FS=="undefined"||!(e instanceof FS.ErrnoError))throw e;return e.errno}}function _getTempRet0(){return getTempRet0()}function _gettimeofday(ptr){var now=Date.now();HEAP32[ptr>>2]=now/1e3|0;HEAP32[ptr+4>>2]=now%1e3*1e3|0;return 0}function _setTempRet0(val){setTempRet0(val)}function __isLeapYear(year){return year%4===0&&(year%100!==0||year%400===0)}function __arraySum(array,index){var sum=0;for(var i=0;i<=index;sum+=array[i++]){}return sum}var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date,days){var newDate=new Date(date.getTime());while(days>0){var leap=__isLeapYear(newDate.getFullYear());var currentMonth=newDate.getMonth();var daysInCurrentMonth=(leap?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR)[currentMonth];if(days>daysInCurrentMonth-newDate.getDate()){days-=daysInCurrentMonth-newDate.getDate()+1;newDate.setDate(1);if(currentMonth<11){newDate.setMonth(currentMonth+1)}else{newDate.setMonth(0);newDate.setFullYear(newDate.getFullYear()+1)}}else{newDate.setDate(newDate.getDate()+days);return newDate}}return newDate}function _strftime(s,maxsize,format,tm){var tm_zone=HEAP32[tm+40>>2];var date={tm_sec:HEAP32[tm>>2],tm_min:HEAP32[tm+4>>2],tm_hour:HEAP32[tm+8>>2],tm_mday:HEAP32[tm+12>>2],tm_mon:HEAP32[tm+16>>2],tm_year:HEAP32[tm+20>>2],tm_wday:HEAP32[tm+24>>2],tm_yday:HEAP32[tm+28>>2],tm_isdst:HEAP32[tm+32>>2],tm_gmtoff:HEAP32[tm+36>>2],tm_zone:tm_zone?UTF8ToString(tm_zone):""};var pattern=UTF8ToString(format);var EXPANSION_RULES_1={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"};for(var rule in EXPANSION_RULES_1){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_1[rule])}var WEEKDAYS=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var MONTHS=["January","February","March","April","May","June","July","August","September","October","November","December"];function leadingSomething(value,digits,character){var str=typeof value=="number"?value.toString():value||"";while(str.length<digits){str=character[0]+str}return str}function leadingNulls(value,digits){return leadingSomething(value,digits,"0")}function compareByDay(date1,date2){function sgn(value){return value<0?-1:value>0?1:0}var compare;if((compare=sgn(date1.getFullYear()-date2.getFullYear()))===0){if((compare=sgn(date1.getMonth()-date2.getMonth()))===0){compare=sgn(date1.getDate()-date2.getDate())}}return compare}function getFirstWeekStartDate(janFourth){switch(janFourth.getDay()){case 0:return new Date(janFourth.getFullYear()-1,11,29);case 1:return janFourth;case 2:return new Date(janFourth.getFullYear(),0,3);case 3:return new Date(janFourth.getFullYear(),0,2);case 4:return new Date(janFourth.getFullYear(),0,1);case 5:return new Date(janFourth.getFullYear()-1,11,31);case 6:return new Date(janFourth.getFullYear()-1,11,30)}}function getWeekBasedYear(date){var thisDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);var janFourthThisYear=new Date(thisDate.getFullYear(),0,4);var janFourthNextYear=new Date(thisDate.getFullYear()+1,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);if(compareByDay(firstWeekStartThisYear,thisDate)<=0){if(compareByDay(firstWeekStartNextYear,thisDate)<=0){return thisDate.getFullYear()+1}else{return thisDate.getFullYear()}}else{return thisDate.getFullYear()-1}}var EXPANSION_RULES_2={"%a":function(date){return WEEKDAYS[date.tm_wday].substring(0,3)},"%A":function(date){return WEEKDAYS[date.tm_wday]},"%b":function(date){return MONTHS[date.tm_mon].substring(0,3)},"%B":function(date){return MONTHS[date.tm_mon]},"%C":function(date){var year=date.tm_year+1900;return leadingNulls(year/100|0,2)},"%d":function(date){return leadingNulls(date.tm_mday,2)},"%e":function(date){return leadingSomething(date.tm_mday,2," ")},"%g":function(date){return getWeekBasedYear(date).toString().substring(2)},"%G":function(date){return getWeekBasedYear(date)},"%H":function(date){return leadingNulls(date.tm_hour,2)},"%I":function(date){var twelveHour=date.tm_hour;if(twelveHour==0)twelveHour=12;else if(twelveHour>12)twelveHour-=12;return leadingNulls(twelveHour,2)},"%j":function(date){return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900)?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,date.tm_mon-1),3)},"%m":function(date){return leadingNulls(date.tm_mon+1,2)},"%M":function(date){return leadingNulls(date.tm_min,2)},"%n":function(){return"\n"},"%p":function(date){if(date.tm_hour>=0&&date.tm_hour<12){return"AM"}else{return"PM"}},"%S":function(date){return leadingNulls(date.tm_sec,2)},"%t":function(){return"\t"},"%u":function(date){return date.tm_wday||7},"%U":function(date){var janFirst=new Date(date.tm_year+1900,0,1);var firstSunday=janFirst.getDay()===0?janFirst:__addDays(janFirst,7-janFirst.getDay());var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstSunday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstSundayUntilEndJanuary=31-firstSunday.getDate();var days=firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstSunday,janFirst)===0?"01":"00"},"%V":function(date){var janFourthThisYear=new Date(date.tm_year+1900,0,4);var janFourthNextYear=new Date(date.tm_year+1901,0,4);var firstWeekStartThisYear=getFirstWeekStartDate(janFourthThisYear);var firstWeekStartNextYear=getFirstWeekStartDate(janFourthNextYear);var endDate=__addDays(new Date(date.tm_year+1900,0,1),date.tm_yday);if(compareByDay(endDate,firstWeekStartThisYear)<0){return"53"}if(compareByDay(firstWeekStartNextYear,endDate)<=0){return"01"}var daysDifference;if(firstWeekStartThisYear.getFullYear()<date.tm_year+1900){daysDifference=date.tm_yday+32-firstWeekStartThisYear.getDate()}else{daysDifference=date.tm_yday+1-firstWeekStartThisYear.getDate()}return leadingNulls(Math.ceil(daysDifference/7),2)},"%w":function(date){return date.tm_wday},"%W":function(date){var janFirst=new Date(date.tm_year,0,1);var firstMonday=janFirst.getDay()===1?janFirst:__addDays(janFirst,janFirst.getDay()===0?1:7-janFirst.getDay()+1);var endDate=new Date(date.tm_year+1900,date.tm_mon,date.tm_mday);if(compareByDay(firstMonday,endDate)<0){var februaryFirstUntilEndMonth=__arraySum(__isLeapYear(endDate.getFullYear())?__MONTH_DAYS_LEAP:__MONTH_DAYS_REGULAR,endDate.getMonth()-1)-31;var firstMondayUntilEndJanuary=31-firstMonday.getDate();var days=firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();return leadingNulls(Math.ceil(days/7),2)}return compareByDay(firstMonday,janFirst)===0?"01":"00"},"%y":function(date){return(date.tm_year+1900).toString().substring(2)},"%Y":function(date){return date.tm_year+1900},"%z":function(date){var off=date.tm_gmtoff;var ahead=off>=0;off=Math.abs(off)/60;off=off/60*100+off%60;return(ahead?"+":"-")+String("0000"+off).slice(-4)},"%Z":function(date){return date.tm_zone},"%%":function(){return"%"}};pattern=pattern.replace(/%%/g,"\0\0");for(var rule in EXPANSION_RULES_2){if(pattern.includes(rule)){pattern=pattern.replace(new RegExp(rule,"g"),EXPANSION_RULES_2[rule](date))}}pattern=pattern.replace(/\0\0/g,"%");var bytes=intArrayFromString(pattern,false);if(bytes.length>maxsize){return 0}writeArrayToMemory(bytes,s);return bytes.length-1}function _strftime_l(s,maxsize,format,tm){return _strftime(s,maxsize,format,tm)}function _time(ptr){var ret=Date.now()/1e3|0;if(ptr){HEAP32[ptr>>2]=ret}return ret}var FSNode=function(parent,name,mode,rdev){if(!parent){parent=this}this.parent=parent;this.mount=parent.mount;this.mounted=null;this.id=FS.nextInode++;this.name=name;this.mode=mode;this.node_ops={};this.stream_ops={};this.rdev=rdev};var readMode=292|73;var writeMode=146;Object.defineProperties(FSNode.prototype,{read:{get:function(){return(this.mode&readMode)===readMode},set:function(val){val?this.mode|=readMode:this.mode&=~readMode}},write:{get:function(){return(this.mode&writeMode)===writeMode},set:function(val){val?this.mode|=writeMode:this.mode&=~writeMode}},isFolder:{get:function(){return FS.isDir(this.mode)}},isDevice:{get:function(){return FS.isChrdev(this.mode)}}});FS.FSNode=FSNode;FS.staticInit();InternalError=Module["InternalError"]=extendError(Error,"InternalError");embind_init_charCodes();BindingError=Module["BindingError"]=extendError(Error,"BindingError");init_ClassHandle();init_embind();init_RegisteredPointer();UnboundTypeError=Module["UnboundTypeError"]=extendError(Error,"UnboundTypeError");init_emval();var ASSERTIONS=false;function intArrayFromString(stringy,dontAddNull,length){var len=length>0?length:lengthBytesUTF8(stringy)+1;var u8array=new Array(len);var numBytesWritten=stringToUTF8Array(stringy,u8array,0,u8array.length);if(dontAddNull)u8array.length=numBytesWritten;return u8array}function intArrayToString(array){var ret=[];for(var i=0;i<array.length;i++){var chr=array[i];if(chr>255){if(ASSERTIONS){assert(false,"Character code "+chr+" ("+String.fromCharCode(chr)+")  at offset "+i+" not in 0x00-0xFF.")}chr&=255}ret.push(String.fromCharCode(chr))}return ret.join("")}var decodeBase64=typeof atob=="function"?atob:function(input){var keyStr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";var output="";var chr1,chr2,chr3;var enc1,enc2,enc3,enc4;var i=0;input=input.replace(/[^A-Za-z0-9\+\/\=]/g,"");do{enc1=keyStr.indexOf(input.charAt(i++));enc2=keyStr.indexOf(input.charAt(i++));enc3=keyStr.indexOf(input.charAt(i++));enc4=keyStr.indexOf(input.charAt(i++));chr1=enc1<<2|enc2>>4;chr2=(enc2&15)<<4|enc3>>2;chr3=(enc3&3)<<6|enc4;output=output+String.fromCharCode(chr1);if(enc3!==64){output=output+String.fromCharCode(chr2)}if(enc4!==64){output=output+String.fromCharCode(chr3)}}while(i<input.length);return output};function intArrayFromBase64(s){if(typeof ENVIRONMENT_IS_NODE=="boolean"&&ENVIRONMENT_IS_NODE){var buf=Buffer.from(s,"base64");return new Uint8Array(buf["buffer"],buf["byteOffset"],buf["byteLength"])}try{var decoded=decodeBase64(s);var bytes=new Uint8Array(decoded.length);for(var i=0;i<decoded.length;++i){bytes[i]=decoded.charCodeAt(i)}return bytes}catch(_){throw new Error("Converting base64 string to bytes failed.")}}function tryParseAsDataURI(filename){if(!isDataURI(filename)){return}return intArrayFromBase64(filename.slice(dataURIPrefix.length))}var asmLibraryArg={"k":___cxa_allocate_exception,"j":___cxa_throw,"t":___syscall_fcntl64,"M":___syscall_ioctl,"N":___syscall_open,"V":__embind_finalize_value_object,"F":__embind_register_bigint,"R":__embind_register_bool,"q":__embind_register_class,"p":__embind_register_class_constructor,"f":__embind_register_class_function,"w":__embind_register_constant,"Q":__embind_register_emval,"v":__embind_register_float,"g":__embind_register_function,"h":__embind_register_integer,"b":__embind_register_memory_view,"u":__embind_register_std_string,"n":__embind_register_std_wstring,"X":__embind_register_value_object,"W":__embind_register_value_object_field,"S":__embind_register_void,"H":__emscripten_throw_longjmp,"T":__emval_decref,"U":__emval_incref,"o":__emval_take_value,"O":__localtime_js,"P":__tzset_js,"a":_abort,"i":_emscripten_asm_const_int,"I":_emscripten_resize_heap,"J":_environ_get,"K":_environ_sizes_get,"d":_exit,"r":_fd_close,"L":_fd_read,"E":_fd_seek,"s":_fd_write,"e":_getTempRet0,"x":_gettimeofday,"z":invoke_ii,"B":invoke_iii,"A":invoke_iiii,"l":invoke_vi,"C":invoke_vii,"D":invoke_viii,"m":invoke_viiii,"c":_setTempRet0,"Y":_strftime,"G":_strftime_l,"y":_time};var asm=createWasm();var ___wasm_call_ctors=Module["___wasm_call_ctors"]=function(){return(___wasm_call_ctors=Module["___wasm_call_ctors"]=Module["asm"]["_"]).apply(null,arguments)};var _malloc=Module["_malloc"]=function(){return(_malloc=Module["_malloc"]=Module["asm"]["$"]).apply(null,arguments)};var _free=Module["_free"]=function(){return(_free=Module["_free"]=Module["asm"]["aa"]).apply(null,arguments)};var ___errno_location=Module["___errno_location"]=function(){return(___errno_location=Module["___errno_location"]=Module["asm"]["ba"]).apply(null,arguments)};var ___getTypeName=Module["___getTypeName"]=function(){return(___getTypeName=Module["___getTypeName"]=Module["asm"]["da"]).apply(null,arguments)};var ___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=function(){return(___embind_register_native_and_builtin_types=Module["___embind_register_native_and_builtin_types"]=Module["asm"]["ea"]).apply(null,arguments)};var _setThrew=Module["_setThrew"]=function(){return(_setThrew=Module["_setThrew"]=Module["asm"]["fa"]).apply(null,arguments)};var stackSave=Module["stackSave"]=function(){return(stackSave=Module["stackSave"]=Module["asm"]["ga"]).apply(null,arguments)};var stackRestore=Module["stackRestore"]=function(){return(stackRestore=Module["stackRestore"]=Module["asm"]["ha"]).apply(null,arguments)};var dynCall_jiji=Module["dynCall_jiji"]=function(){return(dynCall_jiji=Module["dynCall_jiji"]=Module["asm"]["ia"]).apply(null,arguments)};var dynCall_viijii=Module["dynCall_viijii"]=function(){return(dynCall_viijii=Module["dynCall_viijii"]=Module["asm"]["ja"]).apply(null,arguments)};var dynCall_iiiiij=Module["dynCall_iiiiij"]=function(){return(dynCall_iiiiij=Module["dynCall_iiiiij"]=Module["asm"]["ka"]).apply(null,arguments)};var dynCall_iiiiijj=Module["dynCall_iiiiijj"]=function(){return(dynCall_iiiiijj=Module["dynCall_iiiiijj"]=Module["asm"]["la"]).apply(null,arguments)};var dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=function(){return(dynCall_iiiiiijj=Module["dynCall_iiiiiijj"]=Module["asm"]["ma"]).apply(null,arguments)};function invoke_ii(index,a1){var sp=stackSave();try{return getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vi(index,a1){var sp=stackSave();try{getWasmTableEntry(index)(a1)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viiii(index,a1,a2,a3,a4){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3,a4)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_viii(index,a1,a2,a3){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_vii(index,a1,a2){var sp=stackSave();try{getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iii(index,a1,a2){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}function invoke_iiii(index,a1,a2,a3){var sp=stackSave();try{return getWasmTableEntry(index)(a1,a2,a3)}catch(e){stackRestore(sp);if(e!==e+0)throw e;_setThrew(1,0)}}Module["FS"]=FS;var calledRun;function ExitStatus(status){this.name="ExitStatus";this.message="Program terminated with exit("+status+")";this.status=status}dependenciesFulfilled=function runCaller(){if(!calledRun)run();if(!calledRun)dependenciesFulfilled=runCaller};function run(args){args=args||arguments_;if(runDependencies>0){return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module["calledRun"]=true;if(ABORT)return;initRuntime();readyPromiseResolve(Module);if(Module["onRuntimeInitialized"])Module["onRuntimeInitialized"]();postRun()}if(Module["setStatus"]){Module["setStatus"]("Running...");setTimeout(function(){setTimeout(function(){Module["setStatus"]("")},1);doRun()},1)}else{doRun()}}Module["run"]=run;function exit(status,implicit){EXITSTATUS=status;if(keepRuntimeAlive()){}else{exitRuntime()}procExit(status)}function procExit(code){EXITSTATUS=code;if(!keepRuntimeAlive()){if(Module["onExit"])Module["onExit"](code);ABORT=true}quit_(code,new ExitStatus(code))}if(Module["preInit"]){if(typeof Module["preInit"]=="function")Module["preInit"]=[Module["preInit"]];while(Module["preInit"].length>0){Module["preInit"].pop()()}}run();


  return Module.ready
}
);
})();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Module);

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");
var transitionalDefaults = __webpack_require__(/*! ../defaults/transitional */ "./node_modules/axios/lib/defaults/transitional.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }

      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || transitionalDefaults;
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);
        request.abort();
        request = null;
      };

      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
axios.VERSION = (__webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version);

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;

  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;

  // eslint-disable-next-line func-names
  this.promise.then(function(cancel) {
    if (!token._listeners) return;

    var i;
    var l = token._listeners.length;

    for (i = 0; i < l; i++) {
      token._listeners[i](cancel);
    }
    token._listeners = null;
  });

  // eslint-disable-next-line func-names
  this.promise.then = function(onfulfilled) {
    var _resolve;
    // eslint-disable-next-line func-names
    var promise = new Promise(function(resolve) {
      token.subscribe(resolve);
      _resolve = resolve;
    }).then(onfulfilled);

    promise.cancel = function reject() {
      token.unsubscribe(_resolve);
    };

    return promise;
  };

  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Subscribe to the cancel signal
 */

CancelToken.prototype.subscribe = function subscribe(listener) {
  if (this.reason) {
    listener(this.reason);
    return;
  }

  if (this._listeners) {
    this._listeners.push(listener);
  } else {
    this._listeners = [listener];
  }
};

/**
 * Unsubscribe from the cancel signal
 */

CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
  if (!this._listeners) {
    return;
  }
  var index = this._listeners.indexOf(listener);
  if (index !== -1) {
    this._listeners.splice(index, 1);
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(configOrUrl, config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof configOrUrl === 'string') {
    config = config || {};
    config.url = configOrUrl;
  } else {
    config = configOrUrl || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean),
      forcedJSONParsing: validators.transitional(validators.boolean),
      clarifyTimeoutError: validators.transitional(validators.boolean)
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");
var Cancel = __webpack_require__(/*! ../cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }

  if (config.signal && config.signal.aborted) {
    throw new Cancel('canceled');
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };

  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
  });

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults/index.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ../helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ../core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");
var transitionalDefaults = __webpack_require__(/*! ./transitional */ "./node_modules/axios/lib/defaults/transitional.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ../adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ../adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: transitionalDefaults,

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },

  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};


/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((module) => {

module.exports = {
  "version": "0.26.1"
};

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return utils.isObject(payload) && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var VERSION = (__webpack_require__(/*! ../env/data */ "./node_modules/axios/lib/env/data.js").version);

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};

/**
 * Transitional option validator
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
    }

    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return Array.isArray(val);
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return toString.call(val) === '[object FormData]';
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return toString.call(val) === '[object URLSearchParams]';
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./src/ARControllerNFT.ts":
/*!********************************!*\
  !*** ./src/ARControllerNFT.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARControllerNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");







var ARControllerNFT = /*#__PURE__*/function () {
  function ARControllerNFT(width, height, cameraParam) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARControllerNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "id", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "width", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "height", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraParam", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraId", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraLoaded", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "artoolkitNFT", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "listeners", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkers", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "marker_transform_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "transformGL_RH", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoHeight", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoSize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "framepointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "framesize", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "dataHeap", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLuma", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "camera_mat", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "videoLumaPointer", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFound", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerFoundTime", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "nftMarkerCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "defaultMarkerWidth", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "_bwpointer", void 0);

    this.id = -1;
    this.width = width;
    this.height = height;
    this.cameraParam = cameraParam;
    this.cameraId = -1;
    this.cameraLoaded = false;
    this.artoolkitNFT;
    this.listeners = {};
    this.nftMarkers = {};
    this.transform_mat = new Float64Array(16);
    this.transformGL_RH = new Float64Array(16);
    this.marker_transform_mat = null;
    this.videoWidth = width;
    this.videoHeight = height;
    this.videoSize = this.videoWidth * this.videoHeight;
    this.framepointer = null;
    this.framesize = null;
    this.dataHeap = null;
    this.videoLuma = null;
    this.camera_mat = null;
    this.videoLumaPointer = null;
    this.nftMarkerFound = false;
    this.nftMarkerFoundTime = 0;
    this.nftMarkerCount = 0;
    this._bwpointer = null;
    this.defaultMarkerWidth = 1;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARControllerNFT, [{
    key: "process",
    value: function process(image) {
      var result = this.detectMarker(image);

      if (result != 0) {
        console.error("[ARControllerNFT]", "detectMarker error:", result);
      }

      var k, o;

      for (k in this.nftMarkers) {
        o = this.converter().nftMarkers[k];
        o.inPrevious = o.inCurrent;
        o.inCurrent = false;
      }

      var nftMarkerCount = this.nftMarkerCount;
      this.detectNFTMarker();
      var MARKER_LOST_TIME = 200;

      for (var i = 0; i < nftMarkerCount; i++) {
        var nftMarkerInfo = this.getNFTMarker(i);
        var markerType = _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__["default"].NFT_MARKER;

        if (nftMarkerInfo.found) {
          this.nftMarkerFound = i;
          this.nftMarkerFoundTime = Date.now();
          var visible = this.trackNFTMarkerId(i);
          visible.matrix.set(nftMarkerInfo.pose);
          visible.inCurrent = true;
          this.transMatToGLMat(visible.matrix, this.transform_mat);
          this.transformGL_RH = this.arglCameraViewRHf(this.transform_mat);
          this.dispatchEvent({
            name: "getNFTMarker",
            target: this,
            data: {
              index: i,
              type: markerType,
              marker: nftMarkerInfo,
              matrix: this.transform_mat,
              matrixGL_RH: this.transformGL_RH
            }
          });
        } else if (self.nftMarkerFound === i) {
          if (Date.now() - this.nftMarkerFoundTime > MARKER_LOST_TIME) {
            this.nftMarkerFound = false;
            this.dispatchEvent({
              name: "lostNFTMarker",
              target: this,
              data: {
                index: i,
                type: markerType,
                marker: nftMarkerInfo,
                matrix: this.transform_mat,
                matrixGL_RH: this.transformGL_RH
              }
            });
          }
        }
      }
    }
  }, {
    key: "detectNFTMarker",
    value: function detectNFTMarker() {
      this.artoolkitNFT.detectNFTMarker(this.id);
    }
  }, {
    key: "trackNFTMarkerId",
    value: function trackNFTMarkerId(id, markerWidth) {
      var obj = this.converter().nftMarkers[id];

      if (!obj) {
        this.converter().nftMarkers[id] = obj = {
          inPrevious: false,
          inCurrent: false,
          matrix: new Float64Array(12),
          matrixGL_RH: new Float64Array(12),
          markerWidth: markerWidth || this.defaultMarkerWidth
        };
      }

      if (markerWidth) {
        obj.markerWidth = markerWidth;
      }

      return obj;
    }
  }, {
    key: "detectMarker",
    value: function detectMarker(image) {
      if (this._copyImageToHeap(image)) {
        return this.artoolkitNFT.detectMarker(this.id);
      }

      return -99;
    }
  }, {
    key: "getNFTMarker",
    value: function getNFTMarker(markerIndex) {
      if (0 === this.artoolkitNFT.getNFTMarker(this.id, markerIndex)) {
        return this.artoolkitNFT.NFTMarkerInfo;
      }
    }
  }, {
    key: "getNFTData",
    value: function getNFTData(id, index) {
      return this.artoolkitNFT.getNFTData(id, index);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(name, callback) {
      if (!this.converter().listeners[name]) {
        this.converter().listeners[name] = [];
      }

      this.converter().listeners[name].push(callback);
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(name, callback) {
      if (this.converter().listeners[name]) {
        var index = this.converter().listeners[name].indexOf(callback);

        if (index > -1) {
          this.converter().listeners[name].splice(index, 1);
        }
      }
    }
  }, {
    key: "dispatchEvent",
    value: function dispatchEvent(event) {
      var listeners = this.converter().listeners[event.name];

      if (listeners) {
        for (var i = 0; i < listeners.length; i++) {
          listeners[i].call(this, event);
        }
      }
    }
  }, {
    key: "debugSetup",
    value: function debugSetup() {
      this.setDebugMode(true);
      this._bwpointer = this.getProcessingImage();
    }
  }, {
    key: "transMatToGLMat",
    value: function transMatToGLMat(transMat, glMat, scale) {
      if (glMat == undefined) {
        glMat = new Float64Array(16);
      }

      glMat[0 + 0 * 4] = transMat[0];
      glMat[0 + 1 * 4] = transMat[1];
      glMat[0 + 2 * 4] = transMat[2];
      glMat[0 + 3 * 4] = transMat[3];
      glMat[1 + 0 * 4] = transMat[4];
      glMat[1 + 1 * 4] = transMat[5];
      glMat[1 + 2 * 4] = transMat[6];
      glMat[1 + 3 * 4] = transMat[7];
      glMat[2 + 0 * 4] = transMat[8];
      glMat[2 + 1 * 4] = transMat[9];
      glMat[2 + 2 * 4] = transMat[10];
      glMat[2 + 3 * 4] = transMat[11];
      glMat[3 + 0 * 4] = 0.0;
      glMat[3 + 1 * 4] = 0.0;
      glMat[3 + 2 * 4] = 0.0;
      glMat[3 + 3 * 4] = 1.0;

      if (scale != undefined && scale !== 0.0) {
        glMat[12] *= scale;
        glMat[13] *= scale;
        glMat[14] *= scale;
      }

      return glMat;
    }
  }, {
    key: "arglCameraViewRHf",
    value: function arglCameraViewRHf(glMatrix, glRhMatrix, scale) {
      var m_modelview;

      if (glRhMatrix == undefined) {
        m_modelview = new Float64Array(16);
      } else {
        m_modelview = glRhMatrix;
      }

      m_modelview[0] = glMatrix[0];
      m_modelview[4] = glMatrix[4];
      m_modelview[8] = glMatrix[8];
      m_modelview[12] = glMatrix[12];
      m_modelview[1] = -glMatrix[1];
      m_modelview[5] = -glMatrix[5];
      m_modelview[9] = -glMatrix[9];
      m_modelview[13] = -glMatrix[13];
      m_modelview[2] = -glMatrix[2];
      m_modelview[6] = -glMatrix[6];
      m_modelview[10] = -glMatrix[10];
      m_modelview[14] = -glMatrix[14];
      m_modelview[3] = 0;
      m_modelview[7] = 0;
      m_modelview[11] = 0;
      m_modelview[15] = 1;

      if (scale != undefined && scale !== 0.0) {
        m_modelview[12] *= scale;
        m_modelview[13] *= scale;
        m_modelview[14] *= scale;
      }

      glRhMatrix = m_modelview;
      return glRhMatrix;
    }
  }, {
    key: "getTransformationMatrix",
    value: function getTransformationMatrix() {
      return this.transform_mat;
    }
  }, {
    key: "getCameraMatrix",
    value: function getCameraMatrix() {
      return this.camera_mat;
    }
  }, {
    key: "setDebugMode",
    value: function setDebugMode(mode) {
      return this.artoolkitNFT.setDebugMode(this.id, mode);
    }
  }, {
    key: "getDebugMode",
    value: function getDebugMode() {
      return this.artoolkitNFT.getDebugMode(this.id);
    }
  }, {
    key: "getProcessingImage",
    value: function getProcessingImage() {
      return this.artoolkitNFT.getProcessingImage(this.id);
    }
  }, {
    key: "setLogLevel",
    value: function setLogLevel(mode) {
      return this.artoolkitNFT.setLogLevel(mode);
    }
  }, {
    key: "getLogLevel",
    value: function getLogLevel() {
      return this.artoolkitNFT.getLogLevel();
    }
  }, {
    key: "setProjectionNearPlane",
    value: function setProjectionNearPlane(value) {
      return this.artoolkitNFT.setProjectionNearPlane(this.id, value);
    }
  }, {
    key: "getProjectionNearPlane",
    value: function getProjectionNearPlane() {
      return this.artoolkitNFT.getProjectionNearPlane(this.id);
    }
  }, {
    key: "setProjectionFarPlane",
    value: function setProjectionFarPlane(value) {
      return this.artoolkitNFT.setProjectionFarPlane(this.id, value);
    }
  }, {
    key: "getProjectionFarPlane",
    value: function getProjectionFarPlane() {
      return this.artoolkitNFT.getProjectionFarPlane(this.id);
    }
  }, {
    key: "setThresholdMode",
    value: function setThresholdMode(mode) {
      return this.artoolkitNFT.setThresholdMode(this.id, mode);
    }
  }, {
    key: "getThresholdMode",
    value: function getThresholdMode() {
      return this.artoolkitNFT.getThresholdMode(this.id);
    }
  }, {
    key: "setThreshold",
    value: function setThreshold(threshold) {
      return this.artoolkitNFT.setThreshold(this.id, threshold);
    }
  }, {
    key: "getThreshold",
    value: function getThreshold() {
      return this.artoolkitNFT.getThreshold(this.id);
    }
  }, {
    key: "loadNFTMarker",
    value: function () {
      var _loadNFTMarker = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee(urlOrData, onSuccess, onError) {
        var _this = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, [urlOrData], function (ids) {
                  _this.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context.sent;
                return _context.abrupt("return", nft);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadNFTMarker(_x, _x2, _x3) {
        return _loadNFTMarker.apply(this, arguments);
      }

      return loadNFTMarker;
    }()
  }, {
    key: "loadNFTMarkers",
    value: function () {
      var _loadNFTMarkers = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData, onSuccess, onError) {
        var _this2 = this;

        var nft;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.artoolkitNFT.addNFTMarkers(this.id, urlOrData, function (ids) {
                  _this2.nftMarkerCount += ids.length;
                  onSuccess(ids);
                }, onError);

              case 2:
                nft = _context2.sent;
                return _context2.abrupt("return", nft);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadNFTMarkers(_x4, _x5, _x6) {
        return _loadNFTMarkers.apply(this, arguments);
      }

      return loadNFTMarkers;
    }()
  }, {
    key: "setImageProcMode",
    value: function setImageProcMode(mode) {
      return this.artoolkitNFT.setImageProcMode(this.id, mode);
    }
  }, {
    key: "getImageProcMode",
    value: function getImageProcMode() {
      return this.artoolkitNFT.getImageProcMode(this.id);
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "_initialize",
    value: function () {
      var _initialize2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee3() {
        var _this3 = this;

        var params;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return new _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_5__["default"]().init();

              case 2:
                this.artoolkitNFT = _context3.sent;
                console.log("[ARControllerNFT]", "ARToolkitNFT initialized");
                _context3.next = 6;
                return this.artoolkitNFT.loadCamera(this.cameraParam);

              case 6:
                this.cameraId = _context3.sent;
                console.log("[ARControllerNFT]", "Camera params loaded with ID", this.cameraId);
                this.id = this.artoolkitNFT.setup(this.width, this.height, this.cameraId);
                console.log("[ARControllerNFT]", "Got ID from setup", this.id);

                this._initNFT();

                params = this.artoolkitNFT.frameMalloc;
                this.framepointer = params.framepointer;
                this.framesize = params.framesize;
                this.videoLumaPointer = params.videoLumaPointer;
                this.dataHeap = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.framepointer, this.framesize);
                this.videoLuma = new Uint8Array(this.artoolkitNFT.instance.HEAPU8.buffer, this.videoLumaPointer, this.framesize / 4);
                this.camera_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.camera, 16);
                this.marker_transform_mat = new Float64Array(this.artoolkitNFT.instance.HEAPU8.buffer, params.transform, 12);
                this.setProjectionNearPlane(0.1);
                this.setProjectionFarPlane(1000);
                setTimeout(function () {
                  _this3.dispatchEvent({
                    name: "load",
                    target: _this3
                  });
                }, 1);
                return _context3.abrupt("return", this);

              case 23:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _initialize() {
        return _initialize2.apply(this, arguments);
      }

      return _initialize;
    }()
  }, {
    key: "_initNFT",
    value: function _initNFT() {
      this.artoolkitNFT.setupAR2(this.id);
    }
  }, {
    key: "_copyImageToHeap",
    value: function _copyImageToHeap(sourceImage) {
      if (!sourceImage) {
        console.error("Error: no provided imageData to ARControllerNFT");
        return;
      }

      var data;

      if (sourceImage.data) {
        data = sourceImage.data;
      }

      if (this.videoLuma) {
        var q = 0;

        for (var p = 0; p < this.videoSize; p++) {
          var r = data[q + 0],
              g = data[q + 1],
              b = data[q + 2];
          this.videoLuma[p] = r + r + r + b + g + g + g + g >> 3;
          q += 4;
        }
      }

      if (this.dataHeap) {
        this.dataHeap.set(data);
        return true;
      }

      return false;
    }
  }], [{
    key: "initWithDimensions",
    value: function () {
      var _initWithDimensions = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee4(width, height, cameraParam) {
        var arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                arControllerNFT = new ARControllerNFT(width, height, cameraParam);
                _context4.next = 3;
                return arControllerNFT._initialize();

              case 3:
                return _context4.abrupt("return", _context4.sent);

              case 4:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      }));

      function initWithDimensions(_x7, _x8, _x9) {
        return _initWithDimensions.apply(this, arguments);
      }

      return initWithDimensions;
    }()
  }, {
    key: "initWithImage",
    value: function () {
      var _initWithImage = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee5(image, cameraParam) {
        var width, height, arControllerNFT;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                width = image.videoWidth || image.width;
                height = image.videoHeight || image.height;
                arControllerNFT = new ARControllerNFT(width, height, cameraParam);
                _context5.next = 5;
                return arControllerNFT._initialize();

              case 5:
                return _context5.abrupt("return", _context5.sent);

              case 6:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      }));

      function initWithImage(_x10, _x11) {
        return _initWithImage.apply(this, arguments);
      }

      return initWithImage;
    }()
  }]);

  return ARControllerNFT;
}();



/***/ }),

/***/ "./src/ARToolkitNFT.ts":
/*!*****************************!*\
  !*** ./src/ARToolkitNFT.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ARToolkitNFT)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../build/artoolkitNFT_ES6_wasm */ "./build/artoolkitNFT_ES6_wasm.js");
/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Utils */ "./src/Utils.ts");







var UNKNOWN_MARKER = -1;
var NFT_MARKER = 0;

var ARToolkitNFT = /*#__PURE__*/function () {
  function ARToolkitNFT() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ARToolkitNFT);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "instance", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "markerNFTCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "cameraCount", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "version", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setup", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "teardown", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setupAR2", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getDebugMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProcessingImage", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "detectMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "detectNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getNFTMarker", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getNFTData", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getLogLevel", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "frameMalloc", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "NFTMarkerInfo", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProjectionNearPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getProjectionFarPlane", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getThresholdMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getThreshold", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "setImageProcMode", void 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__["default"])(this, "getImageProcMode", void 0);

    this.instance;
    this.markerNFTCount = 0;
    this.cameraCount = 0;
    this.version = "1.1.2";
    console.info("ARToolkitNFT ", this.version);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ARToolkitNFT, [{
    key: "init",
    value: function () {
      var _init = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee() {
        var scope;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (0,_build_artoolkitNFT_ES6_wasm__WEBPACK_IMPORTED_MODULE_5__["default"])();

              case 2:
                this.instance = _context.sent;

                this._decorate();

                scope = typeof window !== "undefined" ? window : __webpack_require__.g;
                scope.artoolkitNFT = this;
                return _context.abrupt("return", this);

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "_decorate",
    value: function _decorate() {
      var _this = this;

      ["setup", "teardown", "setupAR2", "setLogLevel", "getLogLevel", "setDebugMode", "getDebugMode", "getProcessingImage", "detectMarker", "detectNFTMarker", "getNFTMarker", "getNFTData", "frameMalloc", "NFTMarkerInfo", "setProjectionNearPlane", "getProjectionNearPlane", "setProjectionFarPlane", "getProjectionFarPlane", "setThresholdMode", "getThresholdMode", "setThreshold", "getThreshold", "setImageProcMode", "getImageProcMode", "StringList"].forEach(function (method) {
        _this.converter()[method] = _this.instance[method];
      });

      for (var co in this.instance) {
        if (co.match(/^AR/)) {
          this.converter()[co] = this.instance[co];
        }
      }
    }
  }, {
    key: "converter",
    value: function converter() {
      return this;
    }
  }, {
    key: "loadCamera",
    value: function () {
      var _loadCamera = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().mark(function _callee2(urlOrData) {
        var target, data;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_4___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                target = "/camera_param_" + this.cameraCount++;

                if (!(urlOrData instanceof Uint8Array)) {
                  _context2.next = 5;
                  break;
                }

                data = urlOrData;
                _context2.next = 14;
                break;

              case 5:
                _context2.prev = 5;
                _context2.next = 8;
                return _Utils__WEBPACK_IMPORTED_MODULE_6__["default"].fetchRemoteData(urlOrData);

              case 8:
                data = _context2.sent;
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](5);
                throw _context2.t0;

              case 14:
                this._storeDataFile(data, target);

                return _context2.abrupt("return", this.instance._loadCamera(target));

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[5, 11]]);
      }));

      function loadCamera(_x) {
        return _loadCamera.apply(this, arguments);
      }

      return loadCamera;
    }()
  }, {
    key: "addNFTMarkers",
    value: function addNFTMarkers(arId, urls, callback, onError2) {
      var _this2 = this;

      var prefixes = [];
      var pending = urls.length * 3;

      var onSuccess = function onSuccess(filename) {
        pending -= 1;

        if (pending === 0) {
          var vec = new _this2.instance.StringList();
          var markerIds = [];

          for (var i = 0; i < prefixes.length; i++) {
            vec.push_back(prefixes[i]);
          }

          var ret = _this2.instance._addNFTMarkers(arId, vec);

          for (var _i = 0; _i < ret.size(); _i++) {
            markerIds.push(ret.get(_i));
          }

          console.log("add nft marker ids: ", markerIds);
          if (callback) callback(markerIds);
        }
      };

      var onError = function onError(filename, errorNumber) {
        console.log("failed to load: ", filename);
        onError2(errorNumber);
      };

      var Ids = [];
      urls.forEach(function (element, index) {
        var prefix = "/markerNFT_" + _this2.markerNFTCount;
        prefixes.push(prefix);

        if (Array.isArray(element)) {
          element.forEach(function (url) {
            var filename = prefix + "." + url.split('.').pop();
            ;

            _this2.ajax(url, filename, onSuccess.bind(filename), onError.bind(filename));
          });
          _this2.markerNFTCount += 1;
        } else {
          var filename1 = prefix + ".fset";
          var filename2 = prefix + ".iset";
          var filename3 = prefix + ".fset3";

          _this2.ajax(element + ".fset", filename1, onSuccess.bind(filename1), onError.bind(filename1));

          _this2.ajax(element + ".iset", filename2, onSuccess.bind(filename2), onError.bind(filename2));

          _this2.ajax(element + ".fset3", filename3, onSuccess.bind(filename3), onError.bind(filename3));

          _this2.markerNFTCount += 1;
        }

        Ids.push(index);
      });
      return Ids;
    }
  }, {
    key: "_storeDataFile",
    value: function _storeDataFile(data, target) {
      this.instance.FS.writeFile(target, data, {
        encoding: "binary"
      });
    }
  }, {
    key: "ajax",
    value: function ajax(url, target, callback, errorCallback) {
      var _this3 = this;

      var oReq = new XMLHttpRequest();
      oReq.open("GET", url, true);
      oReq.responseType = "arraybuffer";

      var writeByteArrayToFS = function writeByteArrayToFS(target, byteArray, callback) {
        _this3.instance.FS.writeFile(target, byteArray, {
          encoding: "binary"
        });

        callback(byteArray);
      };

      oReq.onload = function () {
        if (this.status == 200) {
          var arrayBuffer = oReq.response;
          var byteArray = new Uint8Array(arrayBuffer);
          writeByteArrayToFS(target, byteArray, callback);
        } else {
          errorCallback(this.status);
        }
      };

      oReq.send();
    }
  }], [{
    key: "UNKNOWN_MARKER",
    get: function get() {
      return UNKNOWN_MARKER;
    }
  }, {
    key: "NFT_MARKER",
    get: function get() {
      return NFT_MARKER;
    }
  }]);

  return ARToolkitNFT;
}();



/***/ }),

/***/ "./src/Utils.ts":
/*!**********************!*\
  !*** ./src/Utils.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Utils)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_4__);






var Utils = /*#__PURE__*/function () {
  function Utils() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, Utils);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Utils, null, [{
    key: "fetchRemoteData",
    value: function () {
      var _fetchRemoteData = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(url) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                _context.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: "arraybuffer"
                });

              case 3:
                response = _context.sent;
                return _context.abrupt("return", new Uint8Array(response.data));

              case 7:
                _context.prev = 7;
                _context.t0 = _context["catch"](0);
                throw _context.t0;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, null, [[0, 7]]);
      }));

      function fetchRemoteData(_x) {
        return _fetchRemoteData.apply(this, arguments);
      }

      return fetchRemoteData;
    }()
  }, {
    key: "fetchRemoteDataCallback",
    value: function () {
      var _fetchRemoteDataCallback = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee2(url, callback) {
        var response;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.prev = 0;
                _context2.next = 3;
                return axios__WEBPACK_IMPORTED_MODULE_4___default().get(url, {
                  responseType: "arraybuffer"
                }).then(function (response) {
                  var data = new Uint8Array(response.data);
                  console.log(data);
                  callback(response);
                });

              case 3:
                response = _context2.sent;
                return _context2.abrupt("return", response);

              case 7:
                _context2.prev = 7;
                _context2.t0 = _context2["catch"](0);
                throw _context2.t0;

              case 10:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, null, [[0, 7]]);
      }));

      function fetchRemoteDataCallback(_x2, _x3) {
        return _fetchRemoteDataCallback.apply(this, arguments);
      }

      return fetchRemoteDataCallback;
    }()
  }, {
    key: "string2Uint8Data",
    value: function string2Uint8Data(string) {
      var data = new Uint8Array(string.length);

      for (var i = 0; i < data.length; i++) {
        data[i] = string.charCodeAt(i) & 0xff;
      }

      return data;
    }
  }]);

  return Utils;
}();



/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "?deb7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?4dea":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "?f955":
/*!**********************!*\
  !*** path (ignored) ***!
  \**********************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ARToolkitNFT */ "./src/ARToolkitNFT.ts");
/* harmony import */ var _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ARControllerNFT */ "./src/ARControllerNFT.ts");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ARToolkitNFT: _ARToolkitNFT__WEBPACK_IMPORTED_MODULE_0__["default"],
  ARControllerNFT: _ARControllerNFT__WEBPACK_IMPORTED_MODULE_1__["default"]
});
})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,